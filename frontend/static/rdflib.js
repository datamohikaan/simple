/*! For license information please see rdflib.js.LICENSE.txt */
var rdflib;(()=>{var e={8599:e=>{"use strict";const{AbortController:t,AbortSignal:r}="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0;e.exports=t,e.exports.AbortSignal=r,e.exports.default=t},9282:(e,t,r)=>{"use strict";var n=r(4155),i=r(5108);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}var a,s,l=r(2136).codes,u=l.ERR_AMBIGUOUS_ARGUMENT,c=l.ERR_INVALID_ARG_TYPE,h=l.ERR_INVALID_ARG_VALUE,f=l.ERR_INVALID_RETURN_VALUE,d=l.ERR_MISSING_ARGS,p=r(5961),b=r(9539).inspect,y=r(9539).types,g=y.isPromise,_=y.isRegExp,m=Object.assign?Object.assign:r(8091).assign,w=Object.is?Object.is:r(609);function v(){var e=r(9158);a=e.isDeepEqual,s=e.isDeepStrictEqual}new Map;var E=!1,S=e.exports=x,R={};function A(e){if(e.message instanceof Error)throw e.message;throw new p(e)}function T(e,t,r,n){if(!r){var i=!1;if(0===t)i=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var o=new p({actual:r,expected:!0,message:n,operator:"==",stackStartFn:e});throw o.generatedMessage=i,o}}function x(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];T.apply(void 0,[x,t.length].concat(t))}S.fail=function e(t,r,o,a,s){var l,u=arguments.length;if(0===u)l="Failed";else if(1===u)o=t,t=void 0;else{if(!1===E){E=!0;var c=n.emitWarning?n.emitWarning:i.warn.bind(i);c("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")}2===u&&(a="!=")}if(o instanceof Error)throw o;var h={actual:t,expected:r,operator:void 0===a?"fail":a,stackStartFn:s||e};void 0!==o&&(h.message=o);var f=new p(h);throw l&&(f.message=l,f.generatedMessage=!0),f},S.AssertionError=p,S.ok=x,S.equal=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");t!=r&&A({actual:t,expected:r,message:n,operator:"==",stackStartFn:e})},S.notEqual=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");t==r&&A({actual:t,expected:r,message:n,operator:"!=",stackStartFn:e})},S.deepEqual=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&v(),a(t,r)||A({actual:t,expected:r,message:n,operator:"deepEqual",stackStartFn:e})},S.notDeepEqual=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&v(),a(t,r)&&A({actual:t,expected:r,message:n,operator:"notDeepEqual",stackStartFn:e})},S.deepStrictEqual=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&v(),s(t,r)||A({actual:t,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:e})},S.notDeepStrictEqual=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&v(),s(t,r)&&A({actual:t,expected:r,message:n,operator:"notDeepStrictEqual",stackStartFn:e})},S.strictEqual=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");w(t,r)||A({actual:t,expected:r,message:n,operator:"strictEqual",stackStartFn:e})},S.notStrictEqual=function e(t,r,n){if(arguments.length<2)throw new d("actual","expected");w(t,r)&&A({actual:t,expected:r,message:n,operator:"notStrictEqual",stackStartFn:e})};var k=function e(t,r,n){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r.forEach((function(e){e in t&&(void 0!==n&&"string"==typeof n[e]&&_(t[e])&&t[e].test(n[e])?i[e]=n[e]:i[e]=t[e])}))};function N(e,t,r,n,i,o){if(!(r in e)||!s(e[r],t[r])){if(!n){var a=new k(e,i),l=new k(t,i,e),u=new p({actual:a,expected:l,operator:"deepStrictEqual",stackStartFn:o});throw u.actual=e,u.expected=t,u.operator=o.name,u}A({actual:e,expected:t,message:n,operator:o.name,stackStartFn:o})}}function O(e,t,r,n){if("function"!=typeof t){if(_(t))return t.test(e);if(2===arguments.length)throw new c("expected",["Function","RegExp"],t);if("object"!==o(e)||null===e){var i=new p({actual:e,expected:t,message:r,operator:"deepStrictEqual",stackStartFn:n});throw i.operator=n.name,i}var s=Object.keys(t);if(t instanceof Error)s.push("name","message");else if(0===s.length)throw new h("error",t,"may not be an empty object");return void 0===a&&v(),s.forEach((function(i){"string"==typeof e[i]&&_(t[i])&&t[i].test(e[i])||N(e,t,i,r,s,n)})),!0}return void 0!==t.prototype&&e instanceof t||!Error.isPrototypeOf(t)&&!0===t.call({},e)}function I(e){if("function"!=typeof e)throw new c("fn","Function",e);try{e()}catch(e){return e}return R}function j(e){return g(e)||null!==e&&"object"===o(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function P(e){return Promise.resolve().then((function(){var t;if("function"==typeof e){if(!j(t=e()))throw new f("instance of Promise","promiseFn",t)}else{if(!j(e))throw new c("promiseFn",["Function","Promise"],e);t=e}return Promise.resolve().then((function(){return t})).then((function(){return R})).catch((function(e){return e}))}))}function D(e,t,r,n){if("string"==typeof r){if(4===arguments.length)throw new c("error",["Object","Error","Function","RegExp"],r);if("object"===o(t)&&null!==t){if(t.message===r)throw new u("error/message",'The error message "'.concat(t.message,'" is identical to the message.'))}else if(t===r)throw new u("error/message",'The error "'.concat(t,'" is identical to the message.'));n=r,r=void 0}else if(null!=r&&"object"!==o(r)&&"function"!=typeof r)throw new c("error",["Object","Error","Function","RegExp"],r);if(t===R){var i="";r&&r.name&&(i+=" (".concat(r.name,")")),i+=n?": ".concat(n):".";var a="rejects"===e.name?"rejection":"exception";A({actual:void 0,expected:r,operator:e.name,message:"Missing expected ".concat(a).concat(i),stackStartFn:e})}if(r&&!O(t,r,n,e))throw t}function F(e,t,r,n){if(t!==R){if("string"==typeof r&&(n=r,r=void 0),!r||O(t,r)){var i=n?": ".concat(n):".",o="doesNotReject"===e.name?"rejection":"exception";A({actual:t,expected:r,operator:e.name,message:"Got unwanted ".concat(o).concat(i,"\n")+'Actual message: "'.concat(t&&t.message,'"'),stackStartFn:e})}throw t}}function C(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];T.apply(void 0,[C,t.length].concat(t))}S.throws=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];D.apply(void 0,[e,I(t)].concat(n))},S.rejects=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return P(t).then((function(t){return D.apply(void 0,[e,t].concat(n))}))},S.doesNotThrow=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];F.apply(void 0,[e,I(t)].concat(n))},S.doesNotReject=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return P(t).then((function(t){return F.apply(void 0,[e,t].concat(n))}))},S.ifError=function e(t){if(null!=t){var r="ifError got unwanted exception: ";"object"===o(t)&&"string"==typeof t.message?0===t.message.length&&t.constructor?r+=t.constructor.name:r+=t.message:r+=b(t);var n=new p({actual:t,expected:null,operator:"ifError",message:r,stackStartFn:e}),i=t.stack;if("string"==typeof i){var a=i.split("\n");a.shift();for(var s=n.stack.split("\n"),l=0;l<a.length;l++){var u=s.indexOf(a[l]);if(-1!==u){s=s.slice(0,u);break}}n.stack="".concat(s.join("\n"),"\n").concat(a.join("\n"))}throw n}},S.strict=m(C,S,{equal:S.strictEqual,deepEqual:S.deepStrictEqual,notEqual:S.notStrictEqual,notDeepEqual:S.notDeepStrictEqual}),S.strict.strict=S.strict},5961:(e,t,r)=>{"use strict";var n=r(4155);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?s(e):t}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e){var t="function"==typeof Map?new Map:void 0;return l=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return c(e,arguments,f(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),h(n,e)},l(e)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function c(e,t,r){return c=u()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var i=new(Function.bind.apply(e,n));return r&&h(i,r.prototype),i},c.apply(null,arguments)}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}var p=r(9539).inspect,b=r(2136).codes.ERR_INVALID_ARG_TYPE;function y(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}var g="",_="",m="",w="",v={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function E(e){var t=Object.keys(e),r=Object.create(Object.getPrototypeOf(e));return t.forEach((function(t){r[t]=e[t]})),Object.defineProperty(r,"message",{value:e.message}),r}function S(e){return p(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var R=function(e){function t(e){var r;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),"object"!==d(e)||null===e)throw new b("options","Object",e);var i=e.message,o=e.operator,l=e.stackStartFn,u=e.actual,c=e.expected,h=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=i)r=a(this,f(t).call(this,String(i)));else if(n.stderr&&n.stderr.isTTY&&(n.stderr&&n.stderr.getColorDepth&&1!==n.stderr.getColorDepth()?(g="[34m",_="[32m",w="[39m",m="[31m"):(g="",_="",w="",m="")),"object"===d(u)&&null!==u&&"object"===d(c)&&null!==c&&"stack"in u&&u instanceof Error&&"stack"in c&&c instanceof Error&&(u=E(u),c=E(c)),"deepStrictEqual"===o||"strictEqual"===o)r=a(this,f(t).call(this,function(e,t,r){var i="",o="",a=0,s="",l=!1,u=S(e),c=u.split("\n"),h=S(t).split("\n"),f=0,p="";if("strictEqual"===r&&"object"===d(e)&&"object"===d(t)&&null!==e&&null!==t&&(r="strictEqualObject"),1===c.length&&1===h.length&&c[0]!==h[0]){var b=c[0].length+h[0].length;if(b<=10){if(!("object"===d(e)&&null!==e||"object"===d(t)&&null!==t||0===e&&0===t))return"".concat(v[r],"\n\n")+"".concat(c[0]," !== ").concat(h[0],"\n")}else if("strictEqualObject"!==r&&b<(n.stderr&&n.stderr.isTTY?n.stderr.columns:80)){for(;c[0][f]===h[0][f];)f++;f>2&&(p="\n  ".concat(function(e,t){if(t=Math.floor(t),0==e.length||0==t)return"";var r=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+e.substring(0,r-e.length)}(" ",f),"^"),f=0)}}for(var E=c[c.length-1],R=h[h.length-1];E===R&&(f++<2?s="\n  ".concat(E).concat(s):i=E,c.pop(),h.pop(),0!==c.length&&0!==h.length);)E=c[c.length-1],R=h[h.length-1];var A=Math.max(c.length,h.length);if(0===A){var T=u.split("\n");if(T.length>30)for(T[26]="".concat(g,"...").concat(w);T.length>27;)T.pop();return"".concat(v.notIdentical,"\n\n").concat(T.join("\n"),"\n")}f>3&&(s="\n".concat(g,"...").concat(w).concat(s),l=!0),""!==i&&(s="\n  ".concat(i).concat(s),i="");var x=0,k=v[r]+"\n".concat(_,"+ actual").concat(w," ").concat(m,"- expected").concat(w),N=" ".concat(g,"...").concat(w," Lines skipped");for(f=0;f<A;f++){var O=f-a;if(c.length<f+1)O>1&&f>2&&(O>4?(o+="\n".concat(g,"...").concat(w),l=!0):O>3&&(o+="\n  ".concat(h[f-2]),x++),o+="\n  ".concat(h[f-1]),x++),a=f,i+="\n".concat(m,"-").concat(w," ").concat(h[f]),x++;else if(h.length<f+1)O>1&&f>2&&(O>4?(o+="\n".concat(g,"...").concat(w),l=!0):O>3&&(o+="\n  ".concat(c[f-2]),x++),o+="\n  ".concat(c[f-1]),x++),a=f,o+="\n".concat(_,"+").concat(w," ").concat(c[f]),x++;else{var I=h[f],j=c[f],P=j!==I&&(!y(j,",")||j.slice(0,-1)!==I);P&&y(I,",")&&I.slice(0,-1)===j&&(P=!1,j+=","),P?(O>1&&f>2&&(O>4?(o+="\n".concat(g,"...").concat(w),l=!0):O>3&&(o+="\n  ".concat(c[f-2]),x++),o+="\n  ".concat(c[f-1]),x++),a=f,o+="\n".concat(_,"+").concat(w," ").concat(j),i+="\n".concat(m,"-").concat(w," ").concat(I),x+=2):(o+=i,i="",1!==O&&0!==f||(o+="\n  ".concat(j),x++))}if(x>20&&f<A-2)return"".concat(k).concat(N,"\n").concat(o,"\n").concat(g,"...").concat(w).concat(i,"\n")+"".concat(g,"...").concat(w)}return"".concat(k).concat(l?N:"","\n").concat(o).concat(i).concat(s).concat(p)}(u,c,o)));else if("notDeepStrictEqual"===o||"notStrictEqual"===o){var p=v[o],R=S(u).split("\n");if("notStrictEqual"===o&&"object"===d(u)&&null!==u&&(p=v.notStrictEqualObject),R.length>30)for(R[26]="".concat(g,"...").concat(w);R.length>27;)R.pop();r=1===R.length?a(this,f(t).call(this,"".concat(p," ").concat(R[0]))):a(this,f(t).call(this,"".concat(p,"\n\n").concat(R.join("\n"),"\n")))}else{var A=S(u),T="",x=v[o];"notDeepEqual"===o||"notEqual"===o?(A="".concat(v[o],"\n\n").concat(A)).length>1024&&(A="".concat(A.slice(0,1021),"...")):(T="".concat(S(c)),A.length>512&&(A="".concat(A.slice(0,509),"...")),T.length>512&&(T="".concat(T.slice(0,509),"...")),"deepEqual"===o||"equal"===o?A="".concat(x,"\n\n").concat(A,"\n\nshould equal\n\n"):T=" ".concat(o," ").concat(T)),r=a(this,f(t).call(this,"".concat(A).concat(T)))}return Error.stackTraceLimit=h,r.generatedMessage=!i,Object.defineProperty(s(r),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),r.code="ERR_ASSERTION",r.actual=u,r.expected=c,r.operator=o,Error.captureStackTrace&&Error.captureStackTrace(s(r),l),r.stack,r.name="AssertionError",a(r)}var r,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),r=t,l=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:p.custom,value:function(e,t){return p(this,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){i(e,t,r[t])}))}return e}({},t,{customInspect:!1,depth:0}))}}],l&&o(r.prototype,l),t}(l(Error));e.exports=R},2136:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function i(e){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},i(e)}function o(e,t){return o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},o(e,t)}var a,s,l={};function u(e,t,r){r||(r=Error);var a=function(r){function a(r,o,s){var l;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),l=function(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,i(a).call(this,function(e,r,n){return"string"==typeof t?t:t(e,r,n)}(r,o,s))),l.code=e,l}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(a,r),a}(r);l[e]=a}function c(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}u("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),u("ERR_INVALID_ARG_TYPE",(function(e,t,i){var o,s,l,u,h;if(void 0===a&&(a=r(9282)),a("string"==typeof e,"'name' must be a string"),"string"==typeof t&&(s="not ",t.substr(0,s.length)===s)?(o="must not be",t=t.replace(/^not /,"")):o="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}(e," argument"))l="The ".concat(e," ").concat(o," ").concat(c(t,"type"));else{var f=("number"!=typeof h&&(h=0),h+".".length>(u=e).length||-1===u.indexOf(".",h)?"argument":"property");l='The "'.concat(e,'" ').concat(f," ").concat(o," ").concat(c(t,"type"))}return l+". Received type ".concat(n(i))}),TypeError),u("ERR_INVALID_ARG_VALUE",(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===s&&(s=r(9539));var i=s.inspect(t);return i.length>128&&(i="".concat(i.slice(0,128),"...")),"The argument '".concat(e,"' ").concat(n,". Received ").concat(i)}),TypeError,RangeError),u("ERR_INVALID_RETURN_VALUE",(function(e,t,r){var i;return i=r&&r.constructor&&r.constructor.name?"instance of ".concat(r.constructor.name):"type ".concat(n(r)),"Expected ".concat(e,' to be returned from the "').concat(t,'"')+" function but got ".concat(i,".")}),TypeError),u("ERR_MISSING_ARGS",(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];void 0===a&&(a=r(9282)),a(t.length>0,"At least one arg needs to be specified");var i="The ",o=t.length;switch(t=t.map((function(e){return'"'.concat(e,'"')})),o){case 1:i+="".concat(t[0]," argument");break;case 2:i+="".concat(t[0]," and ").concat(t[1]," arguments");break;default:i+=t.slice(0,o-1).join(", "),i+=", and ".concat(t[o-1]," arguments")}return"".concat(i," must be specified")}),TypeError),e.exports.codes=l},9158:(e,t,r)=>{"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var o=void 0!==/a/g.flags,a=function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t},s=function(e){var t=[];return e.forEach((function(e,r){return t.push([r,e])})),t},l=Object.is?Object.is:r(609),u=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},c=Number.isNaN?Number.isNaN:r(360);function h(e){return e.call.bind(e)}var f=h(Object.prototype.hasOwnProperty),d=h(Object.prototype.propertyIsEnumerable),p=h(Object.prototype.toString),b=r(9539).types,y=b.isAnyArrayBuffer,g=b.isArrayBufferView,_=b.isDate,m=b.isMap,w=b.isRegExp,v=b.isSet,E=b.isNativeError,S=b.isBoxedPrimitive,R=b.isNumberObject,A=b.isStringObject,T=b.isBooleanObject,x=b.isBigIntObject,k=b.isSymbolObject,N=b.isFloat32Array,O=b.isFloat64Array;function I(e){if(0===e.length||e.length>10)return!0;for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(r<48||r>57)return!0}return 10===e.length&&e>=Math.pow(2,32)}function j(e){return Object.keys(e).filter(I).concat(u(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function P(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function D(e,t,r,n){if(e===t)return 0!==e||!r||l(e,t);if(r){if("object"!==i(e))return"number"==typeof e&&c(e)&&c(t);if("object"!==i(t)||null===e||null===t)return!1;if(Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(null===e||"object"!==i(e))return(null===t||"object"!==i(t))&&e==t;if(null===t||"object"!==i(t))return!1}var a,s,u,h,f=p(e);if(f!==p(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var d=j(e),b=j(t);return d.length===b.length&&C(e,t,r,n,1,d)}if("[object Object]"===f&&(!m(e)&&m(t)||!v(e)&&v(t)))return!1;if(_(e)){if(!_(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(w(e)){if(!w(t)||(u=e,h=t,!(o?u.source===h.source&&u.flags===h.flags:RegExp.prototype.toString.call(u)===RegExp.prototype.toString.call(h))))return!1}else if(E(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else{if(g(e)){if(r||!N(e)&&!O(e)){if(!function(e,t){return e.byteLength===t.byteLength&&0===P(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))}(e,t))return!1}else if(!function(e,t){if(e.byteLength!==t.byteLength)return!1;for(var r=0;r<e.byteLength;r++)if(e[r]!==t[r])return!1;return!0}(e,t))return!1;var I=j(e),D=j(t);return I.length===D.length&&C(e,t,r,n,0,I)}if(v(e))return!(!v(t)||e.size!==t.size)&&C(e,t,r,n,2);if(m(e))return!(!m(t)||e.size!==t.size)&&C(e,t,r,n,3);if(y(e)){if(s=t,(a=e).byteLength!==s.byteLength||0!==P(new Uint8Array(a),new Uint8Array(s)))return!1}else if(S(e)&&!function(e,t){return R(e)?R(t)&&l(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):A(e)?A(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):T(e)?T(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):x(e)?x(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):k(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}(e,t))return!1}return C(e,t,r,n,0)}function F(e,t){return t.filter((function(t){return d(e,t)}))}function C(e,t,r,n,i,o){if(5===arguments.length){o=Object.keys(e);var a=Object.keys(t);if(o.length!==a.length)return!1}for(var s=0;s<o.length;s++)if(!f(t,o[s]))return!1;if(r&&5===arguments.length){var l=u(e);if(0!==l.length){var c=0;for(s=0;s<l.length;s++){var h=l[s];if(d(e,h)){if(!d(t,h))return!1;o.push(h),c++}else if(d(t,h))return!1}var p=u(t);if(l.length!==p.length&&F(t,p).length!==c)return!1}else{var b=u(t);if(0!==b.length&&0!==F(t,b).length)return!1}}if(0===o.length&&(0===i||1===i&&0===e.length||0===e.size))return!0;if(void 0===n)n={val1:new Map,val2:new Map,position:0};else{var y=n.val1.get(e);if(void 0!==y){var g=n.val2.get(t);if(void 0!==g)return y===g}n.position++}n.val1.set(e,n.position),n.val2.set(t,n.position);var _=q(e,t,r,o,n,i);return n.val1.delete(e),n.val2.delete(t),_}function L(e,t,r,n){for(var i=a(e),o=0;o<i.length;o++){var s=i[o];if(D(t,s,r,n))return e.delete(s),!0}return!1}function M(e){switch(i(e)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":e=+e;case"number":if(c(e))return!1}return!0}function B(e,t,r){var n=M(r);return null!=n?n:t.has(n)&&!e.has(n)}function $(e,t,r,n,i){var o=M(r);if(null!=o)return o;var a=t.get(o);return!(void 0===a&&!t.has(o)||!D(n,a,!1,i))&&!e.has(o)&&D(n,a,!1,i)}function U(e,t,r,n,i,o){for(var s=a(e),l=0;l<s.length;l++){var u=s[l];if(D(r,u,i,o)&&D(n,t.get(u),i,o))return e.delete(u),!0}return!1}function q(e,t,r,o,l,u){var c=0;if(2===u){if(!function(e,t,r,n){for(var o=null,s=a(e),l=0;l<s.length;l++){var u=s[l];if("object"===i(u)&&null!==u)null===o&&(o=new Set),o.add(u);else if(!t.has(u)){if(r)return!1;if(!B(e,t,u))return!1;null===o&&(o=new Set),o.add(u)}}if(null!==o){for(var c=a(t),h=0;h<c.length;h++){var f=c[h];if("object"===i(f)&&null!==f){if(!L(o,f,r,n))return!1}else if(!r&&!e.has(f)&&!L(o,f,r,n))return!1}return 0===o.size}return!0}(e,t,r,l))return!1}else if(3===u){if(!function(e,t,r,o){for(var a=null,l=s(e),u=0;u<l.length;u++){var c=n(l[u],2),h=c[0],f=c[1];if("object"===i(h)&&null!==h)null===a&&(a=new Set),a.add(h);else{var d=t.get(h);if(void 0===d&&!t.has(h)||!D(f,d,r,o)){if(r)return!1;if(!$(e,t,h,f,o))return!1;null===a&&(a=new Set),a.add(h)}}}if(null!==a){for(var p=s(t),b=0;b<p.length;b++){var y=n(p[b],2),g=(h=y[0],y[1]);if("object"===i(h)&&null!==h){if(!U(a,e,h,g,r,o))return!1}else if(!(r||e.has(h)&&D(e.get(h),g,!1,o)||U(a,e,h,g,!1,o)))return!1}return 0===a.size}return!0}(e,t,r,l))return!1}else if(1===u)for(;c<e.length;c++){if(!f(e,c)){if(f(t,c))return!1;for(var h=Object.keys(e);c<h.length;c++){var d=h[c];if(!f(t,d)||!D(e[d],t[d],r,l))return!1}return h.length===Object.keys(t).length}if(!f(t,c)||!D(e[c],t[c],r,l))return!1}for(c=0;c<o.length;c++){var p=o[c];if(!D(e[p],t[p],r,l))return!1}return!0}e.exports={isDeepEqual:function(e,t){return D(e,t,!1)},isDeepStrictEqual:function(e,t){return D(e,t,!0)}}},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=l(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,o=l(e),a=o[0],s=o[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),c=0,h=s>0?a-4:a;for(r=0;r<h;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;return 2===s&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,u[c++]=255&t),1===s&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t),u},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],a=16383,s=0,l=n-i;s<l;s+=a)o.push(u(e,s,s+a>l?l:s+a));return 1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,s=o.length;a<s;++a)r[a]=o[a],n[o.charCodeAt(a)]=a;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,n){for(var i,o,a=[],s=t;s<n;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},8764:(e,t,r)=>{"use strict";var n=r(5108);const i=r(9742),o=r(645),a="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=u,t.SlowBuffer=function(e){return+e!=e&&(e=0),u.alloc(+e)},t.INSPECT_MAX_BYTES=50;const s=2147483647;function l(e){if(e>s)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return f(e)}return c(e,t,r)}function c(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|y(e,t);let n=l(r);const i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return p(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer))return p(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return p(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,r);const i=function(e){if(u.isBuffer(e)){const t=0|b(e.length),r=l(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||K(e.length)?l(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function h(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function f(e){return h(e),l(e<0?0:0|b(e))}function d(e){const t=e.length<0?0:0|b(e.length),r=l(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function p(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,u.prototype),n}function b(e){if(e>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|e}function y(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return Q(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(e).length;default:if(i)return n?-1:Q(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,t,r);case"utf8":case"utf-8":return x(this,t,r);case"ascii":return N(this,t,r);case"latin1":case"binary":return O(this,t,r);case"base64":return T(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return j(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function _(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function m(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),K(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:w(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):w(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(e,t,r,n,i){let o,a=1,s=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,r/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){let n=-1;for(o=r;o<s;o++)if(u(e,o)===u(t,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===l)return n*a}else-1!==n&&(o-=o-n),n=-1}else for(r+l>s&&(r=s-l),o=r;o>=0;o--){let r=!0;for(let n=0;n<l;n++)if(u(e,o+n)!==u(t,n)){r=!1;break}if(r)return o}return-1}function v(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=t.length;let a;for(n>o/2&&(n=o/2),a=0;a<n;++a){const n=parseInt(t.substr(2*a,2),16);if(K(n))return a;e[r+a]=n}return a}function E(e,t,r,n){return Y(Q(t,e.length-r),e,r,n)}function S(e,t,r,n){return Y(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function R(e,t,r,n){return Y(z(t),e,r,n)}function A(e,t,r,n){return Y(function(e,t){let r,n,i;const o=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function T(e,t,r){return 0===t&&r===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,r))}function x(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let o=null,a=t>239?4:t>223?3:t>191?2:1;if(i+a<=r){let r,n,s,l;switch(a){case 1:t<128&&(o=t);break;case 2:r=e[i+1],128==(192&r)&&(l=(31&t)<<6|63&r,l>127&&(o=l));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(l=(15&t)<<12|(63&r)<<6|63&n,l>2047&&(l<55296||l>57343)&&(o=l));break;case 4:r=e[i+1],n=e[i+2],s=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&s)&&(l=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&s,l>65535&&l<1114112&&(o=l))}}null===o?(o=65533,a=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=a}return function(e){const t=e.length;if(t<=k)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=k));return r}(n)}t.kMaxLength=s,u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||void 0===n||"function"!=typeof n.error||n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,r){return c(e,t,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,r){return function(e,t,r){return h(e),e<=0?l(e):void 0!==t?"string"==typeof r?l(e).fill(t,r):l(e).fill(t):l(e)}(e,t,r)},u.allocUnsafe=function(e){return f(e)},u.allocUnsafeSlow=function(e){return f(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(X(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=u.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(X(t,Uint8Array))i+t.length>n.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!u.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)_(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)_(this,t,t+3),_(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)_(this,t,t+7),_(this,t+1,t+6),_(this,t+2,t+5),_(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?x(this,0,e):g.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},a&&(u.prototype[a]=u.prototype.inspect),u.prototype.compare=function(e,t,r,n,i){if(X(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0);const s=Math.min(o,a),l=this.slice(n,i),c=e.slice(t,r);for(let e=0;e<s;++e)if(l[e]!==c[e]){o=l[e],a=c[e];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return v(this,e,t,r);case"utf8":case"utf-8":return E(this,e,t,r);case"ascii":case"latin1":case"binary":return S(this,e,t,r);case"base64":return R(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const k=4096;function N(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function O(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function I(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=J[e[n]];return i}function j(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function P(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,r,n,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function F(e,t,r,n,i){G(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a,r}function C(e,t,r,n,i){G(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r+7]=o,o>>=8,e[r+6]=o,o>>=8,e[r+5]=o,o>>=8,e[r+4]=o;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=a,a>>=8,e[r+2]=a,a>>=8,e[r+1]=a,a>>=8,e[r]=a,r+8}function L(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(e,t,r,n,i){return t=+t,r>>>=0,i||L(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function B(e,t,r,n,i){return t=+t,r>>>=0,i||L(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=Z((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),u.prototype.readBigUInt64BE=Z((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),u.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=t,i=1,o=this[e+--n];for(;n>0&&(i*=256);)o+=this[e+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||P(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){e>>>=0,t||P(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=Z((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=Z((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||P(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||P(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||P(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||P(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||D(this,e,t,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||D(this,e,t,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=Z((function(e,t=0){return F(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=Z((function(e,t=0){return C(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,e,t,r,n-1,-n)}let i=0,o=1,a=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/o>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,e,t,r,n-1,-n)}let i=r-1,o=1,a=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/o>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=Z((function(e,t=0){return F(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=Z((function(e,t=0){return C(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(e,t,r){return M(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return M(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return B(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return B(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const o=u.isBuffer(e)?e:u.from(e,n),a=o.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%a]}return this};const $={};function U(e,t,r){$[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function q(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function G(e,t,r,n,i,o){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new $.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){W(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||H(t,e.length-(r+1))}(n,i,o)}function W(e,t){if("number"!=typeof e)throw new $.ERR_INVALID_ARG_TYPE(t,"number",e)}function H(e,t,r){if(Math.floor(e)!==e)throw W(e,r),new $.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new $.ERR_BUFFER_OUT_OF_BOUNDS;throw new $.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}U("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),U("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),U("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=q(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=q(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const V=/[^+/0-9A-Za-z-_]/g;function Q(e,t){let r;t=t||1/0;const n=e.length;let i=null;const o=[];for(let a=0;a<n;++a){if(r=e.charCodeAt(a),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function z(e){return i.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(V,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Y(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function K(e){return e!=e}const J=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function Z(e){return"undefined"==typeof BigInt?ee:e}function ee(){throw new Error("BigInt not supported")}},1924:(e,t,r)=>{"use strict";var n=r(210),i=r(5559),o=i(n("String.prototype.indexOf"));e.exports=function(e,t){var r=n(e,!!t);return"function"==typeof r&&o(e,".prototype.")>-1?i(r):r}},5559:(e,t,r)=>{"use strict";var n=r(8612),i=r(210),o=i("%Function.prototype.apply%"),a=i("%Function.prototype.call%"),s=i("%Reflect.apply%",!0)||n.call(a,o),l=i("%Object.getOwnPropertyDescriptor%",!0),u=i("%Object.defineProperty%",!0),c=i("%Math.max%");if(u)try{u({},"a",{value:1})}catch(e){u=null}e.exports=function(e){var t=s(n,a,arguments);if(l&&u){var r=l(t,"length");r.configurable&&u(t,"length",{value:1+c(0,e.length-(arguments.length-1))})}return t};var h=function(){return s(n,o,arguments)};u?u(e.exports,"apply",{value:h}):e.exports.apply=h},5108:(e,t,r)=>{var n=r(9539),i=r(9282);function o(){return(new Date).getTime()}var a,s=Array.prototype.slice,l={};a=void 0!==r.g&&r.g.console?r.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var u=[[function(){},"log"],[function(){a.log.apply(a,arguments)},"info"],[function(){a.log.apply(a,arguments)},"warn"],[function(){a.warn.apply(a,arguments)},"error"],[function(e){l[e]=o()},"time"],[function(e){var t=l[e];if(!t)throw new Error("No such label: "+e);delete l[e];var r=o()-t;a.log(e+": "+r+"ms")},"timeEnd"],[function(){var e=new Error;e.name="Trace",e.message=n.format.apply(null,arguments),a.error(e.stack)},"trace"],[function(e){a.log(n.inspect(e)+"\n")},"dir"],[function(e){if(!e){var t=s.call(arguments,1);i.ok(!1,n.format.apply(null,t))}},"assert"]],c=0;c<u.length;c++){var h=u[c],f=h[0],d=h[1];a[d]||(a[d]=f)}e.exports=a},1905:function(){!function(e){!function(t){var r="URLSearchParams"in e,n="Symbol"in e&&"iterator"in Symbol,i="FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in e,a="ArrayBuffer"in e;if(a)var s=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(e){return e&&s.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function c(e){return"string"!=typeof e&&(e=String(e)),e}function h(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function d(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function p(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function b(e){var t=new FileReader,r=p(t);return t.readAsArrayBuffer(e),r}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function g(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:i&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:r&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():a&&i&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(e)||l(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var e=d(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(b)}),this.text=function(){var e,t,r,n=d(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,r=p(t=new FileReader),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(w)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=u(e),t=c(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},f.prototype.delete=function(e){delete this.map[u(e)]},f.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},f.prototype.set=function(e,t){this.map[u(e)]=c(t)},f.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),h(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),h(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),h(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var _=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function m(e,t){var r,n,i=(t=t||{}).body;if(e instanceof m){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,i||null==e._bodyInit||(i=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=(r=t.method||this.method||"GET").toUpperCase(),_.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function w(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\+/g," "),i=r.join("=").replace(/\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(i))}})),t}function v(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}m.prototype.clone=function(){return new m(this,{body:this._bodyInit})},g.call(m.prototype),g.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},v.error=function(){var e=new v(null,{status:0,statusText:""});return e.type="error",e};var E=[301,302,303,307,308];v.redirect=function(e,t){if(-1===E.indexOf(t))throw new RangeError("Invalid status code");return new v(null,{status:t,headers:{location:e}})},t.DOMException=e.DOMException;try{new t.DOMException}catch(e){t.DOMException=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}function S(e,r){return new Promise((function(n,o){var a=new m(e,r);if(a.signal&&a.signal.aborted)return o(new t.DOMException("Aborted","AbortError"));var s=new XMLHttpRequest;function l(){s.abort()}s.onload=function(){var e,t,r={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new f,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var i=r.join(":").trim();t.append(n,i)}})),t)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var i="response"in s?s.response:s.responseText;n(new v(i,r))},s.onerror=function(){o(new TypeError("Network request failed"))},s.ontimeout=function(){o(new TypeError("Network request failed"))},s.onabort=function(){o(new t.DOMException("Aborted","AbortError"))},s.open(a.method,a.url,!0),"include"===a.credentials?s.withCredentials=!0:"omit"===a.credentials&&(s.withCredentials=!1),"responseType"in s&&i&&(s.responseType="blob"),a.headers.forEach((function(e,t){s.setRequestHeader(t,e)})),a.signal&&(a.signal.addEventListener("abort",l),s.onreadystatechange=function(){4===s.readyState&&a.signal.removeEventListener("abort",l)}),s.send(void 0===a._bodyInit?null:a._bodyInit)}))}S.polyfill=!0,e.fetch||(e.fetch=S,e.Headers=f,e.Request=m,e.Response=v),t.Headers=f,t.Request=m,t.Response=v,t.fetch=S,Object.defineProperty(t,"__esModule",{value:!0})}({})}("undefined"!=typeof self?self:this)},4289:(e,t,r)=>{"use strict";var n=r(2215),i="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,a=Array.prototype.concat,s=Object.defineProperty,l=r(1044)(),u=s&&l,c=function(e,t,r,n){var i;(!(t in e)||"function"==typeof(i=n)&&"[object Function]"===o.call(i)&&n())&&(u?s(e,t,{configurable:!0,enumerable:!1,value:r,writable:!0}):e[t]=r)},h=function(e,t){var r=arguments.length>2?arguments[2]:{},o=n(t);i&&(o=a.call(o,Object.getOwnPropertySymbols(t)));for(var s=0;s<o.length;s+=1)c(e,o[s],t[o[s]],r[o[s]])};h.supportsDescriptors=!!u,e.exports=h},8091:e=>{"use strict";function t(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var r=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var o=Object.keys(Object(i)),a=0,s=o.length;a<s;a++){var l=o[a],u=Object.getOwnPropertyDescriptor(i,l);void 0!==u&&u.enumerable&&(r[l]=i[l])}}return r}e.exports={assign:t,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:t})}}},7187:(e,t,r)=>{"use strict";var n,i=r(5108),o="object"==typeof Reflect?Reflect:null,a=o&&"function"==typeof o.apply?o.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function l(){l.init.call(this)}e.exports=l,e.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}_(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&_(e,"error",t,{once:!0})}(e,i)}))},l.EventEmitter=l,l.prototype._events=void 0,l.prototype._eventsCount=0,l.prototype._maxListeners=void 0;var u=10;function c(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function h(e){return void 0===e._maxListeners?l.defaultMaxListeners:e._maxListeners}function f(e,t,r,n){var o,a,s,l;if(c(r),void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),a=e._events),s=a[t]),void 0===s)s=a[t]=r,++e._eventsCount;else if("function"==typeof s?s=a[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(o=h(e))>0&&s.length>o&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,l=u,i&&i.warn&&i.warn(l)}return e}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=d.bind(n);return i.listener=r,n.wrapFn=i,i}function b(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):g(i,i.length)}function y(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function _(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(l,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),l.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},l.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},l.prototype.getMaxListeners=function(){return h(this)},l.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)a(l,this,t);else{var u=l.length,c=g(l,u);for(r=0;r<u;++r)a(c[r],this,t)}return!0},l.prototype.addListener=function(e,t){return f(this,e,t,!1)},l.prototype.on=l.prototype.addListener,l.prototype.prependListener=function(e,t){return f(this,e,t,!0)},l.prototype.once=function(e,t){return c(t),this.on(e,p(this,e,t)),this},l.prototype.prependOnceListener=function(e,t){return c(t),this.prependListener(e,p(this,e,t)),this},l.prototype.removeListener=function(e,t){var r,n,i,o,a;if(c(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},l.prototype.off=l.prototype.removeListener,l.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},l.prototype.listeners=function(e){return b(this,e,!0)},l.prototype.rawListeners=function(e){return b(this,e,!1)},l.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):y.call(e,t)},l.prototype.listenerCount=y,l.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},8954:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r(6327),t)},6327:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SparqlEndpointFetcher=void 0,r(1905);const n=r(8599),i=r(9619),o=r(9249),a=r(5271),s=r(3858),l=r(8090),u=r(1657),c=r(4970);class h{constructor(e){e=e||{},this.method=e.method||"POST",this.additionalUrlParams=e.additionalUrlParams||new URLSearchParams,this.fetchCb=e.fetch,this.sparqlJsonParser=new o.SparqlJsonParser(e),this.sparqlXmlParser=new a.SparqlXmlParser(e),this.sparqlParsers={[h.CONTENTTYPE_SPARQL_JSON]:{parseBooleanStream:e=>this.sparqlJsonParser.parseJsonBooleanStream(e),parseResultsStream:e=>this.sparqlJsonParser.parseJsonResultsStream(e)},[h.CONTENTTYPE_SPARQL_XML]:{parseBooleanStream:e=>this.sparqlXmlParser.parseXmlBooleanStream(e),parseResultsStream:e=>this.sparqlXmlParser.parseXmlResultsStream(e)}}}getQueryType(e){const t=(new i.Parser).parse(e);return"query"===t.type?"DESCRIBE"===t.queryType?"CONSTRUCT":t.queryType:"UNKNOWN"}getUpdateTypes(e){const t=(new i.Parser).parse(e);if("update"===t.type){const e={};for(const r of t.updates)"type"in r?e[r.type]=!0:e[r.updateType]=!0;return e}return"UNKNOWN"}async fetchBindings(e,t){const[r,n]=await this.fetchRawStream(e,t,h.CONTENTTYPE_SPARQL),i=this.sparqlParsers[r];if(!i)throw new Error("Unknown SPARQL results content type: "+r);return i.parseResultsStream(n)}async fetchAsk(e,t){const[r,n]=await this.fetchRawStream(e,t,h.CONTENTTYPE_SPARQL),i=this.sparqlParsers[r];if(!i)throw new Error("Unknown SPARQL results content type: "+r);return i.parseBooleanStream(n)}async fetchTriples(e,t){return(await this.fetchRawStream(e,t,h.CONTENTTYPE_TURTLE))[1].pipe(new u.StreamParser({format:h.CONTENTTYPE_TURTLE}))}async fetchUpdate(e,t){const r=new n.default,i={method:"POST",headers:{"content-type":"application/sparql-update"},body:t,signal:r.signal};await this.handleFetchCall(e,i,{ignoreBody:!0}),r.abort()}async fetchRawStream(e,t,r){let n="POST"===this.method?e:e+"?query="+encodeURIComponent(t);const i=new Headers;let o;return i.append("Accept",r),"POST"===this.method?(i.append("Content-Type","application/x-www-form-urlencoded"),o=new URLSearchParams,o.set("query",t),this.additionalUrlParams.forEach(((e,t)=>{o.set(t,e)})),i.append("Content-Length",o.toString().length.toString())):""!==this.additionalUrlParams.toString()&&(n+=`&${this.additionalUrlParams.toString()}`),this.handleFetchCall(n,{headers:i,method:this.method,body:o})}async handleFetchCall(e,t,r={}){const n=await(this.fetchCb||fetch)(e,t);let i;r.ignoreBody||(i=c(n.body)?n.body:new l.ReadableWebToNodeStream(n.body));let o=n.headers.get("Content-Type")||"";if(o.indexOf(";")>0&&(o=o.substr(0,o.indexOf(";"))),!n.ok){const t=/^[^?]*/u.exec(e)[0];let r="empty response";throw i&&(r=await s(i)),new Error(`Invalid SPARQL endpoint response from ${t} (HTTP status ${n.status}):\n${r}`)}return[o,i]}}t.SparqlEndpointFetcher=h,h.CONTENTTYPE_SPARQL_JSON="application/sparql-results+json",h.CONTENTTYPE_SPARQL_XML="application/sparql-results+xml",h.CONTENTTYPE_SPARQL=`${h.CONTENTTYPE_SPARQL_JSON};q=1.0,${h.CONTENTTYPE_SPARQL_XML};q=0.7`,h.CONTENTTYPE_TURTLE="text/turtle"},4029:(e,t,r)=>{"use strict";var n=r(5320),i=Object.prototype.toString,o=Object.prototype.hasOwnProperty,a=function(e,t,r){for(var n=0,i=e.length;n<i;n++)o.call(e,n)&&(null==r?t(e[n],n,e):t.call(r,e[n],n,e))},s=function(e,t,r){for(var n=0,i=e.length;n<i;n++)null==r?t(e.charAt(n),n,e):t.call(r,e.charAt(n),n,e)},l=function(e,t,r){for(var n in e)o.call(e,n)&&(null==r?t(e[n],n,e):t.call(r,e[n],n,e))};e.exports=function(e,t,r){if(!n(t))throw new TypeError("iterator must be a function");var o;arguments.length>=3&&(o=r),"[object Array]"===i.call(e)?a(e,t,o):"string"==typeof e?s(e,t,o):l(e,t,o)}},7648:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",r=Array.prototype.slice,n=Object.prototype.toString,i="[object Function]";e.exports=function(e){var o=this;if("function"!=typeof o||n.call(o)!==i)throw new TypeError(t+o);for(var a,s=r.call(arguments,1),l=function(){if(this instanceof a){var t=o.apply(this,s.concat(r.call(arguments)));return Object(t)===t?t:this}return o.apply(e,s.concat(r.call(arguments)))},u=Math.max(0,o.length-s.length),c=[],h=0;h<u;h++)c.push("$"+h);if(a=Function("binder","return function ("+c.join(",")+"){ return binder.apply(this,arguments); }")(l),o.prototype){var f=function(){};f.prototype=o.prototype,a.prototype=new f,f.prototype=null}return a}},8612:(e,t,r)=>{"use strict";var n=r(7648);e.exports=Function.prototype.bind||n},210:(e,t,r)=>{"use strict";var n,i=SyntaxError,o=Function,a=TypeError,s=function(e){try{return o('"use strict"; return ('+e+").constructor;")()}catch(e){}},l=Object.getOwnPropertyDescriptor;if(l)try{l({},"")}catch(e){l=null}var u=function(){throw new a},c=l?function(){try{return u}catch(e){try{return l(arguments,"callee").get}catch(e){return u}}}():u,h=r(1405)(),f=Object.getPrototypeOf||function(e){return e.__proto__},d={},p="undefined"==typeof Uint8Array?n:f(Uint8Array),b={"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":h?f([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":h?f(f([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&h?f((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&h?f((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":h?f(""[Symbol.iterator]()):n,"%Symbol%":h?Symbol:n,"%SyntaxError%":i,"%ThrowTypeError%":c,"%TypedArray%":p,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet},y=function e(t){var r;if("%AsyncFunction%"===t)r=s("async function () {}");else if("%GeneratorFunction%"===t)r=s("function* () {}");else if("%AsyncGeneratorFunction%"===t)r=s("async function* () {}");else if("%AsyncGenerator%"===t){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===t){var i=e("%AsyncGenerator%");i&&(r=f(i.prototype))}return b[t]=r,r},g={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},_=r(8612),m=r(7642),w=_.call(Function.call,Array.prototype.concat),v=_.call(Function.apply,Array.prototype.splice),E=_.call(Function.call,String.prototype.replace),S=_.call(Function.call,String.prototype.slice),R=_.call(Function.call,RegExp.prototype.exec),A=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,T=/\\(\\)?/g,x=function(e){var t=S(e,0,1),r=S(e,-1);if("%"===t&&"%"!==r)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==t)throw new i("invalid intrinsic syntax, expected opening `%`");var n=[];return E(e,A,(function(e,t,r,i){n[n.length]=r?E(i,T,"$1"):t||e})),n},k=function(e,t){var r,n=e;if(m(g,n)&&(n="%"+(r=g[n])[0]+"%"),m(b,n)){var o=b[n];if(o===d&&(o=y(n)),void 0===o&&!t)throw new a("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:o}}throw new i("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new a('"allowMissing" argument must be a boolean');if(null===R(/^%?[^%]*%?$/g,e))throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=x(e),n=r.length>0?r[0]:"",o=k("%"+n+"%",t),s=o.name,u=o.value,c=!1,h=o.alias;h&&(n=h[0],v(r,w([0,1],h)));for(var f=1,d=!0;f<r.length;f+=1){var p=r[f],y=S(p,0,1),g=S(p,-1);if(('"'===y||"'"===y||"`"===y||'"'===g||"'"===g||"`"===g)&&y!==g)throw new i("property names with quotes must have matching quotes");if("constructor"!==p&&d||(c=!0),m(b,s="%"+(n+="."+p)+"%"))u=b[s];else if(null!=u){if(!(p in u)){if(!t)throw new a("base intrinsic for "+e+" exists, but the property is not available.");return}if(l&&f+1>=r.length){var _=l(u,p);u=(d=!!_)&&"get"in _&&!("originalValue"in _.get)?_.get:u[p]}else d=m(u,p),u=u[p];d&&!c&&(b[s]=u)}}return u}},1044:(e,t,r)=>{"use strict";var n=r(210)("%Object.defineProperty%",!0),i=function(){if(n)try{return n({},"a",{value:1}),!0}catch(e){return!1}return!1};i.hasArrayLengthDefineBug=function(){if(!i())return null;try{return 1!==n([],"length",{value:1}).length}catch(e){return!0}},e.exports=i},1405:(e,t,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,i=r(5419);e.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&i()}},5419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),r=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var n=Object.getOwnPropertySymbols(e);if(1!==n.length||n[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,t);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},6410:(e,t,r)=>{"use strict";var n=r(5419);e.exports=function(){return n()&&!!Symbol.toStringTag}},7642:(e,t,r)=>{"use strict";var n=r(8612);e.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},645:(e,t)=>{t.read=function(e,t,r,n,i){var o,a,s=8*i-n-1,l=(1<<s)-1,u=l>>1,c=-7,h=r?i-1:0,f=r?-1:1,d=e[t+h];for(h+=f,o=d&(1<<-c)-1,d>>=-c,c+=s;c>0;o=256*o+e[t+h],h+=f,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=n;c>0;a=256*a+e[t+h],h+=f,c-=8);if(0===o)o=1-u;else{if(o===l)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),o-=u}return(d?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,s,l,u=8*o-i-1,c=(1<<u)-1,h=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+h>=1?f/l:f*Math.pow(2,1-h))*l>=2&&(a++,l/=2),a+h>=c?(s=0,a=c):a+h>=1?(s=(t*l-1)*Math.pow(2,i),a+=h):(s=t*Math.pow(2,h-1)*Math.pow(2,i),a=0));i>=8;e[r+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,u+=i;u>0;e[r+d]=255&a,d+=p,a/=256,u-=8);e[r+d-p]|=128*b}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},2584:(e,t,r)=>{"use strict";var n=r(6410)(),i=r(1924)("Object.prototype.toString"),o=function(e){return!(n&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===i(e)},a=function(e){return!!o(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==i(e)&&"[object Function]"===i(e.callee)},s=function(){return o(arguments)}();o.isLegacyArguments=a,e.exports=s?o:a},5320:e=>{"use strict";var t,r,n=Function.prototype.toString,i="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof i&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw r}}),r={},i((function(){throw 42}),null,t)}catch(e){e!==r&&(i=null)}else i=null;var o=/^\s*class\b/,a=function(e){try{var t=n.call(e);return o.test(t)}catch(e){return!1}},s=Object.prototype.toString,l="function"==typeof Symbol&&!!Symbol.toStringTag,u="object"==typeof document&&void 0===document.all&&void 0!==document.all?document.all:{};e.exports=i?function(e){if(e===u)return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if("function"==typeof e&&!e.prototype)return!0;try{i(e,null,t)}catch(e){if(e!==r)return!1}return!a(e)}:function(e){if(e===u)return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if("function"==typeof e&&!e.prototype)return!0;if(l)return function(e){try{return!a(e)&&(n.call(e),!0)}catch(e){return!1}}(e);if(a(e))return!1;var t=s.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}},8662:(e,t,r)=>{"use strict";var n,i=Object.prototype.toString,o=Function.prototype.toString,a=/^\s*(?:function)?\*/,s=r(6410)(),l=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(a.test(o.call(e)))return!0;if(!s)return"[object GeneratorFunction]"===i.call(e);if(!l)return!1;if(void 0===n){var t=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(e){}}();n=!!t&&l(t)}return l(e)===n}},8611:e=>{"use strict";e.exports=function(e){return e!=e}},360:(e,t,r)=>{"use strict";var n=r(5559),i=r(4289),o=r(8611),a=r(9415),s=r(3194),l=n(a(),Number);i(l,{getPolyfill:a,implementation:o,shim:s}),e.exports=l},9415:(e,t,r)=>{"use strict";var n=r(8611);e.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:n}},3194:(e,t,r)=>{"use strict";var n=r(4289),i=r(9415);e.exports=function(){var e=i();return n(Number,{isNaN:e},{isNaN:function(){return Number.isNaN!==e}}),e}},4970:e=>{"use strict";const t=e=>null!==e&&"object"==typeof e&&"function"==typeof e.pipe;t.writable=e=>t(e)&&!1!==e.writable&&"function"==typeof e._write&&"object"==typeof e._writableState,t.readable=e=>t(e)&&!1!==e.readable&&"function"==typeof e._read&&"object"==typeof e._readableState,t.duplex=e=>t.writable(e)&&t.readable(e),t.transform=e=>t.duplex(e)&&"function"==typeof e._transform,e.exports=t},5692:(e,t,r)=>{"use strict";var n=r(4029),i=r(3083),o=r(1924),a=o("Object.prototype.toString"),s=r(6410)(),l="undefined"==typeof globalThis?r.g:globalThis,u=i(),c=o("Array.prototype.indexOf",!0)||function(e,t){for(var r=0;r<e.length;r+=1)if(e[r]===t)return r;return-1},h=o("String.prototype.slice"),f={},d=r(882),p=Object.getPrototypeOf;s&&d&&p&&n(u,(function(e){var t=new l[e];if(Symbol.toStringTag in t){var r=p(t),n=d(r,Symbol.toStringTag);if(!n){var i=p(r);n=d(i,Symbol.toStringTag)}f[e]=n.get}})),e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!s||!(Symbol.toStringTag in e)){var t=h(a(e),8,-1);return c(u,t)>-1}return!!d&&function(e){var t=!1;return n(f,(function(r,n){if(!t)try{t=r.call(e)===n}catch(e){}})),t}(e)}},2222:(e,t,r)=>{var n=r(8764).Buffer,i={},o=i.LEFT_BRACE=1,a=i.RIGHT_BRACE=2,s=i.LEFT_BRACKET=3,l=i.RIGHT_BRACKET=4,u=i.COLON=5,c=i.COMMA=6,h=i.TRUE=7,f=i.FALSE=8,d=i.NULL=9,p=i.STRING=10,b=i.NUMBER=11,y=i.START=17,g=i.STOP=18,_=i.TRUE1=33,m=i.TRUE2=34,w=i.TRUE3=35,v=i.FALSE1=49,E=i.FALSE2=50,S=i.FALSE3=51,R=i.FALSE4=52,A=i.NULL1=65,T=i.NULL2=66,x=i.NULL3=67,k=i.NUMBER1=81,N=i.NUMBER3=83,O=i.STRING1=97,I=i.STRING2=98,j=i.STRING3=99,P=i.STRING4=100,D=i.STRING5=101,F=i.STRING6=102,C=i.VALUE=113,L=i.KEY=114,M=i.OBJECT=129,B=i.ARRAY=130,$="\\".charCodeAt(0),U="/".charCodeAt(0),q="\b".charCodeAt(0),G="\f".charCodeAt(0),W="\n".charCodeAt(0),H="\r".charCodeAt(0),V="\t".charCodeAt(0),Q=65536;function z(){this.tState=y,this.value=void 0,this.string=void 0,this.stringBuffer=n.alloc?n.alloc(Q):new n(Q),this.stringBufferOffset=0,this.unicode=void 0,this.highSurrogate=void 0,this.key=void 0,this.mode=void 0,this.stack=[],this.state=C,this.bytes_remaining=0,this.bytes_in_sequence=0,this.temp_buffs={2:new n(2),3:new n(3),4:new n(4)},this.offset=-1}z.toknam=function(e){for(var t=Object.keys(i),r=0,n=t.length;r<n;r++){var o=t[r];if(i[o]===e)return o}return e&&"0x"+e.toString(16)};var Y=z.prototype;Y.onError=function(e){throw e},Y.charError=function(e,t){this.tState=g,this.onError(new Error("Unexpected "+JSON.stringify(String.fromCharCode(e[t]))+" at position "+t+" in state "+z.toknam(this.tState)))},Y.appendStringChar=function(e){this.stringBufferOffset>=Q&&(this.string+=this.stringBuffer.toString("utf8"),this.stringBufferOffset=0),this.stringBuffer[this.stringBufferOffset++]=e},Y.appendStringBuf=function(e,t,r){var n=e.length;"number"==typeof t&&(n="number"==typeof r?r<0?e.length-t+r:r-t:e.length-t),n<0&&(n=0),this.stringBufferOffset+n>Q&&(this.string+=this.stringBuffer.toString("utf8",0,this.stringBufferOffset),this.stringBufferOffset=0),e.copy(this.stringBuffer,this.stringBufferOffset,t,r),this.stringBufferOffset+=n},Y.write=function(e){var t;"string"==typeof e&&(e=new n(e));for(var r=0,i=e.length;r<i;r++)if(this.tState===y){if(t=e[r],this.offset++,123===t)this.onToken(o,"{");else if(125===t)this.onToken(a,"}");else if(91===t)this.onToken(s,"[");else if(93===t)this.onToken(l,"]");else if(58===t)this.onToken(u,":");else if(44===t)this.onToken(c,",");else if(116===t)this.tState=_;else if(102===t)this.tState=v;else if(110===t)this.tState=A;else if(34===t)this.string="",this.stringBufferOffset=0,this.tState=O;else if(45===t)this.string="-",this.tState=k;else if(t>=48&&t<64)this.string=String.fromCharCode(t),this.tState=N;else if(32!==t&&9!==t&&10!==t&&13!==t)return this.charError(e,r)}else if(this.tState===O)if(t=e[r],this.bytes_remaining>0){for(var g=0;g<this.bytes_remaining;g++)this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence-this.bytes_remaining+g]=e[g];this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]),this.bytes_in_sequence=this.bytes_remaining=0,r=r+g-1}else if(0===this.bytes_remaining&&t>=128){if(t<=193||t>244)return this.onError(new Error("Invalid UTF-8 character at position "+r+" in state "+z.toknam(this.tState)));if(t>=194&&t<=223&&(this.bytes_in_sequence=2),t>=224&&t<=239&&(this.bytes_in_sequence=3),t>=240&&t<=244&&(this.bytes_in_sequence=4),this.bytes_in_sequence+r>e.length){for(var C=0;C<=e.length-1-r;C++)this.temp_buffs[this.bytes_in_sequence][C]=e[r+C];this.bytes_remaining=r+this.bytes_in_sequence-e.length,r=e.length-1}else this.appendStringBuf(e,r,r+this.bytes_in_sequence),r=r+this.bytes_in_sequence-1}else if(34===t)this.tState=y,this.string+=this.stringBuffer.toString("utf8",0,this.stringBufferOffset),this.stringBufferOffset=0,this.onToken(p,this.string),this.offset+=n.byteLength(this.string,"utf8")+1,this.string=void 0;else if(92===t)this.tState=I;else{if(!(t>=32))return this.charError(e,r);this.appendStringChar(t)}else if(this.tState===I)if(34===(t=e[r]))this.appendStringChar(t),this.tState=O;else if(92===t)this.appendStringChar($),this.tState=O;else if(47===t)this.appendStringChar(U),this.tState=O;else if(98===t)this.appendStringChar(q),this.tState=O;else if(102===t)this.appendStringChar(G),this.tState=O;else if(110===t)this.appendStringChar(W),this.tState=O;else if(114===t)this.appendStringChar(H),this.tState=O;else if(116===t)this.appendStringChar(V),this.tState=O;else{if(117!==t)return this.charError(e,r);this.unicode="",this.tState=j}else if(this.tState===j||this.tState===P||this.tState===D||this.tState===F){if(!((t=e[r])>=48&&t<64||t>64&&t<=70||t>96&&t<=102))return this.charError(e,r);if(this.unicode+=String.fromCharCode(t),this.tState++===F){var L=parseInt(this.unicode,16);this.unicode=void 0,void 0!==this.highSurrogate&&L>=56320&&L<57344?(this.appendStringBuf(new n(String.fromCharCode(this.highSurrogate,L))),this.highSurrogate=void 0):void 0===this.highSurrogate&&L>=55296&&L<56320?this.highSurrogate=L:(void 0!==this.highSurrogate&&(this.appendStringBuf(new n(String.fromCharCode(this.highSurrogate))),this.highSurrogate=void 0),this.appendStringBuf(new n(String.fromCharCode(L)))),this.tState=O}}else if(this.tState===k||this.tState===N)switch(t=e[r]){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 46:case 101:case 69:case 43:case 45:this.string+=String.fromCharCode(t),this.tState=N;break;default:this.tState=y;var M=Number(this.string);if(isNaN(M))return this.charError(e,r);this.string.match(/[0-9]+/)==this.string&&M.toString()!=this.string?this.onToken(p,this.string):this.onToken(b,M),this.offset+=this.string.length-1,this.string=void 0,r--}else if(this.tState===_){if(114!==e[r])return this.charError(e,r);this.tState=m}else if(this.tState===m){if(117!==e[r])return this.charError(e,r);this.tState=w}else if(this.tState===w){if(101!==e[r])return this.charError(e,r);this.tState=y,this.onToken(h,!0),this.offset+=3}else if(this.tState===v){if(97!==e[r])return this.charError(e,r);this.tState=E}else if(this.tState===E){if(108!==e[r])return this.charError(e,r);this.tState=S}else if(this.tState===S){if(115!==e[r])return this.charError(e,r);this.tState=R}else if(this.tState===R){if(101!==e[r])return this.charError(e,r);this.tState=y,this.onToken(f,!1),this.offset+=4}else if(this.tState===A){if(117!==e[r])return this.charError(e,r);this.tState=T}else if(this.tState===T){if(108!==e[r])return this.charError(e,r);this.tState=x}else if(this.tState===x){if(108!==e[r])return this.charError(e,r);this.tState=y,this.onToken(d,null),this.offset+=3}},Y.onToken=function(e,t){},Y.parseError=function(e,t){this.tState=g,this.onError(new Error("Unexpected "+z.toknam(e)+(t?"("+JSON.stringify(t)+")":"")+" in state "+z.toknam(this.state)))},Y.push=function(){this.stack.push({value:this.value,key:this.key,mode:this.mode})},Y.pop=function(){var e=this.value,t=this.stack.pop();this.value=t.value,this.key=t.key,this.mode=t.mode,this.emit(e),this.mode||(this.state=C)},Y.emit=function(e){this.mode&&(this.state=c),this.onValue(e)},Y.onValue=function(e){},Y.onToken=function(e,t){if(this.state===C)if(e===p||e===b||e===h||e===f||e===d)this.value&&(this.value[this.key]=t),this.emit(t);else if(e===o)this.push(),this.value?this.value=this.value[this.key]={}:this.value={},this.key=void 0,this.state=L,this.mode=M;else if(e===s)this.push(),this.value?this.value=this.value[this.key]=[]:this.value=[],this.key=0,this.mode=B,this.state=C;else if(e===a){if(this.mode!==M)return this.parseError(e,t);this.pop()}else{if(e!==l)return this.parseError(e,t);if(this.mode!==B)return this.parseError(e,t);this.pop()}else if(this.state===L)if(e===p)this.key=t,this.state=u;else{if(e!==a)return this.parseError(e,t);this.pop()}else if(this.state===u){if(e!==u)return this.parseError(e,t);this.state=C}else{if(this.state!==c)return this.parseError(e,t);if(e===c)this.mode===B?(this.key++,this.state=C):this.mode===M&&(this.state=L);else{if(!(e===l&&this.mode===B||e===a&&this.mode===M))return this.parseError(e,t);this.pop()}}},z.C=i,e.exports=z},1657:(e,t,r)=>{"use strict";r.r(t),r.d(t,{BlankNode:()=>L,DataFactory:()=>P,DefaultGraph:()=>B,Lexer:()=>g,Literal:()=>C,NamedNode:()=>F,Parser:()=>Q,Quad:()=>q,Store:()=>se,StreamParser:()=>ce,StreamWriter:()=>he,Term:()=>D,Triple:()=>q,Util:()=>n,Variable:()=>M,Writer:()=>ne,default:()=>fe,termFromId:()=>$,termToId:()=>U});var n={};r.r(n),r.d(n,{inDefaultGraph:()=>S,isBlankNode:()=>m,isDefaultGraph:()=>E,isLiteral:()=>w,isNamedNode:()=>_,isVariable:()=>v,prefix:()=>R,prefixes:()=>A});const i="http://www.w3.org/1999/02/22-rdf-syntax-ns#",o="http://www.w3.org/2001/XMLSchema#",a="http://www.w3.org/2000/10/swap/",s={xsd:{decimal:`${o}decimal`,boolean:`${o}boolean`,double:`${o}double`,integer:`${o}integer`,string:`${o}string`},rdf:{type:`${i}type`,nil:`${i}nil`,first:`${i}first`,rest:`${i}rest`,langString:`${i}langString`},owl:{sameAs:"http://www.w3.org/2002/07/owl#sameAs"},r:{forSome:`${a}reify#forSome`,forAll:`${a}reify#forAll`},log:{implies:`${a}log#implies`}};var l=r(4375),u=r.n(l),c=r(8764).Buffer;const{xsd:h}=s,f=/\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g,d={"\\":"\\","'":"'",'"':'"',n:"\n",r:"\r",t:"\t",f:"\f",b:"\b",_:"_","~":"~",".":".","-":"-","!":"!",$:"$","&":"&","(":"(",")":")","*":"*","+":"+",",":",",";":";","=":"=","/":"/","?":"?","#":"#","@":"@","%":"%"},p=/[\x00-\x20<>\\"\{\}\|\^\`]/,b={_iri:!0,_unescapedIri:!0,_simpleQuotedString:!0,_langcode:!0,_blank:!0,_newline:!0,_comment:!0,_whitespace:!0,_endOfFile:!0},y=/$0^/;class g{constructor(e){if(this._iri=/^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/,this._unescapedIri=/^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/,this._simpleQuotedString=/^"([^"\\\r\n]*)"(?=[^"])/,this._simpleApostropheString=/^'([^'\\\r\n]*)'(?=[^'])/,this._langcode=/^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i,this._prefix=/^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/,this._prefixed=/^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/,this._variable=/^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/,this._blank=/^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/,this._number=/^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/,this._boolean=/^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/,this._keyword=/^@[a-z]+(?=[\s#<:])/i,this._sparqlKeyword=/^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i,this._shortPredicates=/^a(?=[\s#()\[\]\{\}"'<>])/,this._newline=/^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/,this._comment=/#([^\n\r]*)/,this._whitespace=/^[ \t]+/,this._endOfFile=/^(?:#[^\n\r]*)?$/,e=e||{},this._lineMode=!!e.lineMode){this._n3Mode=!1;for(const e in this)!(e in b)&&this[e]instanceof RegExp&&(this[e]=y)}else this._n3Mode=!1!==e.n3;this._comments=!!e.comments,this._literalClosingPos=0}_tokenizeToEnd(e,t){let r=this._input,n=r.length;for(;;){let e,a;for(;e=this._newline.exec(r);)this._comments&&(a=this._comment.exec(e[0]))&&i("comment",a[1],"",this._line,e[0].length),r=r.substr(e[0].length,r.length),n=r.length,this._line++;if(!e&&(e=this._whitespace.exec(r))&&(r=r.substr(e[0].length,r.length)),this._endOfFile.test(r))return t&&(this._comments&&(a=this._comment.exec(r))&&i("comment",a[1],"",this._line,r.length),r=null,i("eof","","",this._line,0)),this._input=r;const s=this._line,l=r[0];let u="",c="",f="",d=null,b=0,y=!1;switch(l){case"^":if(r.length<3)break;if("^"!==r[1]){this._n3Mode&&(b=1,u="^");break}if(this._previousMarker="^^",r=r.substr(2),"<"!==r[0]){y=!0;break}case"<":if(d=this._unescapedIri.exec(r))u="IRI",c=d[1];else if(d=this._iri.exec(r)){if(c=this._unescape(d[1]),null===c||p.test(c))return o(this);u="IRI"}else r.length>1&&"<"===r[1]?(u="<<",b=2):this._n3Mode&&r.length>1&&"="===r[1]&&(u="inverse",b=2,c=">");break;case">":r.length>1&&">"===r[1]&&(u=">>",b=2);break;case"_":((d=this._blank.exec(r))||t&&(d=this._blank.exec(`${r} `)))&&(u="blank",f="_",c=d[1]);break;case'"':if(d=this._simpleQuotedString.exec(r))c=d[1];else if(({value:c,matchLength:b}=this._parseLiteral(r)),null===c)return o(this);null===d&&0===b||(u="literal",this._literalClosingPos=0);break;case"'":if(!this._lineMode){if(d=this._simpleApostropheString.exec(r))c=d[1];else if(({value:c,matchLength:b}=this._parseLiteral(r)),null===c)return o(this);null===d&&0===b||(u="literal",this._literalClosingPos=0)}break;case"?":this._n3Mode&&(d=this._variable.exec(r))&&(u="var",c=d[0]);break;case"@":"literal"===this._previousMarker&&(d=this._langcode.exec(r))?(u="langcode",c=d[1]):(d=this._keyword.exec(r))&&(u=d[0]);break;case".":if(1===r.length?t:r[1]<"0"||r[1]>"9"){u=".",b=1;break}case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"+":case"-":(d=this._number.exec(r)||t&&(d=this._number.exec(`${r} `)))&&(u="literal",c=d[0],f="string"==typeof d[1]?h.double:"string"==typeof d[2]?h.decimal:h.integer);break;case"B":case"b":case"p":case"P":case"G":case"g":(d=this._sparqlKeyword.exec(r))?u=d[0].toUpperCase():y=!0;break;case"f":case"t":(d=this._boolean.exec(r))?(u="literal",c=d[0],f=h.boolean):y=!0;break;case"a":(d=this._shortPredicates.exec(r))?(u="abbreviation",c="a"):y=!0;break;case"=":this._n3Mode&&r.length>1&&(u="abbreviation",">"!==r[1]?(b=1,c="="):(b=2,c=">"));break;case"!":if(!this._n3Mode)break;case",":case";":case"[":case"]":case"(":case")":case"{":case"}":this._lineMode||(b=1,u=l);break;default:y=!0}if(y&&("@prefix"!==this._previousMarker&&"PREFIX"!==this._previousMarker||!(d=this._prefix.exec(r))?((d=this._prefixed.exec(r))||t&&(d=this._prefixed.exec(`${r} `)))&&(u="prefixed",f=d[1]||"",c=this._unescape(d[2])):(u="prefix",c=d[1]||"")),"^^"===this._previousMarker)switch(u){case"prefixed":u="type";break;case"IRI":u="typeIRI";break;default:u=""}if(!u)return t||!/^'''|^"""/.test(r)&&/\n|\r/.test(r)?o(this):this._input=r;const g=b||d[0].length,_=i(u,c,f,s,g);this.previousToken=_,this._previousMarker=u,r=r.substr(g,r.length)}function i(t,i,o,a,s){const l=r?n-r.length:n,u={type:t,value:i,prefix:o,line:a,start:l,end:l+s};return e(null,u),u}function o(t){e(t._syntaxError(/^\S*/.exec(r)[0]))}}_unescape(e){let t=!1;const r=e.replace(f,((e,r,n,i)=>{if("string"==typeof r)return String.fromCharCode(Number.parseInt(r,16));if("string"==typeof n){let e=Number.parseInt(n,16);return e<=65535?String.fromCharCode(Number.parseInt(n,16)):String.fromCharCode(55296+((e-=65536)>>10),56320+(1023&e))}return i in d?d[i]:(t=!0,"")}));return t?null:r}_parseLiteral(e){if(e.length>=3){const t=e.match(/^(?:"""|"|'''|'|)/)[0],r=t.length;let n=Math.max(this._literalClosingPos,r);for(;(n=e.indexOf(t,n))>0;){let t=0;for(;"\\"===e[n-t-1];)t++;if(t%2==0){const t=e.substring(r,n),i=t.split(/\r\n|\r|\n/).length-1,o=n+r;if(1===r&&0!==i||3===r&&this._lineMode)break;return this._line+=i,{value:this._unescape(t),matchLength:o}}n++}this._literalClosingPos=e.length-r+1}return{value:"",matchLength:0}}_syntaxError(e){this._input=null;const t=new Error(`Unexpected "${e}" on line ${this._line}.`);return t.context={token:void 0,line:this._line,previousToken:this.previousToken},t}_readStartingBom(e){return e.startsWith("\ufeff")?e.substr(1):e}tokenize(e,t){if(this._line=1,"string"==typeof e){if(this._input=this._readStartingBom(e),"function"!=typeof t){const e=[];let t;if(this._tokenizeToEnd(((r,n)=>r?t=r:e.push(n)),!0),t)throw t;return e}u()((()=>this._tokenizeToEnd(t,!0)))}else this._pendingBuffer=null,"function"==typeof e.setEncoding&&e.setEncoding("utf8"),e.on("data",(e=>{null!==this._input&&0!==e.length&&(this._pendingBuffer&&(e=c.concat([this._pendingBuffer,e]),this._pendingBuffer=null),128&e[e.length-1]?this._pendingBuffer=e:(void 0===this._input?this._input=this._readStartingBom("string"==typeof e?e:e.toString()):this._input+=e,this._tokenizeToEnd(t,!1)))})),e.on("end",(()=>{"string"==typeof this._input&&this._tokenizeToEnd(t,!0)})),e.on("error",t)}}function _(e){return!!e&&"NamedNode"===e.termType}function m(e){return!!e&&"BlankNode"===e.termType}function w(e){return!!e&&"Literal"===e.termType}function v(e){return!!e&&"Variable"===e.termType}function E(e){return!!e&&"DefaultGraph"===e.termType}function S(e){return E(e.graph)}function R(e,t){return A({"":e.value||e},t)("")}function A(e,t){const r=Object.create(null);for(const t in e)n(t,e[t]);function n(e,n){if("string"==typeof n){const i=Object.create(null);r[e]=e=>i[e]||(i[e]=t.namedNode(n+e))}else if(!(e in r))throw new Error(`Unknown prefix: ${e}`);return r[e]}return t=t||P,n}const{rdf:T,xsd:x}=s;let k,N=0;const O=/^"(.*".*)(?="[^"]*$)/,I=/^<<("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ?("(?:""|[^"])*"[^ ]*|[^ ]+)?>>$/,j={namedNode:function(e){return new F(e)},blankNode:function(e){return new L(e||"n3-"+N++)},variable:function(e){return new M(e)},literal:function(e,t){if("string"==typeof t)return new C(`"${e}"@${t.toLowerCase()}`);let r=t?t.value:"";return""===r&&("boolean"==typeof e?r=x.boolean:"number"==typeof e&&(Number.isFinite(e)?r=Number.isInteger(e)?x.integer:x.double:(r=x.double,Number.isNaN(e)||(e=e>0?"INF":"-INF")))),""===r||r===x.string?new C(`"${e}"`):new C(`"${e}"^^${r}`)},defaultGraph:function(){return k},quad:H,triple:H},P=j;class D{constructor(e){this.id=e}get value(){return this.id}equals(e){return e instanceof D?this.id===e.id:!!e&&this.termType===e.termType&&this.value===e.value}hashCode(){return 0}toJSON(){return{termType:this.termType,value:this.value}}}class F extends D{get termType(){return"NamedNode"}}class C extends D{get termType(){return"Literal"}get value(){return this.id.substring(1,this.id.lastIndexOf('"'))}get language(){const e=this.id;let t=e.lastIndexOf('"')+1;return t<e.length&&"@"===e[t++]?e.substr(t).toLowerCase():""}get datatype(){return new F(this.datatypeString)}get datatypeString(){const e=this.id,t=e.lastIndexOf('"')+1,r=t<e.length?e[t]:"";return"^"===r?e.substr(t+2):"@"!==r?x.string:T.langString}equals(e){return e instanceof C?this.id===e.id:!!e&&!!e.datatype&&this.termType===e.termType&&this.value===e.value&&this.language===e.language&&this.datatype.value===e.datatype.value}toJSON(){return{termType:this.termType,value:this.value,language:this.language,datatype:{termType:"NamedNode",value:this.datatypeString}}}}class L extends D{constructor(e){super(`_:${e}`)}get termType(){return"BlankNode"}get value(){return this.id.substr(2)}}class M extends D{constructor(e){super(`?${e}`)}get termType(){return"Variable"}get value(){return this.id.substr(1)}}class B extends D{constructor(){return super(""),k||this}get termType(){return"DefaultGraph"}equals(e){return this===e||!!e&&this.termType===e.termType}}function $(e,t){if(t=t||j,!e)return t.defaultGraph();switch(e[0]){case"?":return t.variable(e.substr(1));case"_":return t.blankNode(e.substr(2));case'"':if(t===j)return new C(e);if('"'===e[e.length-1])return t.literal(e.substr(1,e.length-2));const r=e.lastIndexOf('"',e.length-1);return t.literal(e.substr(1,r-1),"@"===e[r+1]?e.substr(r+2):t.namedNode(e.substr(r+3)));case"<":const n=I.exec(e);return t.quad($(W(n[1]),t),$(W(n[2]),t),$(W(n[3]),t),n[4]&&$(W(n[4]),t));default:return t.namedNode(e)}}function U(e){if("string"==typeof e)return e;if(e instanceof D&&"Quad"!==e.termType)return e.id;if(!e)return k.id;switch(e.termType){case"NamedNode":return e.value;case"BlankNode":return`_:${e.value}`;case"Variable":return`?${e.value}`;case"DefaultGraph":return"";case"Literal":return`"${e.value}"${e.language?`@${e.language}`:e.datatype&&e.datatype.value!==x.string?`^^${e.datatype.value}`:""}`;case"Quad":return`<<${G(U(e.subject))} ${G(U(e.predicate))} ${G(U(e.object))}${E(e.graph)?"":` ${U(e.graph)}`}>>`;default:throw new Error(`Unexpected termType: ${e.termType}`)}}k=new B;class q extends D{constructor(e,t,r,n){super(""),this._subject=e,this._predicate=t,this._object=r,this._graph=n||k}get termType(){return"Quad"}get subject(){return this._subject}get predicate(){return this._predicate}get object(){return this._object}get graph(){return this._graph}toJSON(){return{termType:this.termType,subject:this._subject.toJSON(),predicate:this._predicate.toJSON(),object:this._object.toJSON(),graph:this._graph.toJSON()}}equals(e){return!!e&&this._subject.equals(e.subject)&&this._predicate.equals(e.predicate)&&this._object.equals(e.object)&&this._graph.equals(e.graph)}}function G(e){return e.replace(O,((e,t)=>`"${t.replace(/"/g,'""')}`))}function W(e){return e.replace(O,((e,t)=>`"${t.replace(/""/g,'"')}`))}function H(e,t,r,n){return new q(e,t,r,n)}let V=0;class Q{constructor(e){this._contextStack=[],this._graph=null,e=e||{},this._setBase(e.baseIRI),e.factory&&Y(this,e.factory);const t="string"==typeof e.format?e.format.match(/\w*$/)[0].toLowerCase():"",r=/turtle/.test(t),n=/trig/.test(t),i=/triple/.test(t),o=/quad/.test(t),a=this._n3Mode=/n3/.test(t),s=i||o;(this._supportsNamedGraphs=!(r||a))||(this._readPredicateOrNamedGraph=this._readPredicate),this._supportsQuads=!(r||n||i||a),this._supportsRDFStar=""===t||/star|\*$/.test(t),s&&(this._resolveRelativeIRI=e=>null),this._blankNodePrefix="string"!=typeof e.blankNodePrefix?"":e.blankNodePrefix.replace(/^(?!_:)/,"_:"),this._lexer=e.lexer||new g({lineMode:s,n3:a}),this._explicitQuantifiers=!!e.explicitQuantifiers}static _resetBlankNodePrefix(){V=0}_setBase(e){if(e){const t=e.indexOf("#");t>=0&&(e=e.substr(0,t)),this._base=e,this._basePath=e.indexOf("/")<0?e:e.replace(/[^\/?]*(?:\?.*)?$/,""),e=e.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i),this._baseRoot=e[0],this._baseScheme=e[1]}else this._base="",this._basePath=""}_saveContext(e,t,r,n,i){const o=this._n3Mode;this._contextStack.push({type:e,subject:r,predicate:n,object:i,graph:t,inverse:!!o&&this._inversePredicate,blankPrefix:o?this._prefixes._:"",quantified:o?this._quantified:null}),o&&(this._inversePredicate=!1,this._prefixes._=this._graph?`${this._graph.id.substr(2)}.`:".",this._quantified=Object.create(this._quantified))}_restoreContext(e,t){const r=this._contextStack.pop();if(!r||r.type!==e)return this._error(`Unexpected ${t.type}`,t);this._subject=r.subject,this._predicate=r.predicate,this._object=r.object,this._graph=r.graph,this._n3Mode&&(this._inversePredicate=r.inverse,this._prefixes._=r.blankPrefix,this._quantified=r.quantified)}_readInTopContext(e){switch(e.type){case"eof":return null!==this._graph?this._error("Unclosed graph",e):(delete this._prefixes._,this._callback(null,null,this._prefixes));case"PREFIX":this._sparqlStyle=!0;case"@prefix":return this._readPrefix;case"BASE":this._sparqlStyle=!0;case"@base":return this._readBaseIRI;case"{":if(this._supportsNamedGraphs)return this._graph="",this._subject=null,this._readSubject;case"GRAPH":if(this._supportsNamedGraphs)return this._readNamedGraphLabel;default:return this._readSubject(e)}}_readEntity(e,t){let r;switch(e.type){case"IRI":case"typeIRI":const t=this._resolveIRI(e.value);if(null===t)return this._error("Invalid IRI",e);r=this._namedNode(t);break;case"type":case"prefixed":const n=this._prefixes[e.prefix];if(void 0===n)return this._error(`Undefined prefix "${e.prefix}:"`,e);r=this._namedNode(n+e.value);break;case"blank":r=this._blankNode(this._prefixes[e.prefix]+e.value);break;case"var":r=this._variable(e.value.substr(1));break;default:return this._error(`Expected entity but got ${e.type}`,e)}return!t&&this._n3Mode&&r.id in this._quantified&&(r=this._quantified[r.id]),r}_readSubject(e){switch(this._predicate=null,e.type){case"[":return this._saveContext("blank",this._graph,this._subject=this._blankNode(),null,null),this._readBlankNodeHead;case"(":return this._saveContext("list",this._graph,this.RDF_NIL,null,null),this._subject=null,this._readListItem;case"{":return this._n3Mode?(this._saveContext("formula",this._graph,this._graph=this._blankNode(),null,null),this._readSubject):this._error("Unexpected graph",e);case"}":return this._readPunctuation(e);case"@forSome":return this._n3Mode?(this._subject=null,this._predicate=this.N3_FORSOME,this._quantifier=this._blankNode,this._readQuantifierList):this._error('Unexpected "@forSome"',e);case"@forAll":return this._n3Mode?(this._subject=null,this._predicate=this.N3_FORALL,this._quantifier=this._variable,this._readQuantifierList):this._error('Unexpected "@forAll"',e);case"literal":if(!this._n3Mode)return this._error("Unexpected literal",e);if(0===e.prefix.length)return this._literalValue=e.value,this._completeSubjectLiteral;this._subject=this._literal(e.value,this._namedNode(e.prefix));break;case"<<":return this._supportsRDFStar?(this._saveContext("<<",this._graph,null,null,null),this._graph=null,this._readSubject):this._error("Unexpected RDF* syntax",e);default:if(void 0===(this._subject=this._readEntity(e)))return;if(this._n3Mode)return this._getPathReader(this._readPredicateOrNamedGraph)}return this._readPredicateOrNamedGraph}_readPredicate(e){const t=e.type;switch(t){case"inverse":this._inversePredicate=!0;case"abbreviation":this._predicate=this.ABBREVIATIONS[e.value];break;case".":case"]":case"}":return null===this._predicate?this._error(`Unexpected ${t}`,e):(this._subject=null,"]"===t?this._readBlankNodeTail(e):this._readPunctuation(e));case";":return null!==this._predicate?this._readPredicate:this._error("Expected predicate but got ;",e);case"[":if(this._n3Mode)return this._saveContext("blank",this._graph,this._subject,this._subject=this._blankNode(),null),this._readBlankNodeHead;case"blank":if(!this._n3Mode)return this._error("Disallowed blank node as predicate",e);default:if(void 0===(this._predicate=this._readEntity(e)))return}return this._readObject}_readObject(e){switch(e.type){case"literal":if(0===e.prefix.length)return this._literalValue=e.value,this._readDataTypeOrLang;this._object=this._literal(e.value,this._namedNode(e.prefix));break;case"[":return this._saveContext("blank",this._graph,this._subject,this._predicate,this._subject=this._blankNode()),this._readBlankNodeHead;case"(":return this._saveContext("list",this._graph,this._subject,this._predicate,this.RDF_NIL),this._subject=null,this._readListItem;case"{":return this._n3Mode?(this._saveContext("formula",this._graph,this._subject,this._predicate,this._graph=this._blankNode()),this._readSubject):this._error("Unexpected graph",e);case"<<":return this._supportsRDFStar?(this._saveContext("<<",this._graph,this._subject,this._predicate,null),this._graph=null,this._readSubject):this._error("Unexpected RDF* syntax",e);default:if(void 0===(this._object=this._readEntity(e)))return;if(this._n3Mode)return this._getPathReader(this._getContextEndReader())}return this._getContextEndReader()}_readPredicateOrNamedGraph(e){return"{"===e.type?this._readGraph(e):this._readPredicate(e)}_readGraph(e){return"{"!==e.type?this._error(`Expected graph but got ${e.type}`,e):(this._graph=this._subject,this._subject=null,this._readSubject)}_readBlankNodeHead(e){return"]"===e.type?(this._subject=null,this._readBlankNodeTail(e)):(this._predicate=null,this._readPredicate(e))}_readBlankNodeTail(e){if("]"!==e.type)return this._readBlankNodePunctuation(e);null!==this._subject&&this._emit(this._subject,this._predicate,this._object,this._graph);const t=null===this._predicate;return this._restoreContext("blank",e),null!==this._object?this._getContextEndReader():null!==this._predicate?this._readObject:t?this._readPredicateOrNamedGraph:this._readPredicateAfterBlank}_readPredicateAfterBlank(e){switch(e.type){case".":case"}":return this._subject=null,this._readPunctuation(e);default:return this._readPredicate(e)}}_readListItem(e){let t=null,r=null,n=this._readListItem;const i=this._subject,o=this._contextStack,a=o[o.length-1];switch(e.type){case"[":this._saveContext("blank",this._graph,r=this._blankNode(),this.RDF_FIRST,this._subject=t=this._blankNode()),n=this._readBlankNodeHead;break;case"(":this._saveContext("list",this._graph,r=this._blankNode(),this.RDF_FIRST,this.RDF_NIL),this._subject=null;break;case")":if(this._restoreContext("list",e),0!==o.length&&"list"===o[o.length-1].type&&this._emit(this._subject,this._predicate,this._object,this._graph),null===this._predicate){if(n=this._readPredicate,this._subject===this.RDF_NIL)return n}else if(n=this._getContextEndReader(),this._object===this.RDF_NIL)return n;r=this.RDF_NIL;break;case"literal":0===e.prefix.length?(this._literalValue=e.value,n=this._readListItemDataTypeOrLang):(t=this._literal(e.value,this._namedNode(e.prefix)),n=this._getContextEndReader());break;case"{":return this._n3Mode?(this._saveContext("formula",this._graph,this._subject,this._predicate,this._graph=this._blankNode()),this._readSubject):this._error("Unexpected graph",e);default:if(void 0===(t=this._readEntity(e)))return}if(null===r&&(this._subject=r=this._blankNode()),null===i?null===a.predicate?a.subject=r:a.object=r:this._emit(i,this.RDF_REST,r,this._graph),null!==t){if(this._n3Mode&&("IRI"===e.type||"prefixed"===e.type))return this._saveContext("item",this._graph,r,this.RDF_FIRST,t),this._subject=t,this._predicate=null,this._getPathReader(this._readListItem);this._emit(r,this.RDF_FIRST,t,this._graph)}return n}_readDataTypeOrLang(e){return this._completeObjectLiteral(e,!1)}_readListItemDataTypeOrLang(e){return this._completeObjectLiteral(e,!0)}_completeLiteral(e){let t=this._literal(this._literalValue);switch(e.type){case"type":case"typeIRI":const r=this._readEntity(e);if(void 0===r)return;t=this._literal(this._literalValue,r),e=null;break;case"langcode":t=this._literal(this._literalValue,e.value),e=null}return{token:e,literal:t}}_completeSubjectLiteral(e){return this._subject=this._completeLiteral(e).literal,this._readPredicateOrNamedGraph}_completeObjectLiteral(e,t){const r=this._completeLiteral(e);if(r)return this._object=r.literal,t&&this._emit(this._subject,this.RDF_FIRST,this._object,this._graph),null===r.token?this._getContextEndReader():(this._readCallback=this._getContextEndReader(),this._readCallback(r.token))}_readFormulaTail(e){return"}"!==e.type?this._readPunctuation(e):(null!==this._subject&&this._emit(this._subject,this._predicate,this._object,this._graph),this._restoreContext("formula",e),null===this._object?this._readPredicate:this._getContextEndReader())}_readPunctuation(e){let t,r=this._graph;const n=this._subject,i=this._inversePredicate;switch(e.type){case"}":if(null===this._graph)return this._error("Unexpected graph closing",e);if(this._n3Mode)return this._readFormulaTail(e);this._graph=null;case".":this._subject=null,t=this._contextStack.length?this._readSubject:this._readInTopContext,i&&(this._inversePredicate=!1);break;case";":t=this._readPredicate;break;case",":t=this._readObject;break;default:if(this._supportsQuads&&null===this._graph&&void 0!==(r=this._readEntity(e))){t=this._readQuadPunctuation;break}return this._error(`Expected punctuation to follow "${this._object.id}"`,e)}if(null!==n){const e=this._predicate,t=this._object;i?this._emit(t,e,n,r):this._emit(n,e,t,r)}return t}_readBlankNodePunctuation(e){let t;switch(e.type){case";":t=this._readPredicate;break;case",":t=this._readObject;break;default:return this._error(`Expected punctuation to follow "${this._object.id}"`,e)}return this._emit(this._subject,this._predicate,this._object,this._graph),t}_readQuadPunctuation(e){return"."!==e.type?this._error("Expected dot to follow quad",e):this._readInTopContext}_readPrefix(e){return"prefix"!==e.type?this._error("Expected prefix to follow @prefix",e):(this._prefix=e.value,this._readPrefixIRI)}_readPrefixIRI(e){if("IRI"!==e.type)return this._error(`Expected IRI to follow prefix "${this._prefix}:"`,e);const t=this._readEntity(e);return this._prefixes[this._prefix]=t.value,this._prefixCallback(this._prefix,t),this._readDeclarationPunctuation}_readBaseIRI(e){const t="IRI"===e.type&&this._resolveIRI(e.value);return t?(this._setBase(t),this._readDeclarationPunctuation):this._error("Expected valid IRI to follow base declaration",e)}_readNamedGraphLabel(e){switch(e.type){case"IRI":case"blank":case"prefixed":return this._readSubject(e),this._readGraph;case"[":return this._readNamedGraphBlankLabel;default:return this._error("Invalid graph label",e)}}_readNamedGraphBlankLabel(e){return"]"!==e.type?this._error("Invalid graph label",e):(this._subject=this._blankNode(),this._readGraph)}_readDeclarationPunctuation(e){return this._sparqlStyle?(this._sparqlStyle=!1,this._readInTopContext(e)):"."!==e.type?this._error("Expected declaration to end with a dot",e):this._readInTopContext}_readQuantifierList(e){let t;switch(e.type){case"IRI":case"prefixed":if(void 0!==(t=this._readEntity(e,!0)))break;default:return this._error(`Unexpected ${e.type}`,e)}return this._explicitQuantifiers?(null===this._subject?this._emit(this._graph||this.DEFAULTGRAPH,this._predicate,this._subject=this._blankNode(),this.QUANTIFIERS_GRAPH):this._emit(this._subject,this.RDF_REST,this._subject=this._blankNode(),this.QUANTIFIERS_GRAPH),this._emit(this._subject,this.RDF_FIRST,t,this.QUANTIFIERS_GRAPH)):this._quantified[t.id]=this._quantifier(this._blankNode().value),this._readQuantifierPunctuation}_readQuantifierPunctuation(e){return","===e.type?this._readQuantifierList:(this._explicitQuantifiers&&(this._emit(this._subject,this.RDF_REST,this.RDF_NIL,this.QUANTIFIERS_GRAPH),this._subject=null),this._readCallback=this._getContextEndReader(),this._readCallback(e))}_getPathReader(e){return this._afterPath=e,this._readPath}_readPath(e){switch(e.type){case"!":return this._readForwardPath;case"^":return this._readBackwardPath;default:const t=this._contextStack,r=t.length&&t[t.length-1];if(r&&"item"===r.type){const t=this._subject;this._restoreContext("item",e),this._emit(this._subject,this.RDF_FIRST,t,this._graph)}return this._afterPath(e)}}_readForwardPath(e){let t,r;const n=this._blankNode();if(void 0!==(r=this._readEntity(e)))return null===this._predicate?(t=this._subject,this._subject=n):(t=this._object,this._object=n),this._emit(t,r,n,this._graph),this._readPath}_readBackwardPath(e){const t=this._blankNode();let r,n;if(void 0!==(r=this._readEntity(e)))return null===this._predicate?(n=this._subject,this._subject=t):(n=this._object,this._object=t),this._emit(t,r,n,this._graph),this._readPath}_readRDFStarTailOrGraph(e){return">>"!==e.type?this._supportsQuads&&null===this._graph&&void 0!==(this._graph=this._readEntity(e))?this._readRDFStarTail:this._error(`Expected >> to follow "${this._object.id}"`,e):this._readRDFStarTail(e)}_readRDFStarTail(e){if(">>"!==e.type)return this._error(`Expected >> but got ${e.type}`,e);const t=this._quad(this._subject,this._predicate,this._object,this._graph||this.DEFAULTGRAPH);return this._restoreContext("<<",e),null===this._subject?(this._subject=t,this._readPredicate):(this._object=t,this._getContextEndReader())}_getContextEndReader(){const e=this._contextStack;if(!e.length)return this._readPunctuation;switch(e[e.length-1].type){case"blank":return this._readBlankNodeTail;case"list":return this._readListItem;case"formula":return this._readFormulaTail;case"<<":return this._readRDFStarTailOrGraph}}_emit(e,t,r,n){this._callback(null,this._quad(e,t,r,n||this.DEFAULTGRAPH))}_error(e,t){const r=new Error(`${e} on line ${t.line}.`);r.context={token:t,line:t.line,previousToken:this._lexer.previousToken},this._callback(r),this._callback=z}_resolveIRI(e){return/^[a-z][a-z0-9+.-]*:/i.test(e)?e:this._resolveRelativeIRI(e)}_resolveRelativeIRI(e){if(!e.length)return this._base;switch(e[0]){case"#":return this._base+e;case"?":return this._base.replace(/(?:\?.*)?$/,e);case"/":return("/"===e[1]?this._baseScheme:this._baseRoot)+this._removeDotSegments(e);default:return/^[^/:]*:/.test(e)?null:this._removeDotSegments(this._basePath+e)}}_removeDotSegments(e){if(!/(^|\/)\.\.?($|[/#?])/.test(e))return e;const t=e.length;let r="",n=-1,i=-1,o=0,a="/";for(;n<t;){switch(a){case":":if(i<0&&"/"===e[++n]&&"/"===e[++n])for(;(i=n+1)<t&&"/"!==e[i];)n=i;break;case"?":case"#":n=t;break;case"/":if("."===e[n+1])switch(a=e[1+ ++n],a){case"/":r+=e.substring(o,n-1),o=n+1;break;case void 0:case"?":case"#":return r+e.substring(o,n)+e.substr(n+1);case".":if(a=e[1+ ++n],void 0===a||"/"===a||"?"===a||"#"===a){if(r+=e.substring(o,n-2),(o=r.lastIndexOf("/"))>=i&&(r=r.substr(0,o)),"/"!==a)return`${r}/${e.substr(n+1)}`;o=n+1}}}a=e[++n]}return r+e.substring(o)}parse(e,t,r){if(this._readCallback=this._readInTopContext,this._sparqlStyle=!1,this._prefixes=Object.create(null),this._prefixes._=this._blankNodePrefix?this._blankNodePrefix.substr(2):`b${V++}_`,this._prefixCallback=r||z,this._inversePredicate=!1,this._quantified=Object.create(null),!t){const t=[];let r;if(this._callback=(e,n)=>{e?r=e:n&&t.push(n)},this._lexer.tokenize(e).every((e=>this._readCallback=this._readCallback(e))),r)throw r;return t}this._callback=t,this._lexer.tokenize(e,((e,t)=>{null!==e?(this._callback(e),this._callback=z):this._readCallback&&(this._readCallback=this._readCallback(t))}))}}function z(){}function Y(e,t){const r=t.namedNode;e._namedNode=r,e._blankNode=t.blankNode,e._literal=t.literal,e._variable=t.variable,e._quad=t.quad,e.DEFAULTGRAPH=t.defaultGraph(),e.RDF_FIRST=r(s.rdf.first),e.RDF_REST=r(s.rdf.rest),e.RDF_NIL=r(s.rdf.nil),e.N3_FORALL=r(s.r.forAll),e.N3_FORSOME=r(s.r.forSome),e.ABBREVIATIONS={a:r(s.rdf.type),"=":r(s.owl.sameAs),">":r(s.log.implies)},e.QUANTIFIERS_GRAPH=r("urn:n3:quantifiers")}Y(Q.prototype,P);const X=P.defaultGraph(),{rdf:K,xsd:J}=s,Z=/["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,ee=/["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,te={"\\":"\\\\",'"':'\\"',"\t":"\\t","\n":"\\n","\r":"\\r","\b":"\\b","\f":"\\f"};class re extends D{equals(){return!1}}class ne{constructor(e,t){if(this._prefixRegex=/$0^/,e&&"function"!=typeof e.write&&(t=e,e=null),t=t||{},this._lists=t.lists,e)this._outputStream=e,this._endStream=void 0===t.end||!!t.end;else{let e="";this._outputStream={write(t,r,n){e+=t,n&&n()},end:t=>{t&&t(null,e)}},this._endStream=!0}this._subject=null,/triple|quad/i.test(t.format)?(this._lineMode=!0,this._writeQuad=this._writeQuadLine):(this._lineMode=!1,this._graph=X,this._prefixIRIs=Object.create(null),t.prefixes&&this.addPrefixes(t.prefixes),t.baseIRI&&(this._baseMatcher=new RegExp(`^${oe(t.baseIRI)}${t.baseIRI.endsWith("/")?"":"[#?]"}`),this._baseLength=t.baseIRI.length))}get _inDefaultGraph(){return X.equals(this._graph)}_write(e,t){this._outputStream.write(e,"utf8",t)}_writeQuad(e,t,r,n,i){try{n.equals(this._graph)||(this._write((null===this._subject?"":this._inDefaultGraph?".\n":"\n}\n")+(X.equals(n)?"":`${this._encodeIriOrBlank(n)} {\n`)),this._graph=n,this._subject=null),e.equals(this._subject)?t.equals(this._predicate)?this._write(`, ${this._encodeObject(r)}`,i):this._write(`;\n    ${this._encodePredicate(this._predicate=t)} ${this._encodeObject(r)}`,i):this._write(`${(null===this._subject?"":".\n")+this._encodeSubject(this._subject=e)} ${this._encodePredicate(this._predicate=t)} ${this._encodeObject(r)}`,i)}catch(e){i&&i(e)}}_writeQuadLine(e,t,r,n,i){delete this._prefixMatch,this._write(this.quadToString(e,t,r,n),i)}quadToString(e,t,r,n){return`${this._encodeSubject(e)} ${this._encodeIriOrBlank(t)} ${this._encodeObject(r)}${n&&n.value?` ${this._encodeIriOrBlank(n)} .\n`:" .\n"}`}quadsToString(e){return e.map((e=>this.quadToString(e.subject,e.predicate,e.object,e.graph))).join("")}_encodeSubject(e){return"Quad"===e.termType?this._encodeQuad(e):this._encodeIriOrBlank(e)}_encodeIriOrBlank(e){if("NamedNode"!==e.termType)return this._lists&&e.value in this._lists&&(e=this.list(this._lists[e.value])),"id"in e?e.id:`_:${e.value}`;let t=e.value;this._baseMatcher&&this._baseMatcher.test(t)&&(t=t.substr(this._baseLength)),Z.test(t)&&(t=t.replace(ee,ie));const r=this._prefixRegex.exec(t);return r?r[1]?this._prefixIRIs[r[1]]+r[2]:t:`<${t}>`}_encodeLiteral(e){let t=e.value;if(Z.test(t)&&(t=t.replace(ee,ie)),e.language)return`"${t}"@${e.language}`;if(this._lineMode){if(e.datatype.value===J.string)return`"${t}"`}else switch(e.datatype.value){case J.string:return`"${t}"`;case J.boolean:if("true"===t||"false"===t)return t;break;case J.integer:if(/^[+-]?\d+$/.test(t))return t;break;case J.decimal:if(/^[+-]?\d*\.\d+$/.test(t))return t;break;case J.double:if(/^[+-]?(?:\d+\.\d*|\.?\d+)[eE][+-]?\d+$/.test(t))return t}return`"${t}"^^${this._encodeIriOrBlank(e.datatype)}`}_encodePredicate(e){return e.value===K.type?"a":this._encodeIriOrBlank(e)}_encodeObject(e){switch(e.termType){case"Quad":return this._encodeQuad(e);case"Literal":return this._encodeLiteral(e);default:return this._encodeIriOrBlank(e)}}_encodeQuad({subject:e,predicate:t,object:r,graph:n}){return`<<${this._encodeSubject(e)} ${this._encodePredicate(t)} ${this._encodeObject(r)}${E(n)?"":` ${this._encodeIriOrBlank(n)}`}>>`}_blockedWrite(){throw new Error("Cannot write because the writer has been closed.")}addQuad(e,t,r,n,i){void 0===r?this._writeQuad(e.subject,e.predicate,e.object,e.graph,t):"function"==typeof n?this._writeQuad(e,t,r,X,n):this._writeQuad(e,t,r,n||X,i)}addQuads(e){for(let t=0;t<e.length;t++)this.addQuad(e[t])}addPrefix(e,t,r){const n={};n[e]=t,this.addPrefixes(n,r)}addPrefixes(e,t){if(!this._prefixIRIs)return t&&t();let r=!1;for(let t in e){let n=e[t];"string"!=typeof n&&(n=n.value),r=!0,null!==this._subject&&(this._write(this._inDefaultGraph?".\n":"\n}\n"),this._subject=null,this._graph=""),this._prefixIRIs[n]=t+=":",this._write(`@prefix ${t} <${n}>.\n`)}if(r){let e="",t="";for(const r in this._prefixIRIs)e+=e?`|${r}`:r,t+=(t?"|":"")+this._prefixIRIs[r];e=oe(e),this._prefixRegex=new RegExp(`^(?:${t})[^/]*$|^(${e})([a-zA-Z][\\-_a-zA-Z0-9]*)$`)}this._write(r?"\n":"",t)}blank(e,t){let r,n,i=e;switch(void 0===e?i=[]:e.termType?i=[{predicate:e,object:t}]:"length"in e||(i=[e]),n=i.length){case 0:return new re("[]");case 1:if(r=i[0],!(r.object instanceof re))return new re(`[ ${this._encodePredicate(r.predicate)} ${this._encodeObject(r.object)} ]`);default:let t="[";for(let o=0;o<n;o++)r=i[o],r.predicate.equals(e)?t+=`, ${this._encodeObject(r.object)}`:(t+=`${(o?";\n  ":"\n  ")+this._encodePredicate(r.predicate)} ${this._encodeObject(r.object)}`,e=r.predicate);return new re(`${t}\n]`)}}list(e){const t=e&&e.length||0,r=new Array(t);for(let n=0;n<t;n++)r[n]=this._encodeObject(e[n]);return new re(`(${r.join(" ")})`)}end(e){null!==this._subject&&(this._write(this._inDefaultGraph?".\n":"\n}\n"),this._subject=null),this._write=this._blockedWrite;let t=e&&((r,n)=>{t=null,e(r,n)});if(this._endStream)try{return this._outputStream.end(t)}catch(e){}t&&t()}}function ie(e){let t=te[e];return void 0===t&&(1===e.length?(t=e.charCodeAt(0).toString(16),t="\\u0000".substr(0,6-t.length)+t):(t=(1024*(e.charCodeAt(0)-55296)+e.charCodeAt(1)+9216).toString(16),t="\\U00000000".substr(0,10-t.length)+t)),t}function oe(e){return e.replace(/[\]\/\(\)\*\+\?\.\\\$]/g,"\\$&")}var ae=r(8473);class se{constructor(e,t){this._size=0,this._graphs=Object.create(null),this._id=0,this._ids=Object.create(null),this._ids["><"]=0,this._entities=Object.create(null),this._blankNodeIndex=0,t||!e||e[0]||(t=e,e=null),t=t||{},this._factory=t.factory||P,e&&this.addQuads(e)}get size(){let e=this._size;if(null!==e)return e;e=0;const t=this._graphs;let r,n;for(const i in t)for(const o in r=t[i].subjects)for(const t in n=r[o])e+=Object.keys(n[t]).length;return this._size=e}_addToIndex(e,t,r,n){const i=e[t]||(e[t]={}),o=i[r]||(i[r]={}),a=n in o;return a||(o[n]=null),!a}_removeFromIndex(e,t,r,n){const i=e[t],o=i[r];delete o[n];for(const e in o)return;delete i[r];for(const e in i)return;delete e[t]}*_findInIndex(e,t,r,n,i,o,a,s){let l,u,c;const h=this._entities,f=$(s,this._factory),d={subject:null,predicate:null,object:null};t&&((l=e,e={})[t]=l[t]);for(const t in e)if(u=e[t]){d[i]=$(h[t],this._factory),r&&((l=u,u={})[r]=l[r]);for(const e in u)if(c=u[e]){d[o]=$(h[e],this._factory);const t=n?n in c?[n]:[]:Object.keys(c);for(let e=0;e<t.length;e++)d[a]=$(h[t[e]],this._factory),yield this._factory.quad(d.subject,d.predicate,d.object,f)}}}_loop(e,t){for(const r in e)t(r)}_loopByKey0(e,t,r){let n,i;if(n=e[t])for(i in n)r(i)}_loopByKey1(e,t,r){let n,i;for(n in e)i=e[n],i[t]&&r(n)}_loopBy2Keys(e,t,r,n){let i,o,a;if((i=e[t])&&(o=i[r]))for(a in o)n(a)}_countInIndex(e,t,r,n){let i,o,a,s=0;t&&((i=e,e={})[t]=i[t]);for(const t in e)if(o=e[t]){r&&((i=o,o={})[r]=i[r]);for(const e in o)(a=o[e])&&(n?n in a&&s++:s+=Object.keys(a).length)}return s}_getGraphs(e){if(!le(e))return this._graphs;const t={};return t[e]=this._graphs[e],t}_uniqueEntities(e){const t=Object.create(null);return r=>{r in t||(t[r]=!0,e($(this._entities[r],this._factory)))}}add(e){return this.addQuad(e),this}addQuad(e,t,r,n){t||(n=e.graph,r=e.object,t=e.predicate,e=e.subject),e=U(e),t=U(t),r=U(r),n=U(n);let i=this._graphs[n];i||(i=this._graphs[n]={subjects:{},predicates:{},objects:{}},Object.freeze(i));const o=this._ids,a=this._entities;e=o[e]||(o[a[++this._id]=e]=this._id),t=o[t]||(o[a[++this._id]=t]=this._id),r=o[r]||(o[a[++this._id]=r]=this._id);const s=this._addToIndex(i.subjects,e,t,r);return this._addToIndex(i.predicates,t,r,e),this._addToIndex(i.objects,r,e,t),this._size=null,s}addQuads(e){for(let t=0;t<e.length;t++)this.addQuad(e[t])}delete(e){return this.removeQuad(e),this}has(e,t,r,n){return e&&e.subject&&({subject:e,predicate:t,object:r,graph:n}=e),!this.readQuads(e,t,r,n).next().done}import(e){return e.on("data",(e=>{this.addQuad(e)})),e}removeQuad(e,t,r,n){t||(n=e.graph,r=e.object,t=e.predicate,e=e.subject),e=U(e),t=U(t),r=U(r),n=U(n);const i=this._ids,o=this._graphs;let a,s,l;if(!((e=i[e])&&(t=i[t])&&(r=i[r])&&(a=o[n])&&(s=a.subjects[e])&&(l=s[t])&&r in l))return!1;for(e in this._removeFromIndex(a.subjects,e,t,r),this._removeFromIndex(a.predicates,t,r,e),this._removeFromIndex(a.objects,r,e,t),null!==this._size&&this._size--,a.subjects)return!0;return delete o[n],!0}removeQuads(e){for(let t=0;t<e.length;t++)this.removeQuad(e[t])}remove(e){return e.on("data",(e=>{this.removeQuad(e)})),e}removeMatches(e,t,r,n){const i=new ae.Readable({objectMode:!0});return i._read=()=>{for(const o of this.readQuads(e,t,r,n))i.push(o);i.push(null)},this.remove(i)}deleteGraph(e){return this.removeMatches(null,null,null,e)}getQuads(e,t,r,n){return[...this.readQuads(e,t,r,n)]}*readQuads(e,t,r,n){e=e&&U(e),t=t&&U(t),r=r&&U(r),n=n&&U(n);const i=this._getGraphs(n),o=this._ids;let a,s,l,u;if(!(le(e)&&!(s=o[e])||le(t)&&!(l=o[t])||le(r)&&!(u=o[r])))for(const e in i)(a=i[e])&&(s?u?yield*this._findInIndex(a.objects,u,s,l,"object","subject","predicate",e):yield*this._findInIndex(a.subjects,s,l,null,"subject","predicate","object",e):l?yield*this._findInIndex(a.predicates,l,u,null,"predicate","object","subject",e):u?yield*this._findInIndex(a.objects,u,null,null,"object","subject","predicate",e):yield*this._findInIndex(a.subjects,null,null,null,"subject","predicate","object",e))}match(e,t,r,n){return new ue(this,e,t,r,n)}countQuads(e,t,r,n){e=e&&U(e),t=t&&U(t),r=r&&U(r),n=n&&U(n);const i=this._getGraphs(n),o=this._ids;let a,s,l,u,c=0;if(le(e)&&!(s=o[e])||le(t)&&!(l=o[t])||le(r)&&!(u=o[r]))return 0;for(const n in i)(a=i[n])&&(c+=e?r?this._countInIndex(a.objects,u,s,l):this._countInIndex(a.subjects,s,l,u):t?this._countInIndex(a.predicates,l,u,s):this._countInIndex(a.objects,u,s,l));return c}forEach(e,t,r,n,i){this.some((t=>(e(t),!1)),t,r,n,i)}every(e,t,r,n,i){let o=!1;const a=!this.some((t=>(o=!0,!e(t))),t,r,n,i);return o&&a}some(e,t,r,n,i){for(const o of this.readQuads(t,r,n,i))if(e(o))return!0;return!1}getSubjects(e,t,r){const n=[];return this.forSubjects((e=>{n.push(e)}),e,t,r),n}forSubjects(e,t,r,n){t=t&&U(t),r=r&&U(r),n=n&&U(n);const i=this._ids,o=this._getGraphs(n);let a,s,l;if(e=this._uniqueEntities(e),!(le(t)&&!(s=i[t])||le(r)&&!(l=i[r])))for(n in o)(a=o[n])&&(s?l?this._loopBy2Keys(a.predicates,s,l,e):this._loopByKey1(a.subjects,s,e):l?this._loopByKey0(a.objects,l,e):this._loop(a.subjects,e))}getPredicates(e,t,r){const n=[];return this.forPredicates((e=>{n.push(e)}),e,t,r),n}forPredicates(e,t,r,n){t=t&&U(t),r=r&&U(r),n=n&&U(n);const i=this._ids,o=this._getGraphs(n);let a,s,l;if(e=this._uniqueEntities(e),!(le(t)&&!(s=i[t])||le(r)&&!(l=i[r])))for(n in o)(a=o[n])&&(s?l?this._loopBy2Keys(a.objects,l,s,e):this._loopByKey0(a.subjects,s,e):l?this._loopByKey1(a.predicates,l,e):this._loop(a.predicates,e))}getObjects(e,t,r){const n=[];return this.forObjects((e=>{n.push(e)}),e,t,r),n}forObjects(e,t,r,n){t=t&&U(t),r=r&&U(r),n=n&&U(n);const i=this._ids,o=this._getGraphs(n);let a,s,l;if(e=this._uniqueEntities(e),!(le(t)&&!(s=i[t])||le(r)&&!(l=i[r])))for(n in o)(a=o[n])&&(s?l?this._loopBy2Keys(a.subjects,s,l,e):this._loopByKey1(a.objects,s,e):l?this._loopByKey0(a.predicates,l,e):this._loop(a.objects,e))}getGraphs(e,t,r){const n=[];return this.forGraphs((e=>{n.push(e)}),e,t,r),n}forGraphs(e,t,r,n){for(const i in this._graphs)this.some((t=>(e(t.graph),!0)),t,r,n,i)}createBlankNode(e){let t,r;if(e)for(t=e=`_:${e}`,r=1;this._ids[t];)t=e+r++;else do{t="_:b"+this._blankNodeIndex++}while(this._ids[t]);return this._ids[t]=++this._id,this._entities[this._id]=t,this._factory.blankNode(t.substr(2))}extractLists({remove:e=!1,ignoreErrors:t=!1}={}){const r={},n=t?()=>!0:(e,t)=>{throw new Error(`${e.value} ${t}`)},i=this.getQuads(null,s.rdf.rest,s.rdf.nil,null),o=e?[...i]:[];return i.forEach((t=>{const i=[];let a,l,u=!1;const c=t.graph;let h=t.subject;for(;h&&!u;){const e=this.getQuads(null,null,h,null),t=this.getQuads(h,null,null,null);let r,f=null,d=null,p=null;for(let i=0;i<t.length&&!u;i++)r=t[i],r.graph.equals(c)?a?u=n(h,"has non-list arcs out"):r.predicate.value===s.rdf.first?f?u=n(h,"has multiple rdf:first arcs"):o.push(f=r):r.predicate.value===s.rdf.rest?d?u=n(h,"has multiple rdf:rest arcs"):o.push(d=r):e.length?u=n(h,"can't be subject and object"):(a=r,l="subject"):u=n(h,"not confined to single graph");for(let t=0;t<e.length&&!u;++t)r=e[t],a?u=n(h,"can't have coreferences"):r.predicate.value===s.rdf.rest?p?u=n(h,"has incoming rdf:rest arcs"):p=r:(a=r,l="object");f?i.unshift(f.object):u=n(h,"has no list head"),h=p&&p.subject}u?e=!1:a&&(r[a[l].value]=i)})),e&&this.removeQuads(o),r}*[Symbol.iterator](){yield*this.readQuads()}}function le(e){return"string"==typeof e||e instanceof String}class ue extends ae.Readable{constructor(e,t,r,n,i){super({objectMode:!0}),Object.assign(this,{n3Store:e,subject:t,predicate:r,object:n,graph:i})}get filtered(){if(!this._filtered){const{n3Store:e,graph:t,object:r,predicate:n,subject:i}=this,o=this._filtered=new se({factory:e._factory});for(const a of e.readQuads(i,n,r,t))o.addQuad(a)}return this._filtered}get size(){return this.filtered.size}_read(){for(const e of this)this.push(e);this.push(null)}add(e){return this.filtered.add(e)}delete(e){return this.filtered.delete(e)}has(e){return this.filtered.has(e)}match(e,t,r,n){return new ue(this.filtered,e,t,r,n)}*[Symbol.iterator](){yield*this._filtered||this.n3Store.readQuads(this.subject,this.predicate,this.object,this.graph)}}class ce extends ae.Transform{constructor(e){let t,r;super({decodeStrings:!0}),this._readableState.objectMode=!0,new Q(e).parse({on:(e,n)=>{switch(e){case"data":t=n;break;case"end":r=n}}},((e,t)=>{e&&this.emit("error",e)||t&&this.push(t)}),((e,t)=>{this.emit("prefix",e,t)})),this._transform=(e,r,n)=>{t(e),n()},this._flush=e=>{r(),e()}}import(e){return e.on("data",(e=>{this.write(e)})),e.on("end",(()=>{this.end()})),e.on("error",(e=>{this.emit("error",e)})),this}}class he extends ae.Transform{constructor(e){super({encoding:"utf8",writableObjectMode:!0});const t=this._writer=new ne({write:(e,t,r)=>{this.push(e),r&&r()},end:e=>{this.push(null),e&&e()}},e);this._transform=(e,r,n)=>{t.addQuad(e,n)},this._flush=e=>{t.end(e)}}import(e){return e.on("data",(e=>{this.write(e)})),e.on("end",(()=>{this.end()})),e.on("error",(e=>{this.emit("error",e)})),e.on("prefix",((e,t)=>{this._writer.addPrefix(e,t)})),this}}const fe={Lexer:g,Parser:Q,Writer:ne,Store:se,StreamParser:ce,StreamWriter:he,Util:n,DataFactory:P,Term:D,NamedNode:F,Literal:C,BlankNode:L,Variable:M,DefaultGraph:B,Quad:q,Triple:q,termFromId:$,termToId:U}},4244:e=>{"use strict";var t=function(e){return e!=e};e.exports=function(e,r){return 0===e&&0===r?1/e==1/r:e===r||!(!t(e)||!t(r))}},609:(e,t,r)=>{"use strict";var n=r(4289),i=r(5559),o=r(4244),a=r(5624),s=r(2281),l=i(a(),Object);n(l,{getPolyfill:a,implementation:o,shim:s}),e.exports=l},5624:(e,t,r)=>{"use strict";var n=r(4244);e.exports=function(){return"function"==typeof Object.is?Object.is:n}},2281:(e,t,r)=>{"use strict";var n=r(5624),i=r(4289);e.exports=function(){var e=n();return i(Object,{is:e},{is:function(){return Object.is!==e}}),e}},8987:(e,t,r)=>{"use strict";var n;if(!Object.keys){var i=Object.prototype.hasOwnProperty,o=Object.prototype.toString,a=r(1414),s=Object.prototype.propertyIsEnumerable,l=!s.call({toString:null},"toString"),u=s.call((function(){}),"prototype"),c=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],h=function(e){var t=e.constructor;return t&&t.prototype===e},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},d=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&i.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{h(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();n=function(e){var t=null!==e&&"object"==typeof e,r="[object Function]"===o.call(e),n=a(e),s=t&&"[object String]"===o.call(e),f=[];if(!t&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var p=u&&r;if(s&&e.length>0&&!i.call(e,0))for(var b=0;b<e.length;++b)f.push(String(b));if(n&&e.length>0)for(var y=0;y<e.length;++y)f.push(String(y));else for(var g in e)p&&"prototype"===g||!i.call(e,g)||f.push(String(g));if(l)for(var _=function(e){if("undefined"==typeof window||!d)return h(e);try{return h(e)}catch(e){return!1}}(e),m=0;m<c.length;++m)_&&"constructor"===c[m]||!i.call(e,c[m])||f.push(c[m]);return f}}e.exports=n},2215:(e,t,r)=>{"use strict";var n=Array.prototype.slice,i=r(1414),o=Object.keys,a=o?function(e){return o(e)}:r(8987),s=Object.keys;a.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return i(e)?s(n.call(e)):s(e)})}else Object.keys=a;return Object.keys||a},e.exports=a},1414:e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var r=t.call(e),n="[object Arguments]"===r;return n||(n="[object Array]"!==r&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),n}},4155:e=>{var t,r,n=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var s,l=[],u=!1,c=-1;function h(){u&&s&&(u=!1,s.length?l=s.concat(l):c=-1,l.length&&f())}function f(){if(!u){var e=a(h);u=!0;for(var t=l.length;t;){for(s=l,l=[];++c<t;)s&&s[c].run();c=-1,t=l.length}s=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function p(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new d(e,t)),1!==l.length||u||a(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},9306:(e,t,r)=>{!function(){var t;t="object"==typeof window&&window?window:r.g,e.exports?e.exports=t.Promise?t.Promise:a:t.Promise||(t.Promise=a);var n=t.setImmediate||function(e){setTimeout(e,1)};function i(e,t){return function(){e.apply(t,arguments)}}var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function a(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=null,this._value=null,this._deferreds=[],f(e,i(l,this),i(u,this))}function s(e){var t=this;null!==this._state?n((function(){var r=t._state?e.onFulfilled:e.onRejected;if(null!==r){var n;try{n=r(t._value)}catch(t){return void e.reject(t)}e.resolve(n)}else(t._state?e.resolve:e.reject)(t._value)})):this._deferreds.push(e)}function l(e){try{if(e===this)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var t=e.then;if("function"==typeof t)return void f(i(t,e),i(l,this),i(u,this))}this._state=!0,this._value=e,c.call(this)}catch(e){u.call(this,e)}}function u(e){this._state=!1,this._value=e,c.call(this)}function c(){for(var e=0,t=this._deferreds.length;e<t;e++)s.call(this,this._deferreds[e]);this._deferreds=null}function h(e,t,r,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=r,this.reject=n}function f(e,t,r){var n=!1;try{e((function(e){n||(n=!0,t(e))}),(function(e){n||(n=!0,r(e))}))}catch(e){if(n)return;n=!0,r(e)}}a.prototype.catch=function(e){return this.then(null,e)},a.prototype.then=function(e,t){var r=this;return new a((function(n,i){s.call(r,new h(e,t,n,i))}))},a.all=function(){var e=Array.prototype.slice.call(1===arguments.length&&o(arguments[0])?arguments[0]:arguments);return new a((function(t,r){if(0===e.length)return t([]);var n=e.length;function i(o,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,(function(e){i(o,e)}),r)}e[o]=a,0==--n&&t(e)}catch(e){r(e)}}for(var o=0;o<e.length;o++)i(o,e[o])}))},a.resolve=function(e){return e&&"object"==typeof e&&e.constructor===a?e:new a((function(t){t(e)}))},a.reject=function(e){return new a((function(t,r){r(e)}))},a.race=function(e){return new a((function(t,r){for(var n=0,i=e.length;n<i;n++)e[n].then(t,r)}))}}()},4375:(e,t,r)=>{let n;e.exports="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:r.g):e=>(n||(n=Promise.resolve())).then(e).catch((e=>setTimeout((()=>{throw e}),0)))},1640:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r(7970),t),i(r(7498),t),i(r(6381),t),i(r(2808),t),i(r(2016),t),i(r(3387),t),i(r(1573),t)},7970:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlankNode=void 0,t.BlankNode=class{constructor(e){this.termType="BlankNode",this.value=e}equals(e){return!!e&&"BlankNode"===e.termType&&e.value===this.value}}},7498:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataFactory=void 0;const n=r(7970),i=r(6381),o=r(2808),a=r(2016),s=r(3387),l=r(1573);let u=0;t.DataFactory=class{constructor(e){this.blankNodeCounter=0,e=e||{},this.blankNodePrefix=e.blankNodePrefix||`df_${u++}_`}namedNode(e){return new a.NamedNode(e)}blankNode(e){return new n.BlankNode(e||`${this.blankNodePrefix}${this.blankNodeCounter++}`)}literal(e,t){return new o.Literal(e,t)}variable(e){return new l.Variable(e)}defaultGraph(){return i.DefaultGraph.INSTANCE}quad(e,t,r,n){return new s.Quad(e,t,r,n||this.defaultGraph())}fromTerm(e){switch(e.termType){case"NamedNode":return this.namedNode(e.value);case"BlankNode":return this.blankNode(e.value);case"Literal":return e.language?this.literal(e.value,e.language):e.datatype.equals(o.Literal.XSD_STRING)?this.literal(e.value):this.literal(e.value,this.fromTerm(e.datatype));case"Variable":return this.variable(e.value);case"DefaultGraph":return this.defaultGraph();case"Quad":return this.quad(this.fromTerm(e.subject),this.fromTerm(e.predicate),this.fromTerm(e.object),this.fromTerm(e.graph))}}fromQuad(e){return this.fromTerm(e)}resetBlankNodeCounter(){this.blankNodeCounter=0}}},6381:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultGraph=void 0;class r{constructor(){this.termType="DefaultGraph",this.value=""}equals(e){return!!e&&"DefaultGraph"===e.termType}}t.DefaultGraph=r,r.INSTANCE=new r},2808:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Literal=void 0;const n=r(2016);class i{constructor(e,t){this.termType="Literal",this.value=e,"string"==typeof t?(this.language=t,this.datatype=i.RDF_LANGUAGE_STRING):t?(this.language="",this.datatype=t):(this.language="",this.datatype=i.XSD_STRING)}equals(e){return!!e&&"Literal"===e.termType&&e.value===this.value&&e.language===this.language&&e.datatype.equals(this.datatype)}}t.Literal=i,i.RDF_LANGUAGE_STRING=new n.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"),i.XSD_STRING=new n.NamedNode("http://www.w3.org/2001/XMLSchema#string")},2016:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NamedNode=void 0,t.NamedNode=class{constructor(e){this.termType="NamedNode",this.value=e}equals(e){return!!e&&"NamedNode"===e.termType&&e.value===this.value}}},3387:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Quad=void 0,t.Quad=class{constructor(e,t,r,n){this.termType="Quad",this.value="",this.subject=e,this.predicate=t,this.object=r,this.graph=n}equals(e){return!!e&&("Quad"===e.termType||!e.termType)&&this.subject.equals(e.subject)&&this.predicate.equals(e.predicate)&&this.object.equals(e.object)&&this.graph.equals(e.graph)}}},1573:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Variable=void 0,t.Variable=class{constructor(e){this.termType="Variable",this.value=e}equals(e){return!!e&&"Variable"===e.termType&&e.value===this.value}}},4281:e=>{"use strict";var t={};function r(e,r,n){n||(n=Error);var i=function(e){var t,n;function i(t,n,i){return e.call(this,function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(t,n,i))||this}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=e,t[e]=i}function n(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}r("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(e,t,r){var i,o,a,s,l;if("string"==typeof t&&(o="not ",t.substr(0,o.length)===o)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}(e," argument"))a="The ".concat(e," ").concat(i," ").concat(n(t,"type"));else{var u=("number"!=typeof l&&(l=0),l+".".length>(s=e).length||-1===s.indexOf(".",l)?"argument":"property");a='The "'.concat(e,'" ').concat(u," ").concat(i," ").concat(n(t,"type"))}return a+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.q=t},6753:(e,t,r)=>{"use strict";var n=r(4155),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=c;var o=r(9481),a=r(4229);r(5717)(c,o);for(var s=i(a.prototype),l=0;l<s.length;l++){var u=s[l];c.prototype[u]||(c.prototype[u]=a.prototype[u])}function c(e){if(!(this instanceof c))return new c(e);o.call(this,e),a.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",h)))}function h(){this._writableState.ended||n.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(c.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(c.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(c.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(c.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},2725:(e,t,r)=>{"use strict";e.exports=i;var n=r(4605);function i(e){if(!(this instanceof i))return new i(e);n.call(this,e)}r(5717)(i,n),i.prototype._transform=function(e,t,r){r(null,e)}},9481:(e,t,r)=>{"use strict";var n,i=r(4155);e.exports=A,A.ReadableState=R,r(7187).EventEmitter;var o,a=function(e,t){return e.listeners(t).length},s=r(2503),l=r(8764).Buffer,u=r.g.Uint8Array||function(){},c=r(4616);o=c&&c.debuglog?c.debuglog("stream"):function(){};var h,f,d,p=r(7327),b=r(1195),y=r(2457).getHighWaterMark,g=r(4281).q,_=g.ERR_INVALID_ARG_TYPE,m=g.ERR_STREAM_PUSH_AFTER_EOF,w=g.ERR_METHOD_NOT_IMPLEMENTED,v=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(A,s);var E=b.errorOrDestroy,S=["error","close","destroy","pause","resume"];function R(e,t,i){n=n||r(6753),e=e||{},"boolean"!=typeof i&&(i=t instanceof n),this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=y(this,e,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(h||(h=r(2553).StringDecoder),this.decoder=new h(e.encoding),this.encoding=e.encoding)}function A(e){if(n=n||r(6753),!(this instanceof A))return new A(e);var t=this instanceof n;this._readableState=new R(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),s.call(this)}function T(e,t,r,n,i){o("readableAddChunk",t);var a,s=e._readableState;if(null===t)s.reading=!1,function(e,t){if(o("onEofChunk"),!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,t.sync?O(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,I(e)))}}(e,s);else if(i||(a=function(e,t){var r,n;return n=t,l.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(r=new _("chunk",["string","Buffer","Uint8Array"],t)),r}(s,t)),a)E(e,a);else if(s.objectMode||t&&t.length>0)if("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===l.prototype||(t=function(e){return l.from(e)}(t)),n)s.endEmitted?E(e,new v):x(e,s,t,!0);else if(s.ended)E(e,new m);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(t=s.decoder.write(t),s.objectMode||0!==t.length?x(e,s,t,!1):j(e,s)):x(e,s,t,!1)}else n||(s.reading=!1,j(e,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function x(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&O(e)),j(e,t)}Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),A.prototype.destroy=b.destroy,A.prototype._undestroy=b.undestroy,A.prototype._destroy=function(e,t){t(e)},A.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=l.from(e,t),t=""),r=!0),T(this,e,t,!1,r)},A.prototype.unshift=function(e){return T(this,e,null,!0,!1)},A.prototype.isPaused=function(){return!1===this._readableState.flowing},A.prototype.setEncoding=function(e){h||(h=r(2553).StringDecoder);var t=new h(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var k=1073741824;function N(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=k?e=k:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function O(e){var t=e._readableState;o("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(o("emitReadable",t.flowing),t.emittedReadable=!0,i.nextTick(I,e))}function I(e){var t=e._readableState;o("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,L(e)}function j(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(P,e,t))}function P(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var r=t.length;if(o("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function D(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function F(e){o("readable nexttick read 0"),e.read(0)}function C(e,t){o("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),L(e),t.flowing&&!t.reading&&e.read(0)}function L(e){var t=e._readableState;for(o("flow",t.flowing);t.flowing&&null!==e.read(););}function M(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function B(e){var t=e._readableState;o("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,i.nextTick($,t,e))}function $(e,t){if(o("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var r=t._writableState;(!r||r.autoDestroy&&r.finished)&&t.destroy()}}function U(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}A.prototype.read=function(e){o("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return o("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?B(this):O(this),null;if(0===(e=N(e,t))&&t.ended)return 0===t.length&&B(this),null;var n,i=t.needReadable;return o("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&o("length less than watermark",i=!0),t.ended||t.reading?o("reading or ended",i=!1):i&&(o("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=N(r,t))),null===(n=e>0?M(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&B(this)),null!==n&&this.emit("data",n),n},A.prototype._read=function(e){E(this,new w("_read()"))},A.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,t);var s=t&&!1===t.end||e===i.stdout||e===i.stderr?b:l;function l(){o("onend"),e.end()}n.endEmitted?i.nextTick(s):r.once("end",s),e.on("unpipe",(function t(i,a){o("onunpipe"),i===r&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,o("cleanup"),e.removeListener("close",d),e.removeListener("finish",p),e.removeListener("drain",u),e.removeListener("error",f),e.removeListener("unpipe",t),r.removeListener("end",l),r.removeListener("end",b),r.removeListener("data",h),c=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||u())}));var u=function(e){return function(){var t=e._readableState;o("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,L(e))}}(r);e.on("drain",u);var c=!1;function h(t){o("ondata");var i=e.write(t);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==U(n.pipes,e))&&!c&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function f(t){o("onerror",t),b(),e.removeListener("error",f),0===a(e,"error")&&E(e,t)}function d(){e.removeListener("finish",p),b()}function p(){o("onfinish"),e.removeListener("close",d),b()}function b(){o("unpipe"),r.unpipe(e)}return r.on("data",h),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events.error?Array.isArray(e._events.error)?e._events.error.unshift(r):e._events.error=[r,e._events.error]:e.on(t,r)}(e,"error",f),e.once("close",d),e.once("finish",p),e.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),e},A.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var a=U(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},A.prototype.on=function(e,t){var r=s.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?O(this):n.reading||i.nextTick(F,this))),r},A.prototype.addListener=A.prototype.on,A.prototype.removeListener=function(e,t){var r=s.prototype.removeListener.call(this,e,t);return"readable"===e&&i.nextTick(D,this),r},A.prototype.removeAllListeners=function(e){var t=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||i.nextTick(D,this),t},A.prototype.resume=function(){var e=this._readableState;return e.flowing||(o("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(C,e,t))}(this,e)),e.paused=!1,this},A.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},A.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var a=0;a<S.length;a++)e.on(S[a],this.emit.bind(this,S[a]));return this._read=function(t){o("wrapped _read",t),n&&(n=!1,e.resume())},this},"function"==typeof Symbol&&(A.prototype[Symbol.asyncIterator]=function(){return void 0===f&&(f=r(5850)),f(this)}),Object.defineProperty(A.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(A.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(A.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),A._fromList=M,Object.defineProperty(A.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(A.from=function(e,t){return void 0===d&&(d=r(5167)),d(A,e,t)})},4605:(e,t,r)=>{"use strict";e.exports=c;var n=r(4281).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,a=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0,l=r(6753);function u(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function c(e){if(!(this instanceof c))return new c(e);l.call(this,e),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",h)}function h(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?f(this,null,null):this._flush((function(t,r){f(e,t,r)}))}function f(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new s;if(e._transformState.transforming)throw new a;return e.push(null)}r(5717)(c,l),c.prototype.push=function(e,t){return this._transformState.needTransform=!1,l.prototype.push.call(this,e,t)},c.prototype._transform=function(e,t,r){r(new i("_transform()"))},c.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},c.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},c.prototype._destroy=function(e,t){l.prototype._destroy.call(this,e,(function(e){t(e)}))}},4229:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(undefined),n=n.next}t.corkedRequestsFree.next=e}(t,e)}}e.exports=A,A.WritableState=R;var a,s={deprecate:r(4927)},l=r(2503),u=r(8764).Buffer,c=r.g.Uint8Array||function(){},h=r(1195),f=r(2457).getHighWaterMark,d=r(4281).q,p=d.ERR_INVALID_ARG_TYPE,b=d.ERR_METHOD_NOT_IMPLEMENTED,y=d.ERR_MULTIPLE_CALLBACK,g=d.ERR_STREAM_CANNOT_PIPE,_=d.ERR_STREAM_DESTROYED,m=d.ERR_STREAM_NULL_VALUES,w=d.ERR_STREAM_WRITE_AFTER_END,v=d.ERR_UNKNOWN_ENCODING,E=h.errorOrDestroy;function S(){}function R(e,t,a){n=n||r(6753),e=e||{},"boolean"!=typeof a&&(a=t instanceof n),this.objectMode=!!e.objectMode,a&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=f(this,e,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===e.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new y;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(i.nextTick(o,n),i.nextTick(I,e,t),e._writableState.errorEmitted=!0,E(e,n)):(o(n),e._writableState.errorEmitted=!0,E(e,n),I(e,t))}(e,r,n,t,o);else{var a=N(r)||e.destroyed;a||r.corked||r.bufferProcessing||!r.bufferedRequest||k(e,r),n?i.nextTick(x,e,r,a,o):x(e,r,a,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function A(e){var t=this instanceof(n=n||r(6753));if(!t&&!a.call(A,this))return new A(e);this._writableState=new R(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),l.call(this)}function T(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new _("write")):r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function x(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),I(e,t)}function k(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),a=t.corkedRequestsFree;a.entry=r;for(var s=0,l=!0;r;)i[s]=r,r.isBuf||(l=!1),r=r.next,s+=1;i.allBuffers=l,T(e,t,!0,t.length,i,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,c=r.encoding,h=r.callback;if(T(e,t,!1,t.objectMode?1:u.length,u,c,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function N(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function O(e,t){e._final((function(r){t.pendingcb--,r&&E(e,r),t.prefinished=!0,e.emit("prefinish"),I(e,t)}))}function I(e,t){var r=N(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,i.nextTick(O,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}r(5717)(A,l),R.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(R.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(A,Symbol.hasInstance,{value:function(e){return!!a.call(this,e)||this===A&&e&&e._writableState instanceof R}})):a=function(e){return e instanceof this},A.prototype.pipe=function(){E(this,new g)},A.prototype.write=function(e,t,r){var n,o=this._writableState,a=!1,s=!o.objectMode&&(n=e,u.isBuffer(n)||n instanceof c);return s&&!u.isBuffer(e)&&(e=function(e){return u.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=S),o.ending?function(e,t){var r=new w;E(e,r),i.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var o;return null===r?o=new m:"string"==typeof r||t.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(E(e,o),i.nextTick(n,o),!1)}(this,o,e,r))&&(o.pendingcb++,a=function(e,t,r,n,i,o){if(!r){var a=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=u.from(t,r)),t}(t,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=t.objectMode?1:n.length;t.length+=s;var l=t.length<t.highWaterMark;if(l||(t.needDrain=!0),t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else T(e,t,!1,s,n,i,o);return l}(this,o,s,e,t,r)),a},A.prototype.cork=function(){this._writableState.corked++},A.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||k(this,e))},A.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new v(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(A.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(A.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),A.prototype._write=function(e,t,r){r(new b("_write()"))},A.prototype._writev=null,A.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,I(e,t),r&&(t.finished?i.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(A.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),A.prototype.destroy=h.destroy,A.prototype._undestroy=h.undestroy,A.prototype._destroy=function(e,t){t(e)}},5850:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var a=r(8610),s=Symbol("lastResolve"),l=Symbol("lastReject"),u=Symbol("error"),c=Symbol("ended"),h=Symbol("lastPromise"),f=Symbol("handlePromise"),d=Symbol("stream");function p(e,t){return{value:e,done:t}}function b(e){var t=e[s];if(null!==t){var r=e[d].read();null!==r&&(e[h]=null,e[s]=null,e[l]=null,t(p(r,!1)))}}function y(e){i.nextTick(b,e)}var g=Object.getPrototypeOf((function(){})),_=Object.setPrototypeOf((o(n={get stream(){return this[d]},next:function(){var e=this,t=this[u];if(null!==t)return Promise.reject(t);if(this[c])return Promise.resolve(p(void 0,!0));if(this[d].destroyed)return new Promise((function(t,r){i.nextTick((function(){e[u]?r(e[u]):t(p(void 0,!0))}))}));var r,n=this[h];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[c]?r(p(void 0,!0)):t[f](r,n)}),n)}}(n,this));else{var o=this[d].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[f])}return this[h]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var e=this;return new Promise((function(t,r){e[d].destroy(null,(function(e){e?r(e):t(p(void 0,!0))}))}))})),n),g);e.exports=function(e){var t,r=Object.create(_,(o(t={},d,{value:e,writable:!0}),o(t,s,{value:null,writable:!0}),o(t,l,{value:null,writable:!0}),o(t,u,{value:null,writable:!0}),o(t,c,{value:e._readableState.endEmitted,writable:!0}),o(t,f,{value:function(e,t){var n=r[d].read();n?(r[h]=null,r[s]=null,r[l]=null,e(p(n,!1))):(r[s]=e,r[l]=t)},writable:!0}),t));return r[h]=null,a(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=r[l];return null!==t&&(r[h]=null,r[s]=null,r[l]=null,t(e)),void(r[u]=e)}var n=r[s];null!==n&&(r[h]=null,r[s]=null,r[l]=null,n(p(void 0,!0))),r[c]=!0})),e.on("readable",y.bind(null,r)),r}},7327:(e,t,r)=>{"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=r(8764).Buffer,s=r(2361).inspect,l=s&&s.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,r;return t=e,r=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return a.alloc(0);for(var t,r,n,i=a.allocUnsafe(e>>>0),o=this.head,s=0;o;)t=o.data,r=i,n=s,a.prototype.copy.call(t,r,n),s+=o.data.length,o=o.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var i=t.data,o=e>i.length?i.length:e;if(o===i.length?n+=i:n+=i.slice(0,e),0==(e-=o)){o===i.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=a.allocUnsafe(e),r=this.head,n=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,o=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,o),0==(e-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,t}},{key:l,value:function(e,t){return s(this,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}],r&&o(t.prototype,r),e}()},1195:(e,t,r)=>{"use strict";var n=r(4155);function i(e,t){a(e,t),o(e)}function o(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function a(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,s=this._readableState&&this._readableState.destroyed,l=this._writableState&&this._writableState.destroyed;return s||l?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(a,this,e)):n.nextTick(a,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,e)):n.nextTick(i,r,e):t?(n.nextTick(o,r),t(e)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}},8610:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function e(t,r,o){if("function"==typeof r)return e(t,null,r);r||(r={}),o=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];e.apply(this,n)}}}(o||i);var a=r.readable||!1!==r.readable&&t.readable,s=r.writable||!1!==r.writable&&t.writable,l=function(){t.writable||c()},u=t._writableState&&t._writableState.finished,c=function(){s=!1,u=!0,a||o.call(t)},h=t._readableState&&t._readableState.endEmitted,f=function(){a=!1,h=!0,s||o.call(t)},d=function(e){o.call(t,e)},p=function(){var e;return a&&!h?(t._readableState&&t._readableState.ended||(e=new n),o.call(t,e)):s&&!u?(t._writableState&&t._writableState.ended||(e=new n),o.call(t,e)):void 0},b=function(){t.req.on("finish",c)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",c),t.on("abort",p),t.req?b():t.on("request",b)):s&&!t._writableState&&(t.on("end",l),t.on("close",l)),t.on("end",f),t.on("finish",c),!1!==r.error&&t.on("error",d),t.on("close",p),function(){t.removeListener("complete",c),t.removeListener("abort",p),t.removeListener("request",b),t.req&&t.req.removeListener("finish",c),t.removeListener("end",l),t.removeListener("close",l),t.removeListener("finish",c),t.removeListener("end",f),t.removeListener("error",d),t.removeListener("close",p)}}},5167:e=>{e.exports=function(){throw new Error("Readable.from is not available in the browser")}},9946:(e,t,r)=>{"use strict";var n,i=r(4281).q,o=i.ERR_MISSING_ARGS,a=i.ERR_STREAM_DESTROYED;function s(e){if(e)throw e}function l(e,t,i,o){o=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(o);var s=!1;e.on("close",(function(){s=!0})),void 0===n&&(n=r(8610)),n(e,{readable:t,writable:i},(function(e){if(e)return o(e);s=!0,o()}));var l=!1;return function(t){if(!s&&!l)return l=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new a("pipe"))}}function u(e){e()}function c(e,t){return e.pipe(t)}function h(e){return e.length?"function"!=typeof e[e.length-1]?s:e.pop():s}e.exports=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n,i=h(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new o("streams");var a=t.map((function(e,r){var o=r<t.length-1;return l(e,o,r>0,(function(e){n||(n=e),e&&a.forEach(u),o||(a.forEach(u),i(n))}))}));return t.reduce(c)}},2457:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,r,i){var o=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return e.objectMode?16:16384}}},2503:(e,t,r)=>{e.exports=r(7187).EventEmitter},8473:(e,t,r)=>{(t=e.exports=r(9481)).Stream=t,t.Readable=t,t.Writable=r(4229),t.Duplex=r(6753),t.Transform=r(4605),t.PassThrough=r(2725),t.finished=r(8610),t.pipeline=r(9946)},8090:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ReadableWebToNodeStream=void 0;const n=r(8473);class i extends n.Readable{constructor(e){super(),this.bytesRead=0,this.released=!1,this.reader=e.getReader()}async _read(){if(this.released)return void this.push(null);this.pendingRead=this.reader.read();const e=await this.pendingRead;delete this.pendingRead,e.done||this.released?this.push(null):(this.bytesRead+=e.value.length,this.push(e.value))}async waitForReadToComplete(){this.pendingRead&&await this.pendingRead}async close(){await this.syncAndRelease()}async syncAndRelease(){this.released=!0,await this.waitForReadToComplete(),await this.reader.releaseLock()}}t.ReadableWebToNodeStream=i},9509:(e,t,r)=>{var n=r(8764),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},2208:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SaxesParser=t.EVENTS=void 0;const n=r(3347),i=r(5285),o=r(7046);var a=n.isS,s=n.isChar,l=n.isNameStartChar,u=n.isNameChar,c=n.S_LIST,h=n.NAME_RE,f=i.isChar,d=o.isNCNameStartChar,p=o.isNCNameChar,b=o.NC_NAME_RE;const y="http://www.w3.org/XML/1998/namespace",g="http://www.w3.org/2000/xmlns/",_={__proto__:null,xml:y,xmlns:g},m={__proto__:null,amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},w=-1,v=-2,E=13,S=33,R=10,A=60,T=61,x=62,k=63,N=93,O=e=>34===e||39===e,I=[34,39],j=[...I,91,x],P=[...I,A,N],D=[T,k,...c],F=[...c,x,38,A];function C(e,t,r){switch(t){case"xml":r!==y&&e.fail(`xml prefix must be bound to ${y}.`);break;case"xmlns":r!==g&&e.fail(`xmlns prefix must be bound to ${g}.`)}switch(r){case g:e.fail(""===t?`the default namespace may not be set to ${r}.`:`may not assign a prefix (even "xmlns") to the URI ${g}.`);break;case y:switch(t){case"xml":break;case"":e.fail(`the default namespace may not be set to ${r}.`);break;default:e.fail("may not assign the xml namespace to another prefix.")}}}const L=e=>b.test(e),M=e=>h.test(e);t.EVENTS=["xmldecl","text","processinginstruction","doctype","comment","opentagstart","attribute","opentag","closetag","cdata","error","end","ready"];const B={xmldecl:"xmldeclHandler",text:"textHandler",processinginstruction:"piHandler",doctype:"doctypeHandler",comment:"commentHandler",opentagstart:"openTagStartHandler",attribute:"attributeHandler",opentag:"openTagHandler",closetag:"closeTagHandler",cdata:"cdataHandler",error:"errorHandler",end:"endHandler",ready:"readyHandler"};t.SaxesParser=class{constructor(e){this.opt=null!=e?e:{},this.fragmentOpt=!!this.opt.fragment;const t=this.xmlnsOpt=!!this.opt.xmlns;if(this.trackPosition=!1!==this.opt.position,this.fileName=this.opt.fileName,t){this.nameStartCheck=d,this.nameCheck=p,this.isName=L,this.processAttribs=this.processAttribsNS,this.pushAttrib=this.pushAttribNS,this.ns=Object.assign({__proto__:null},_);const e=this.opt.additionalNamespaces;null!=e&&(function(e,t){for(const r of Object.keys(t))C(e,r,t[r])}(this,e),Object.assign(this.ns,e))}else this.nameStartCheck=l,this.nameCheck=u,this.isName=M,this.processAttribs=this.processAttribsPlain,this.pushAttrib=this.pushAttribPlain;this.stateTable=[this.sBegin,this.sBeginWhitespace,this.sDoctype,this.sDoctypeQuote,this.sDTD,this.sDTDQuoted,this.sDTDOpenWaka,this.sDTDOpenWakaBang,this.sDTDComment,this.sDTDCommentEnding,this.sDTDCommentEnded,this.sDTDPI,this.sDTDPIEnding,this.sText,this.sEntity,this.sOpenWaka,this.sOpenWakaBang,this.sComment,this.sCommentEnding,this.sCommentEnded,this.sCData,this.sCDataEnding,this.sCDataEnding2,this.sPIFirstChar,this.sPIRest,this.sPIBody,this.sPIEnding,this.sXMLDeclNameStart,this.sXMLDeclName,this.sXMLDeclEq,this.sXMLDeclValueStart,this.sXMLDeclValue,this.sXMLDeclSeparator,this.sXMLDeclEnding,this.sOpenTag,this.sOpenTagSlash,this.sAttrib,this.sAttribName,this.sAttribNameSawWhite,this.sAttribValue,this.sAttribValueQuoted,this.sAttribValueClosed,this.sAttribValueUnquoted,this.sCloseTag,this.sCloseTagSawWhite],this._init()}get closed(){return this._closed}_init(){var e;this.openWakaBang="",this.text="",this.name="",this.piTarget="",this.entity="",this.q=null,this.tags=[],this.tag=null,this.topNS=null,this.chunk="",this.chunkPosition=0,this.i=0,this.prevI=0,this.carriedFromPrevious=void 0,this.forbiddenState=0,this.attribList=[];const{fragmentOpt:t}=this;this.state=t?E:0,this.reportedTextBeforeRoot=this.reportedTextAfterRoot=this.closedRoot=this.sawRoot=t,this.xmlDeclPossible=!t,this.xmlDeclExpects=["version"],this.entityReturnState=void 0;let{defaultXMLVersion:r}=this.opt;if(void 0===r){if(!0===this.opt.forceXMLVersion)throw new Error("forceXMLVersion set but defaultXMLVersion is not set");r="1.0"}this.setXMLVersion(r),this.positionAtNewLine=0,this.doctype=!1,this._closed=!1,this.xmlDecl={version:void 0,encoding:void 0,standalone:void 0},this.line=1,this.column=0,this.ENTITIES=Object.create(m),null===(e=this.readyHandler)||void 0===e||e.call(this)}get position(){return this.chunkPosition+this.i}get columnIndex(){return this.position-this.positionAtNewLine}on(e,t){this[B[e]]=t}off(e){this[B[e]]=void 0}makeError(e){var t;let r=null!==(t=this.fileName)&&void 0!==t?t:"";return this.trackPosition&&(r.length>0&&(r+=":"),r+=`${this.line}:${this.column}`),r.length>0&&(r+=": "),new Error(r+e)}fail(e){const t=this.makeError(e),r=this.errorHandler;if(void 0===r)throw t;return r(t),this}write(e){if(this.closed)return this.fail("cannot write after close; assign an onready handler.");let t=!1;null===e?(t=!0,e=""):"object"==typeof e&&(e=e.toString()),void 0!==this.carriedFromPrevious&&(e=`${this.carriedFromPrevious}${e}`,this.carriedFromPrevious=void 0);let r=e.length;const n=e.charCodeAt(r-1);!t&&(13===n||n>=55296&&n<=56319)&&(this.carriedFromPrevious=e[r-1],r--,e=e.slice(0,r));const{stateTable:i}=this;for(this.chunk=e,this.i=0;this.i<r;)i[this.state].call(this);return this.chunkPosition+=r,t?this.end():this}close(){return this.write(null)}getCode10(){const{chunk:e,i:t}=this;if(this.prevI=t,this.i=t+1,t>=e.length)return w;const r=e.charCodeAt(t);if(this.column++,r<55296){if(r>=32||9===r)return r;switch(r){case R:return this.line++,this.column=0,this.positionAtNewLine=this.position,R;case 13:return e.charCodeAt(t+1)===R&&(this.i=t+2),this.line++,this.column=0,this.positionAtNewLine=this.position,v;default:return this.fail("disallowed character."),r}}if(r>56319)return r>=57344&&r<=65533||this.fail("disallowed character."),r;const n=65536+1024*(r-55296)+(e.charCodeAt(t+1)-56320);return this.i=t+2,n>1114111&&this.fail("disallowed character."),n}getCode11(){const{chunk:e,i:t}=this;if(this.prevI=t,this.i=t+1,t>=e.length)return w;const r=e.charCodeAt(t);if(this.column++,r<55296){if(r>31&&r<127||r>159&&8232!==r||9===r)return r;switch(r){case R:return this.line++,this.column=0,this.positionAtNewLine=this.position,R;case 13:{const r=e.charCodeAt(t+1);r!==R&&133!==r||(this.i=t+2)}case 133:case 8232:return this.line++,this.column=0,this.positionAtNewLine=this.position,v;default:return this.fail("disallowed character."),r}}if(r>56319)return r>=57344&&r<=65533||this.fail("disallowed character."),r;const n=65536+1024*(r-55296)+(e.charCodeAt(t+1)-56320);return this.i=t+2,n>1114111&&this.fail("disallowed character."),n}getCodeNorm(){const e=this.getCode();return e===v?R:e}unget(){this.i=this.prevI,this.column--}captureTo(e){let{i:t}=this;const{chunk:r}=this;for(;;){const n=this.getCode(),i=n===v,o=i?R:n;if(o===w||e.includes(o))return this.text+=r.slice(t,this.prevI),o;i&&(this.text+=`${r.slice(t,this.prevI)}\n`,t=this.i)}}captureToChar(e){let{i:t}=this;const{chunk:r}=this;for(;;){let n=this.getCode();switch(n){case v:this.text+=`${r.slice(t,this.prevI)}\n`,t=this.i,n=R;break;case w:return this.text+=r.slice(t),!1}if(n===e)return this.text+=r.slice(t,this.prevI),!0}}captureNameChars(){const{chunk:e,i:t}=this;for(;;){const r=this.getCode();if(r===w)return this.name+=e.slice(t),w;if(!u(r))return this.name+=e.slice(t,this.prevI),r===v?R:r}}skipSpaces(){for(;;){const e=this.getCodeNorm();if(e===w||!a(e))return e}}setXMLVersion(e){this.currentXMLVersion=e,"1.0"===e?(this.isChar=s,this.getCode=this.getCode10):(this.isChar=f,this.getCode=this.getCode11)}sBegin(){65279===this.chunk.charCodeAt(0)&&(this.i++,this.column++),this.state=1}sBeginWhitespace(){const e=this.i,t=this.skipSpaces();switch(this.prevI!==e&&(this.xmlDeclPossible=!1),t){case A:if(this.state=15,0!==this.text.length)throw new Error("no-empty text at start");break;case w:break;default:this.unget(),this.state=E,this.xmlDeclPossible=!1}}sDoctype(){var e;const t=this.captureTo(j);switch(t){case x:null===(e=this.doctypeHandler)||void 0===e||e.call(this,this.text),this.text="",this.state=E,this.doctype=!0;break;case w:break;default:this.text+=String.fromCodePoint(t),91===t?this.state=4:O(t)&&(this.state=3,this.q=t)}}sDoctypeQuote(){const e=this.q;this.captureToChar(e)&&(this.text+=String.fromCodePoint(e),this.q=null,this.state=2)}sDTD(){const e=this.captureTo(P);e!==w&&(this.text+=String.fromCodePoint(e),e===N?this.state=2:e===A?this.state=6:O(e)&&(this.state=5,this.q=e))}sDTDQuoted(){const e=this.q;this.captureToChar(e)&&(this.text+=String.fromCodePoint(e),this.state=4,this.q=null)}sDTDOpenWaka(){const e=this.getCodeNorm();switch(this.text+=String.fromCodePoint(e),e){case 33:this.state=7,this.openWakaBang="";break;case k:this.state=11;break;default:this.state=4}}sDTDOpenWakaBang(){const e=String.fromCodePoint(this.getCodeNorm()),t=this.openWakaBang+=e;this.text+=e,"-"!==t&&(this.state="--"===t?8:4,this.openWakaBang="")}sDTDComment(){this.captureToChar(45)&&(this.text+="-",this.state=9)}sDTDCommentEnding(){const e=this.getCodeNorm();this.text+=String.fromCodePoint(e),this.state=45===e?10:8}sDTDCommentEnded(){const e=this.getCodeNorm();this.text+=String.fromCodePoint(e),e===x?this.state=4:(this.fail("malformed comment."),this.state=8)}sDTDPI(){this.captureToChar(k)&&(this.text+="?",this.state=12)}sDTDPIEnding(){const e=this.getCodeNorm();this.text+=String.fromCodePoint(e),e===x&&(this.state=4)}sText(){0!==this.tags.length?this.handleTextInRoot():this.handleTextOutsideRoot()}sEntity(){let{i:e}=this;const{chunk:t}=this;e:for(;;)switch(this.getCode()){case v:this.entity+=`${t.slice(e,this.prevI)}\n`,e=this.i;break;case 59:{const{entityReturnState:r}=this,n=this.entity+t.slice(e,this.prevI);let i;this.state=r,""===n?(this.fail("empty entity name."),i="&;"):(i=this.parseEntity(n),this.entity=""),r===E&&void 0===this.textHandler||(this.text+=i);break e}case w:this.entity+=t.slice(e);break e}}sOpenWaka(){const e=this.getCode();if(l(e))this.state=34,this.unget(),this.xmlDeclPossible=!1;else switch(e){case 47:this.state=43,this.xmlDeclPossible=!1;break;case 33:this.state=16,this.openWakaBang="",this.xmlDeclPossible=!1;break;case k:this.state=23;break;default:this.fail("disallowed character in tag name"),this.state=E,this.xmlDeclPossible=!1}}sOpenWakaBang(){switch(this.openWakaBang+=String.fromCodePoint(this.getCodeNorm()),this.openWakaBang){case"[CDATA[":this.sawRoot||this.reportedTextBeforeRoot||(this.fail("text data outside of root node."),this.reportedTextBeforeRoot=!0),this.closedRoot&&!this.reportedTextAfterRoot&&(this.fail("text data outside of root node."),this.reportedTextAfterRoot=!0),this.state=20,this.openWakaBang="";break;case"--":this.state=17,this.openWakaBang="";break;case"DOCTYPE":this.state=2,(this.doctype||this.sawRoot)&&this.fail("inappropriately located doctype declaration."),this.openWakaBang="";break;default:this.openWakaBang.length>=7&&this.fail("incorrect syntax.")}}sComment(){this.captureToChar(45)&&(this.state=18)}sCommentEnding(){var e;const t=this.getCodeNorm();45===t?(this.state=19,null===(e=this.commentHandler)||void 0===e||e.call(this,this.text),this.text=""):(this.text+=`-${String.fromCodePoint(t)}`,this.state=17)}sCommentEnded(){const e=this.getCodeNorm();e!==x?(this.fail("malformed comment."),this.text+=`--${String.fromCodePoint(e)}`,this.state=17):this.state=E}sCData(){this.captureToChar(N)&&(this.state=21)}sCDataEnding(){const e=this.getCodeNorm();e===N?this.state=22:(this.text+=`]${String.fromCodePoint(e)}`,this.state=20)}sCDataEnding2(){var e;const t=this.getCodeNorm();switch(t){case x:null===(e=this.cdataHandler)||void 0===e||e.call(this,this.text),this.text="",this.state=E;break;case N:this.text+="]";break;default:this.text+=`]]${String.fromCodePoint(t)}`,this.state=20}}sPIFirstChar(){const e=this.getCodeNorm();this.nameStartCheck(e)?(this.piTarget+=String.fromCodePoint(e),this.state=24):e===k||a(e)?(this.fail("processing instruction without a target."),this.state=e===k?26:25):(this.fail("disallowed character in processing instruction name."),this.piTarget+=String.fromCodePoint(e),this.state=24)}sPIRest(){const{chunk:e,i:t}=this;for(;;){const r=this.getCodeNorm();if(r===w)return void(this.piTarget+=e.slice(t));if(!this.nameCheck(r)){this.piTarget+=e.slice(t,this.prevI);const n=r===k;n||a(r)?"xml"===this.piTarget?(this.xmlDeclPossible||this.fail("an XML declaration must be at the start of the document."),this.state=n?S:27):this.state=n?26:25:(this.fail("disallowed character in processing instruction name."),this.piTarget+=String.fromCodePoint(r));break}}}sPIBody(){if(0===this.text.length){const e=this.getCodeNorm();e===k?this.state=26:a(e)||(this.text=String.fromCodePoint(e))}else this.captureToChar(k)&&(this.state=26)}sPIEnding(){var e;const t=this.getCodeNorm();if(t===x){const{piTarget:t}=this;"xml"===t.toLowerCase()&&this.fail("the XML declaration must appear at the start of the document."),null===(e=this.piHandler)||void 0===e||e.call(this,{target:t,body:this.text}),this.piTarget=this.text="",this.state=E}else t===k?this.text+="?":(this.text+=`?${String.fromCodePoint(t)}`,this.state=25);this.xmlDeclPossible=!1}sXMLDeclNameStart(){const e=this.skipSpaces();e!==k?e!==w&&(this.state=28,this.name=String.fromCodePoint(e)):this.state=S}sXMLDeclName(){const e=this.captureTo(D);if(e===k)return this.state=S,this.name+=this.text,this.text="",void this.fail("XML declaration is incomplete.");if(a(e)||e===T){if(this.name+=this.text,this.text="",!this.xmlDeclExpects.includes(this.name))switch(this.name.length){case 0:this.fail("did not expect any more name/value pairs.");break;case 1:this.fail(`expected the name ${this.xmlDeclExpects[0]}.`);break;default:this.fail(`expected one of ${this.xmlDeclExpects.join(", ")}`)}this.state=e===T?30:29}}sXMLDeclEq(){const e=this.getCodeNorm();if(e===k)return this.state=S,void this.fail("XML declaration is incomplete.");a(e)||(e!==T&&this.fail("value required."),this.state=30)}sXMLDeclValueStart(){const e=this.getCodeNorm();if(e===k)return this.state=S,void this.fail("XML declaration is incomplete.");a(e)||(O(e)?this.q=e:(this.fail("value must be quoted."),this.q=32),this.state=31)}sXMLDeclValue(){const e=this.captureTo([this.q,k]);if(e===k)return this.state=S,this.text="",void this.fail("XML declaration is incomplete.");if(e===w)return;const t=this.text;switch(this.text="",this.name){case"version":{this.xmlDeclExpects=["encoding","standalone"];const e=t;this.xmlDecl.version=e,/^1\.[0-9]+$/.test(e)?this.opt.forceXMLVersion||this.setXMLVersion(e):this.fail("version number must match /^1\\.[0-9]+$/.");break}case"encoding":/^[A-Za-z][A-Za-z0-9._-]*$/.test(t)||this.fail("encoding value must match /^[A-Za-z0-9][A-Za-z0-9._-]*$/."),this.xmlDeclExpects=["standalone"],this.xmlDecl.encoding=t;break;case"standalone":"yes"!==t&&"no"!==t&&this.fail('standalone value must match "yes" or "no".'),this.xmlDeclExpects=[],this.xmlDecl.standalone=t}this.name="",this.state=32}sXMLDeclSeparator(){const e=this.getCodeNorm();e!==k?(a(e)||(this.fail("whitespace required."),this.unget()),this.state=27):this.state=S}sXMLDeclEnding(){var e;this.getCodeNorm()===x?("xml"!==this.piTarget?this.fail("processing instructions are not allowed before root."):"version"!==this.name&&this.xmlDeclExpects.includes("version")&&this.fail("XML declaration must contain a version."),null===(e=this.xmldeclHandler)||void 0===e||e.call(this,this.xmlDecl),this.name="",this.piTarget=this.text="",this.state=E):this.fail("The character ? is disallowed anywhere in XML declarations."),this.xmlDeclPossible=!1}sOpenTag(){var e;const t=this.captureNameChars();if(t===w)return;const r=this.tag={name:this.name,attributes:Object.create(null)};switch(this.name="",this.xmlnsOpt&&(this.topNS=r.ns=Object.create(null)),null===(e=this.openTagStartHandler)||void 0===e||e.call(this,r),this.sawRoot=!0,!this.fragmentOpt&&this.closedRoot&&this.fail("documents may contain only one root."),t){case x:this.openTag();break;case 47:this.state=35;break;default:a(t)||this.fail("disallowed character in tag name."),this.state=36}}sOpenTagSlash(){this.getCode()===x?this.openSelfClosingTag():(this.fail("forward-slash in opening tag not followed by >."),this.state=36)}sAttrib(){const e=this.skipSpaces();e!==w&&(l(e)?(this.unget(),this.state=37):e===x?this.openTag():47===e?this.state=35:this.fail("disallowed character in attribute name."))}sAttribName(){const e=this.captureNameChars();e===T?this.state=39:a(e)?this.state=38:e===x?(this.fail("attribute without value."),this.pushAttrib(this.name,this.name),this.name=this.text="",this.openTag()):e!==w&&this.fail("disallowed character in attribute name.")}sAttribNameSawWhite(){const e=this.skipSpaces();switch(e){case w:return;case T:this.state=39;break;default:this.fail("attribute without value."),this.text="",this.name="",e===x?this.openTag():l(e)?(this.unget(),this.state=37):(this.fail("disallowed character in attribute name."),this.state=36)}}sAttribValue(){const e=this.getCodeNorm();O(e)?(this.q=e,this.state=40):a(e)||(this.fail("unquoted attribute value."),this.state=42,this.unget())}sAttribValueQuoted(){const{q:e,chunk:t}=this;let{i:r}=this;for(;;)switch(this.getCode()){case e:return this.pushAttrib(this.name,this.text+t.slice(r,this.prevI)),this.name=this.text="",this.q=null,void(this.state=41);case 38:return this.text+=t.slice(r,this.prevI),this.state=14,void(this.entityReturnState=40);case R:case v:case 9:this.text+=`${t.slice(r,this.prevI)} `,r=this.i;break;case A:return this.text+=t.slice(r,this.prevI),void this.fail("disallowed character.");case w:return void(this.text+=t.slice(r))}}sAttribValueClosed(){const e=this.getCodeNorm();a(e)?this.state=36:e===x?this.openTag():47===e?this.state=35:l(e)?(this.fail("no whitespace between attributes."),this.unget(),this.state=37):this.fail("disallowed character in attribute name.")}sAttribValueUnquoted(){const e=this.captureTo(F);switch(e){case 38:this.state=14,this.entityReturnState=42;break;case A:this.fail("disallowed character.");break;case w:break;default:this.text.includes("]]>")&&this.fail('the string "]]>" is disallowed in char data.'),this.pushAttrib(this.name,this.text),this.name=this.text="",e===x?this.openTag():this.state=36}}sCloseTag(){const e=this.captureNameChars();e===x?this.closeTag():a(e)?this.state=44:e!==w&&this.fail("disallowed character in closing tag.")}sCloseTagSawWhite(){switch(this.skipSpaces()){case x:this.closeTag();break;case w:break;default:this.fail("disallowed character in closing tag.")}}handleTextInRoot(){let{i:e,forbiddenState:t}=this;const{chunk:r,textHandler:n}=this;e:for(;;)switch(this.getCode()){case A:if(this.state=15,void 0!==n){const{text:t}=this,i=r.slice(e,this.prevI);0!==t.length?(n(t+i),this.text=""):0!==i.length&&n(i)}t=0;break e;case 38:this.state=14,this.entityReturnState=E,void 0!==n&&(this.text+=r.slice(e,this.prevI)),t=0;break e;case N:switch(t){case 0:t=1;break;case 1:t=2;break;case 2:break;default:throw new Error("impossible state")}break;case x:2===t&&this.fail('the string "]]>" is disallowed in char data.'),t=0;break;case v:void 0!==n&&(this.text+=`${r.slice(e,this.prevI)}\n`),e=this.i,t=0;break;case w:void 0!==n&&(this.text+=r.slice(e));break e;default:t=0}this.forbiddenState=t}handleTextOutsideRoot(){let{i:e}=this;const{chunk:t,textHandler:r}=this;let n=!1;e:for(;;){const i=this.getCode();switch(i){case A:if(this.state=15,void 0!==r){const{text:n}=this,i=t.slice(e,this.prevI);0!==n.length?(r(n+i),this.text=""):0!==i.length&&r(i)}break e;case 38:this.state=14,this.entityReturnState=E,void 0!==r&&(this.text+=t.slice(e,this.prevI)),n=!0;break e;case v:void 0!==r&&(this.text+=`${t.slice(e,this.prevI)}\n`),e=this.i;break;case w:void 0!==r&&(this.text+=t.slice(e));break e;default:a(i)||(n=!0)}}n&&(this.sawRoot||this.reportedTextBeforeRoot||(this.fail("text data outside of root node."),this.reportedTextBeforeRoot=!0),this.closedRoot&&!this.reportedTextAfterRoot&&(this.fail("text data outside of root node."),this.reportedTextAfterRoot=!0))}pushAttribNS(e,t){var r;const{prefix:n,local:i}=this.qname(e),o={name:e,prefix:n,local:i,value:t};if(this.attribList.push(o),null===(r=this.attributeHandler)||void 0===r||r.call(this,o),"xmlns"===n){const e=t.trim();"1.0"===this.currentXMLVersion&&""===e&&this.fail("invalid attempt to undefine prefix in XML 1.0"),this.topNS[i]=e,C(this,i,e)}else if("xmlns"===e){const e=t.trim();this.topNS[""]=e,C(this,"",e)}}pushAttribPlain(e,t){var r;const n={name:e,value:t};this.attribList.push(n),null===(r=this.attributeHandler)||void 0===r||r.call(this,n)}end(){var e,t;this.sawRoot||this.fail("document must contain a root element.");const{tags:r}=this;for(;r.length>0;){const e=r.pop();this.fail(`unclosed tag: ${e.name}`)}0!==this.state&&this.state!==E&&this.fail("unexpected end.");const{text:n}=this;return 0!==n.length&&(null===(e=this.textHandler)||void 0===e||e.call(this,n),this.text=""),this._closed=!0,null===(t=this.endHandler)||void 0===t||t.call(this),this._init(),this}resolve(e){var t,r;let n=this.topNS[e];if(void 0!==n)return n;const{tags:i}=this;for(let t=i.length-1;t>=0;t--)if(n=i[t].ns[e],void 0!==n)return n;return n=this.ns[e],void 0!==n?n:null===(r=(t=this.opt).resolvePrefix)||void 0===r?void 0:r.call(t,e)}qname(e){const t=e.indexOf(":");if(-1===t)return{prefix:"",local:e};const r=e.slice(t+1),n=e.slice(0,t);return(""===n||""===r||r.includes(":"))&&this.fail(`malformed name: ${e}.`),{prefix:n,local:r}}processAttribsNS(){var e;const{attribList:t}=this,r=this.tag;{const{prefix:t,local:n}=this.qname(r.name);r.prefix=t,r.local=n;const i=r.uri=null!==(e=this.resolve(t))&&void 0!==e?e:"";""!==t&&("xmlns"===t&&this.fail('tags may not have "xmlns" as prefix.'),""===i&&(this.fail(`unbound namespace prefix: ${JSON.stringify(t)}.`),r.uri=t))}if(0===t.length)return;const{attributes:n}=r,i=new Set;for(const e of t){const{name:t,prefix:r,local:o}=e;let a,s;""===r?(a="xmlns"===t?g:"",s=t):(a=this.resolve(r),void 0===a&&(this.fail(`unbound namespace prefix: ${JSON.stringify(r)}.`),a=r),s=`{${a}}${o}`),i.has(s)&&this.fail(`duplicate attribute: ${s}.`),i.add(s),e.uri=a,n[t]=e}this.attribList=[]}processAttribsPlain(){const{attribList:e}=this,t=this.tag.attributes;for(const{name:r,value:n}of e)void 0!==t[r]&&this.fail(`duplicate attribute: ${r}.`),t[r]=n;this.attribList=[]}openTag(){var e;this.processAttribs();const{tags:t}=this,r=this.tag;r.isSelfClosing=!1,null===(e=this.openTagHandler)||void 0===e||e.call(this,r),t.push(r),this.state=E,this.name=""}openSelfClosingTag(){var e,t,r;this.processAttribs();const{tags:n}=this,i=this.tag;i.isSelfClosing=!0,null===(e=this.openTagHandler)||void 0===e||e.call(this,i),null===(t=this.closeTagHandler)||void 0===t||t.call(this,i),null===(this.tag=null!==(r=n[n.length-1])&&void 0!==r?r:null)&&(this.closedRoot=!0),this.state=E,this.name=""}closeTag(){const{tags:e,name:t}=this;if(this.state=E,this.name="",""===t)return this.fail("weird empty close tag."),void(this.text+="</>");const r=this.closeTagHandler;let n=e.length;for(;n-- >0;){const n=this.tag=e.pop();if(this.topNS=n.ns,null==r||r(n),n.name===t)break;this.fail("unexpected close tag.")}0===n?this.closedRoot=!0:n<0&&(this.fail(`unmatched closing tag: ${t}.`),this.text+=`</${t}>`)}parseEntity(e){if("#"!==e[0]){const t=this.ENTITIES[e];return void 0!==t?t:(this.fail(this.isName(e)?"undefined entity.":"disallowed character in entity name."),`&${e};`)}let t=NaN;return"x"===e[1]&&/^#x[0-9a-f]+$/i.test(e)?t=parseInt(e.slice(2),16):/^#[0-9]+$/.test(e)&&(t=parseInt(e.slice(1),10)),this.isChar(t)?String.fromCodePoint(t):(this.fail("malformed character entity."),`&${e};`)}}},4404:e=>{function t(e){this._options=e=e||{};var t=e.prefixes||{};this._prefixByIri={};var r=[];for(var n in t){var i=t[n];a(i)&&(this._prefixByIri[i]=n,r.push(i))}var o=r.join("|").replace(/[\]\/\(\)\*\+\?\.\\\$]/g,"\\$&");this._prefixRegex=new RegExp("^("+o+")([a-zA-Z][\\-_a-zA-Z0-9]*)$"),this._usedPrefixes={},this._sparqlStar=e.sparqlStar,this._indent=a(e.indent)?e.indent:"  ",this._newline=a(e.newline)?e.newline:"\n",this._explicitDatatype=Boolean(e.explicitDatatype)}t.prototype.toQuery=function(e){var t="";return e.queryType&&(t+=e.queryType.toUpperCase()+" "),e.reduced&&(t+="REDUCED "),e.distinct&&(t+="DISTINCT "),e.variables?t+=u(e.variables,void 0,(function(e){return s(e)?this.toEntity(e):"("+this.toExpression(e.expression)+" AS "+o(e.variable)+")"}),this)+" ":e.template&&(t+=this.group(e.template,!0)+this._newline),e.from&&(t+=this.graphs("FROM ",e.from.default)+this.graphs("FROM NAMED ",e.from.named)),e.where&&(t+="WHERE "+this.group(e.where,!0)+this._newline),e.updates&&(t+=u(e.updates,";"+this._newline,this.toUpdate,this)),e.group&&(t+="GROUP BY "+u(e.group,void 0,(function(e){var t=s(e.expression)?this.toEntity(e.expression):"("+this.toExpression(e.expression)+")";return e.variable?"("+t+" AS "+o(e.variable)+")":t}),this)+this._newline),e.having&&(t+="HAVING ("+u(e.having,void 0,this.toExpression,this)+")"+this._newline),e.order&&(t+="ORDER BY "+u(e.order,void 0,(function(e){var t="("+this.toExpression(e.expression)+")";return e.descending?"DESC "+t:t}),this)+this._newline),e.offset&&(t+="OFFSET "+e.offset+this._newline),e.limit&&(t+="LIMIT "+e.limit+this._newline),e.values&&(t+=this.values(e)),(t=this.baseAndPrefixes(e)+t).trim()},t.prototype.baseAndPrefixes=function(e){var t=e.base?"BASE <"+e.base+">"+this._newline:"",r="";for(var n in e.prefixes)(this._options.allPrefixes||this._usedPrefixes[n])&&(r+="PREFIX "+n+": <"+e.prefixes[n]+">"+this._newline);return t+r},t.prototype.toPattern=function(e){var t=e.type||e instanceof Array&&"array"||(e.subject&&e.predicate&&e.object?"triple":"");if(!(t in this))throw new Error("Unknown entry type: "+t);return this[t](e)},t.prototype.triple=function(e){return this.toEntity(e.subject)+" "+this.toEntity(e.predicate)+" "+this.toEntity(e.object)+"."},t.prototype.array=function(e){return u(e,this._newline,this.toPattern,this)},t.prototype.bgp=function(e){return this.encodeTriples(e.triples)},t.prototype.encodeTriples=function(e){if(!e.length)return"";for(var t=[],r=void 0,n=void 0,i=0;i<e.length;i++){var o=e[i];l(o.subject,r)?l(o.predicate,n)?t.push(","):(n=o.predicate,t.push(";"+this._newline,this._indent,this.toEntity(n))):(r&&t.push("."+this._newline),r=o.subject,n=o.predicate,t.push(this.toEntity(r)," ",this.toEntity(n))),t.push(" ",this.toEntity(o.object))}return t.push("."),t.join("")},t.prototype.graph=function(e){return"GRAPH "+this.toEntity(e.name)+" "+this.group(e)},t.prototype.graphs=function(e,t){return t&&0!==t.length?u(t,"",(function(t){return e+this.toEntity(t)+this._newline}),this):""},t.prototype.group=function(e,t){return-1===(e=!0!==t?this.array(e.patterns||e.triples):this.toPattern("group"!==e.type?e:e.patterns)).indexOf(this._newline)?"{ "+e+" }":"{"+this._newline+this.indent(e)+this._newline+"}"},t.prototype.query=function(e){return this.toQuery(e)},t.prototype.filter=function(e){return"FILTER("+this.toExpression(e.expression)+")"},t.prototype.bind=function(e){return"BIND("+this.toExpression(e.expression)+" AS "+o(e.variable)+")"},t.prototype.optional=function(e){return"OPTIONAL "+this.group(e)},t.prototype.union=function(e){return u(e.patterns,this._newline+"UNION"+this._newline,(function(e){return this.group(e,!0)}),this)},t.prototype.minus=function(e){return"MINUS "+this.group(e)},t.prototype.values=function(e){var t,r,n=Object.keys(e.values.reduce((function(e,t){for(var r in t)e[r]=!0;return e}),{}));return 1===n.length?t=r="":(t="(",r=")"),"VALUES "+t+n.join(" ")+r+" {"+this._newline+u(e.values,this._newline,(function(e){return"  "+t+u(n,void 0,(function(t){return e[t]?this.toEntity(e[t]):"UNDEF"}),this)+r}),this)+this._newline+"}"},t.prototype.service=function(e){return"SERVICE "+(e.silent?"SILENT ":"")+this.toEntity(e.name)+" "+this.group(e)},t.prototype.toExpression=function(e){if(s(e))return this.toEntity(e);switch(e.type.toLowerCase()){case"aggregate":return e.aggregation.toUpperCase()+"("+(e.distinct?"DISTINCT ":"")+this.toExpression(e.expression)+(e.separator?'; SEPARATOR = "'+e.separator.replace(r,n)+'"':"")+")";case"functioncall":return this.toEntity(e.function)+"("+u(e.args,", ",this.toExpression,this)+")";case"operation":var t=e.operator.toUpperCase(),i=e.args||[];switch(e.operator.toLowerCase()){case"<":case">":case">=":case"<=":case"&&":case"||":case"=":case"!=":case"+":case"-":case"*":case"/":return(s(i[0])?this.toEntity(i[0]):"("+this.toExpression(i[0])+")")+" "+t+" "+(s(i[1])?this.toEntity(i[1]):"("+this.toExpression(i[1])+")");case"!":return"!("+this.toExpression(i[0])+")";case"uplus":return"+("+this.toExpression(i[0])+")";case"uminus":return"-("+this.toExpression(i[0])+")";case"notin":t="NOT IN";case"in":return this.toExpression(i[0])+" "+t+"("+(a(i[1])?i[1]:u(i[1],", ",this.toExpression,this))+")";case"notexists":t="NOT EXISTS";case"exists":return t+" "+this.group(i[0],!0);default:return t+"("+u(i,", ",this.toExpression,this)+")"}default:throw new Error("Unknown expression type: "+e.type)}},t.prototype.toEntity=function(e){if(s(e))switch(e.termType){case"Wildcard":return"*";case"Variable":return o(e);case"BlankNode":return"_:"+e.value;case"Literal":var t=e.value||"",i=e.language||"",a=e.datatype;if(e='"'+t.replace(r,n)+'"',i)e+="@"+i;else if(a){if(!this._explicitDatatype)switch(a.value){case"http://www.w3.org/2001/XMLSchema#string":return e;case"http://www.w3.org/2001/XMLSchema#integer":if(/^\d+$/.test(t))return t+" "}e+="^^"+this.encodeIRI(a.value)}return e;case"Quad":if(!this._sparqlStar)throw new Error("SPARQL* support is not enabled");return e.graph&&"DefaultGraph"!==e.graph.termType?"<< GRAPH "+this.toEntity(e.graph)+" { "+this.toEntity(e.subject)+" "+this.toEntity(e.predicate)+" "+this.toEntity(e.object)+" }  >>":"<< "+this.toEntity(e.subject)+" "+this.toEntity(e.predicate)+" "+this.toEntity(e.object)+" >>";default:return this.encodeIRI(e.value)}else{var l=e.items.map(this.toEntity,this),u=e.pathType;switch(u){case"^":case"!":return u+l[0];case"*":case"+":case"?":return"("+l[0]+u+")";default:return"("+l.join(u)+")"}}};var r=/["\\\t\n\r\b\f]/g,n=function(e){return i[e]},i={"\\":"\\\\",'"':'\\"',"\t":"\\t","\n":"\\n","\r":"\\r","\b":"\\b","\f":"\\f"};function o(e){return"?"+e.value}function a(e){return"string"==typeof e}function s(e){return"string"==typeof e.termType}function l(e,t){if(!e||!s(e))return!1;if(!t||!s(t))return!1;if(e.termType!==t.termType)return!1;switch(e.termType){case"Literal":return e.value===t.value&&e.language===t.language&&l(e.datatype,t.datatype);case"Quad":return l(e.subject,t.subject)&&l(e.predicate,t.predicate)&&l(e.object,t.object)&&l(e.graph,t.graph);default:return e.value===t.value}}function u(e,t,r,n){return e.map(r,n).join(a(t)?t:" ")}t.prototype.encodeIRI=function(e){var t=this._prefixRegex.exec(e);if(t){var r=this._prefixByIri[t[1]];return this._usedPrefixes[r]=!0,r+":"+t[2]}return"<"+e+">"},t.prototype.toUpdate=function(e){switch(e.type||e.updateType){case"load":return"LOAD"+(e.source?" "+this.toEntity(e.source):"")+(e.destination?" INTO GRAPH "+this.toEntity(e.destination):"");case"insert":return"INSERT DATA "+this.group(e.insert,!0);case"delete":return"DELETE DATA "+this.group(e.delete,!0);case"deletewhere":return"DELETE WHERE "+this.group(e.delete,!0);case"insertdelete":return(e.graph?"WITH "+this.toEntity(e.graph)+this._newline:"")+(e.delete.length?"DELETE "+this.group(e.delete,!0)+this._newline:"")+(e.insert.length?"INSERT "+this.group(e.insert,!0)+this._newline:"")+(e.using?this.graphs("USING ",e.using.default):"")+(e.using?this.graphs("USING NAMED ",e.using.named):"")+"WHERE "+this.group(e.where,!0);case"add":case"copy":case"move":return e.type.toUpperCase()+" "+(e.silent?"SILENT ":"")+(e.source.default?"DEFAULT":this.toEntity(e.source.name))+" TO "+this.toEntity(e.destination.name);case"create":case"clear":case"drop":return e.type.toUpperCase()+(e.silent?" SILENT ":" ")+(e.graph.default?"DEFAULT":e.graph.named?"NAMED":e.graph.all?"ALL":"GRAPH "+this.toEntity(e.graph.name));default:throw new Error("Unknown update query type: "+e.type)}},t.prototype.indent=function(e){return e.replace(/^/gm,this._indent)},e.exports=function(e={}){return{stringify:function(r){var n=Object.create(e);return n.prefixes=r.prefixes,new t(n).toQuery(r)},createGenerator:function(){return new t(e)}}}},7107:(e,t,r)=>{e=r.nmd(e);var n=r(5108),i=r(4155),o=function(){var e=function(e,t,r,n){for(r=r||{},n=e.length;n--;r[e[n]]=t);return r},t=[6,12,15,28,41,50,55,107,117,120,122,123,132,133,138,322,323,324,325,326],i=[2,210],o=[107,117,120,122,123,132,133,138,322,323,324,325,326],a=[1,20],s=[1,29],l=[6,90],u=[45,46,58],c=[45,58],h=[1,58],f=[1,60],d=[1,56],p=[1,59],b=[1,65],y=[1,66],g=[26,34,35],_=[13,16,312],m=[119,141,320,327],w=[13,16,119,141,312],v=[1,88],E=[1,92],S=[1,94],R=[119,141,320,321,327],A=[13,16,119,141,312,321],T=[1,100],x=[2,252],k=[1,99],N=[13,16,34,35,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],O=[6,45,46,58,68,75,78,86,88,90],I=[6,13,16,34,45,46,58,68,75,78,86,88,90,312],j=[6,13,16,26,34,35,37,38,45,46,48,58,68,75,78,86,87,88,90,93,100,116,119,132,133,135,140,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,250,254,258,271,273,278,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,330,331,333,334,335,336,337,338,339],P=[34,35,45,46,58],D=[1,131],F=[1,132],C=[1,143],L=[1,123],M=[1,117],B=[1,122],$=[1,124],U=[1,134],q=[1,135],G=[1,136],W=[1,137],H=[1,139],V=[1,140],Q=[2,460],z=[1,149],Y=[1,150],X=[1,151],K=[1,144],J=[1,145],Z=[1,148],ee=[1,158],te=[1,159],re=[1,160],ne=[1,161],ie=[1,162],oe=[1,163],ae=[1,164],se=[1,165],le=[1,166],ue=[1,167],ce=[1,157],he=[1,152],fe=[1,153],de=[1,154],pe=[1,155],be=[1,156],ye=[6,13,16,34,35,46,48,87,90,93,119,167,168,170,173,174,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],ge=[2,311],_e=[1,184],me=[1,182],we=[6,191],ve=[2,328],Ee=[2,316],Se=[45,135],Re=[6,48,78,86,88,90],Ae=[2,256],Te=[1,198],xe=[1,200],ke=[6,48,75,78,86,88,90],Ne=[2,254],Oe=[1,206],Ie=[1,218],je=[1,216],Pe=[1,224],De=[1,217],Fe=[1,222],Ce=[1,223],Le=[6,68,75,78,86,88,90],Me=[37,38,191,250,278],Be=[37,38,191,250,254,278],$e=[37,38,191,250,254,258,271,273,278,295,306,307,308,309,310,311,334,335,336,337,338,339],Ue=[26,37,38,191,250,254,258,271,273,278,295,306,307,308,309,310,311,331,334,335,336,337,338,339],qe=[1,252],Ge=[1,251],We=[6,13,16,26,34,35,37,38,46,48,75,78,81,83,86,87,88,90,93,119,167,168,170,173,174,191,226,231,245,246,250,254,258,271,273,275,276,277,278,279,281,282,284,285,288,290,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339,340,341,342,343,344],He=[1,260],Ve=[1,259],Qe=[13,16,26,34,35,37,38,46,48,87,90,93,100,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,250,254,258,271,273,278,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339],ze=[35,93],Ye=[13,16,26,34,35,37,38,46,48,87,90,93,100,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,250,254,258,271,273,278,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339],Xe=[13,16,48,87,100,231,299,300,301,302,303,304,305,306,307,308,309,310,311,312],Ke=[48,93],Je=[34,38],Ze=[6,116,191],et=[48,119],tt=[6,48,86,88,90],rt=[2,340],nt=[2,332],it=[1,312],ot=[1,314],at=[48,119,328],st=[13,16,34,195,312],lt=[13,16,34,35,38,46,48,87,90,93,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],ut=[13,16,34,35,87,219,271,273,275,276,277,279,281,282,284,285,288,290,299,300,301,302,303,304,305,306,307,308,309,310,311,312,339,340,341,342,343,344],ct=[1,346],ht=[1,347],ft=[13,16,26,34,35,87,219,271,273,275,276,277,279,281,282,284,285,288,290,299,300,301,302,303,304,305,306,307,308,309,310,311,312,339,340,341,342,343,344],dt=[1,370],pt=[1,371],bt=[1,384],yt=[6,48,90],gt=[6,13,16,35,48,78,86,88,90,275,276,277,279,281,282,284,285,288,290,312,339,340,341,342,343,344],_t=[6,13,16,34,35,46,48,78,81,83,86,87,88,90,93,119,167,168,170,173,174,226,231,245,246,275,276,277,279,281,282,284,285,288,290,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,339,340,341,342,343,344],mt=[46,48,90,119,167,168,170,173,174],wt=[1,403],vt=[1,404],Et=[1,410],St=[1,409],Rt=[48,119,191,227,328],At=[13,16,34,35,38,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],Tt=[13,16,34,35,38,48,87,93,119,191,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],xt=[13,16,38,48,87,100,231,299,300,301,302,303,304,305,306,307,308,309,310,311,312],kt=[35,48],Nt=[2,331],Ot=[1,463],It=[1,460],jt=[1,461],Pt=[6,13,16,26,34,35,37,38,46,48,68,75,78,81,83,86,87,88,90,93,119,167,168,170,173,174,191,226,231,245,246,250,254,258,271,273,275,276,277,278,279,281,282,284,285,288,290,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,329,331,334,335,336,337,338,339,340,341,342,343,344],Dt=[13,16,35,195,219,224,312],Ft=[2,388],Ct=[1,481],Lt=[46,48,90,119,167,168,170,173,174,328],Mt=[13,16,34,35,195,219,224,312],Bt=[6,13,16,34,35,48,75,78,86,88,90,275,276,277,279,281,282,284,285,288,290,312,339,340,341,342,343,344],$t=[13,16,34,35,38,48,87,93,119,191,195,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],Ut=[6,13,16,34,35,48,81,83,86,88,90,275,276,277,279,281,282,284,285,288,290,312,339,340,341,342,343,344],qt=[13,16,34,35,46,48,87,90,93,119,167,168,170,173,174,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],Gt=[13,16,34,312],Wt=[13,16,34,35,46,48,87,90,93,119,167,168,170,173,174,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],Ht=[2,343],Vt=[13,16,34,35,38,46,48,87,90,93,119,167,168,170,173,174,191,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],Qt=[13,16,34,35,37,38,46,48,87,90,93,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],zt=[2,338],Yt=[13,16,35,195,219,312],Xt=[13,16,34,35,38,46,48,87,90,93,119,167,168,170,173,174,191,195,219,224,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],Kt=[13,16,38,87,100,231,299,300,301,302,303,304,305,306,307,308,309,310,311,312],Jt=[46,48,90,119,167,168,170,173,174,191,227,328],Zt=[13,16,34,38,48,87,100,195,231,235,299,300,301,302,303,304,305,306,307,308,309,310,311,312],er=[13,16,34,35,48,87,93,119,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],tr=[13,16,34,35,38,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,330,331],rr=[13,16,26,34,35,38,87,93,226,231,245,246,271,299,300,301,302,303,304,305,306,307,308,309,310,311,312,330,331,333],nr=[1,632],ir=[1,633],or=[2,326],ar=[13,16,38,195,224,312],sr={trace:function(){},yy:{},symbols_:{error:2,QueryOrUpdate:3,Prologue:4,QueryOrUpdate_group0:5,EOF:6,Prologue_repetition0:7,Query:8,Query_group0:9,Query_option0:10,BaseDecl:11,BASE:12,IRIREF:13,PrefixDecl:14,PREFIX:15,PNAME_NS:16,SelectQuery:17,SelectClauseWildcard:18,SelectQuery_repetition0:19,WhereClause:20,SolutionModifierNoGroup:21,SelectClauseVars:22,SelectQuery_repetition1:23,SolutionModifier:24,SelectClauseBase:25,"*":26,SelectClauseVars_repetition_plus0:27,SELECT:28,SelectClauseBase_option0:29,SubSelect:30,SubSelect_option0:31,SubSelect_option1:32,SelectClauseItem:33,VAR:34,"(":35,Expression:36,AS:37,")":38,VarTriple:39,ConstructQuery:40,CONSTRUCT:41,ConstructTemplate:42,ConstructQuery_repetition0:43,ConstructQuery_repetition1:44,WHERE:45,"{":46,ConstructQuery_option0:47,"}":48,DescribeQuery:49,DESCRIBE:50,DescribeQuery_group0:51,DescribeQuery_repetition0:52,DescribeQuery_option0:53,AskQuery:54,ASK:55,AskQuery_repetition0:56,DatasetClause:57,FROM:58,DatasetClause_option0:59,iri:60,WhereClause_option0:61,GroupGraphPattern:62,SolutionModifier_option0:63,SolutionModifierNoGroup_option0:64,SolutionModifierNoGroup_option1:65,SolutionModifierNoGroup_option2:66,GroupClause:67,GROUP:68,BY:69,GroupClause_repetition_plus0:70,GroupCondition:71,BuiltInCall:72,FunctionCall:73,HavingClause:74,HAVING:75,HavingClause_repetition_plus0:76,OrderClause:77,ORDER:78,OrderClause_repetition_plus0:79,OrderCondition:80,ASC:81,BrackettedExpression:82,DESC:83,Constraint:84,LimitOffsetClauses:85,LIMIT:86,INTEGER:87,OFFSET:88,ValuesClause:89,VALUES:90,InlineData:91,InlineData_repetition0:92,NIL:93,InlineData_repetition1:94,InlineData_repetition_plus2:95,InlineData_repetition3:96,DataBlockValue:97,Literal:98,ConstTriple:99,UNDEF:100,DataBlockValueList:101,DataBlockValueList_repetition_plus0:102,Update:103,Update_repetition0:104,Update1:105,Update_option0:106,LOAD:107,Update1_option0:108,Update1_option1:109,Update1_group0:110,Update1_option2:111,GraphRefAll:112,Update1_group1:113,Update1_option3:114,GraphOrDefault:115,TO:116,CREATE:117,Update1_option4:118,GRAPH:119,INSERTDATA:120,QuadPattern:121,DELETEDATA:122,DELETEWHERE:123,Update1_option5:124,InsertClause:125,Update1_option6:126,Update1_repetition0:127,Update1_option7:128,DeleteClause:129,Update1_option8:130,Update1_repetition1:131,DELETE:132,INSERT:133,UsingClause:134,USING:135,UsingClause_option0:136,WithClause:137,WITH:138,IntoGraphClause:139,INTO:140,DEFAULT:141,GraphOrDefault_option0:142,GraphRefAll_group0:143,QuadPattern_option0:144,QuadPattern_repetition0:145,QuadsNotTriples:146,QuadsNotTriples_group0:147,QuadsNotTriples_option0:148,QuadsNotTriples_option1:149,QuadsNotTriples_option2:150,TriplesTemplate:151,TriplesTemplate_repetition0:152,TriplesSameSubject:153,TriplesTemplate_option0:154,GroupGraphPatternSub:155,GroupGraphPatternSub_option0:156,GroupGraphPatternSub_repetition0:157,GroupGraphPatternSubTail:158,GraphPatternNotTriples:159,GroupGraphPatternSubTail_option0:160,GroupGraphPatternSubTail_option1:161,TriplesBlock:162,TriplesBlock_repetition0:163,TriplesSameSubjectPath:164,TriplesBlock_option0:165,GraphPatternNotTriples_repetition0:166,OPTIONAL:167,MINUS:168,GraphPatternNotTriples_group0:169,SERVICE:170,GraphPatternNotTriples_option0:171,GraphPatternNotTriples_group1:172,FILTER:173,BIND:174,FunctionCall_option0:175,FunctionCall_repetition0:176,ExpressionList:177,ExpressionList_repetition0:178,ConstructTemplate_option0:179,ConstructTriples:180,ConstructTriples_repetition0:181,ConstructTriples_option0:182,TriplesSameSubject_group0:183,PropertyListNotEmpty:184,TriplesNode:185,PropertyList:186,PropertyList_option0:187,VerbObjectList:188,PropertyListNotEmpty_repetition0:189,SemiOptionalVerbObjectList:190,";":191,SemiOptionalVerbObjectList_option0:192,Verb:193,ObjectList:194,a:195,ObjectList_repetition0:196,GraphNode:197,ObjectListPath:198,ObjectListPath_repetition0:199,GraphNodePath:200,TriplesSameSubjectPath_group0:201,PropertyListPathNotEmpty:202,TriplesNodePath:203,TriplesSameSubjectPath_option0:204,PropertyListPathNotEmpty_group0:205,PropertyListPathNotEmpty_repetition0:206,PropertyListPathNotEmpty_repetition1:207,PropertyListPathNotEmptyTail:208,PropertyListPathNotEmptyTail_group0:209,Path:210,Path_repetition0:211,PathSequence:212,PathSequence_repetition0:213,PathEltOrInverse:214,PathElt:215,PathPrimary:216,PathElt_option0:217,PathEltOrInverse_option0:218,"!":219,PathNegatedPropertySet:220,PathOneInPropertySet:221,PathNegatedPropertySet_repetition0:222,PathNegatedPropertySet_option0:223,"^":224,TriplesNode_repetition_plus0:225,"[":226,"]":227,TriplesNodePath_repetition_plus0:228,GraphNode_group0:229,GraphNodePath_group0:230,"<<":231,VarTriple_group0:232,VarTriple_group1:233,VarTriple_group2:234,">>":235,VarTriple_group3:236,VarTriple_group4:237,ConstTriple_group0:238,ConstTriple_group1:239,ConstTriple_group2:240,ConstTriple_group3:241,ConstTriple_group4:242,VarOrTerm:243,Term:244,BLANK_NODE_LABEL:245,ANON:246,ConditionalAndExpression:247,Expression_repetition0:248,ExpressionTail:249,"||":250,RelationalExpression:251,ConditionalAndExpression_repetition0:252,ConditionalAndExpressionTail:253,"&&":254,AdditiveExpression:255,RelationalExpression_group0:256,RelationalExpression_option0:257,IN:258,MultiplicativeExpression:259,AdditiveExpression_repetition0:260,AdditiveExpressionTail:261,AdditiveExpressionTail_group0:262,NumericLiteralPositive:263,AdditiveExpressionTail_repetition0:264,NumericLiteralNegative:265,AdditiveExpressionTail_repetition1:266,UnaryExpression:267,MultiplicativeExpression_repetition0:268,MultiplicativeExpressionTail:269,MultiplicativeExpressionTail_group0:270,"+":271,PrimaryExpression:272,"-":273,Aggregate:274,FUNC_ARITY0:275,FUNC_ARITY1:276,FUNC_ARITY2:277,",":278,IF:279,BuiltInCall_group0:280,BOUND:281,BNODE:282,BuiltInCall_option0:283,EXISTS:284,COUNT:285,Aggregate_option0:286,Aggregate_group0:287,FUNC_AGGREGATE:288,Aggregate_option1:289,GROUP_CONCAT:290,Aggregate_option2:291,Aggregate_option3:292,GroupConcatSeparator:293,SEPARATOR:294,"=":295,String:296,LANGTAG:297,"^^":298,DECIMAL:299,DOUBLE:300,BOOLEAN:301,STRING_LITERAL1:302,STRING_LITERAL2:303,STRING_LITERAL_LONG1:304,STRING_LITERAL_LONG2:305,INTEGER_POSITIVE:306,DECIMAL_POSITIVE:307,DOUBLE_POSITIVE:308,INTEGER_NEGATIVE:309,DECIMAL_NEGATIVE:310,DOUBLE_NEGATIVE:311,PNAME_LN:312,QueryOrUpdate_group0_option0:313,Prologue_repetition0_group0:314,SelectClauseBase_option0_group0:315,DISTINCT:316,REDUCED:317,DescribeQuery_group0_repetition_plus0_group0:318,DescribeQuery_group0_repetition_plus0:319,NAMED:320,SILENT:321,CLEAR:322,DROP:323,ADD:324,MOVE:325,COPY:326,ALL:327,".":328,UNION:329,"|":330,"/":331,PathElt_option0_group0:332,"?":333,"!=":334,"<":335,">":336,"<=":337,">=":338,NOT:339,CONCAT:340,COALESCE:341,SUBSTR:342,REGEX:343,REPLACE:344,$accept:0,$end:1},terminals_:{2:"error",6:"EOF",12:"BASE",13:"IRIREF",15:"PREFIX",16:"PNAME_NS",26:"*",28:"SELECT",34:"VAR",35:"(",37:"AS",38:")",41:"CONSTRUCT",45:"WHERE",46:"{",48:"}",50:"DESCRIBE",55:"ASK",58:"FROM",68:"GROUP",69:"BY",75:"HAVING",78:"ORDER",81:"ASC",83:"DESC",86:"LIMIT",87:"INTEGER",88:"OFFSET",90:"VALUES",93:"NIL",100:"UNDEF",107:"LOAD",116:"TO",117:"CREATE",119:"GRAPH",120:"INSERTDATA",122:"DELETEDATA",123:"DELETEWHERE",132:"DELETE",133:"INSERT",135:"USING",138:"WITH",140:"INTO",141:"DEFAULT",167:"OPTIONAL",168:"MINUS",170:"SERVICE",173:"FILTER",174:"BIND",191:";",195:"a",219:"!",224:"^",226:"[",227:"]",231:"<<",235:">>",245:"BLANK_NODE_LABEL",246:"ANON",250:"||",254:"&&",258:"IN",271:"+",273:"-",275:"FUNC_ARITY0",276:"FUNC_ARITY1",277:"FUNC_ARITY2",278:",",279:"IF",281:"BOUND",282:"BNODE",284:"EXISTS",285:"COUNT",288:"FUNC_AGGREGATE",290:"GROUP_CONCAT",294:"SEPARATOR",295:"=",297:"LANGTAG",298:"^^",299:"DECIMAL",300:"DOUBLE",301:"BOOLEAN",302:"STRING_LITERAL1",303:"STRING_LITERAL2",304:"STRING_LITERAL_LONG1",305:"STRING_LITERAL_LONG2",306:"INTEGER_POSITIVE",307:"DECIMAL_POSITIVE",308:"DOUBLE_POSITIVE",309:"INTEGER_NEGATIVE",310:"DECIMAL_NEGATIVE",311:"DOUBLE_NEGATIVE",312:"PNAME_LN",316:"DISTINCT",317:"REDUCED",320:"NAMED",321:"SILENT",322:"CLEAR",323:"DROP",324:"ADD",325:"MOVE",326:"COPY",327:"ALL",328:".",329:"UNION",330:"|",331:"/",333:"?",334:"!=",335:"<",336:">",337:"<=",338:">=",339:"NOT",340:"CONCAT",341:"COALESCE",342:"SUBSTR",343:"REGEX",344:"REPLACE"},productions_:[0,[3,3],[4,1],[8,2],[11,2],[14,3],[17,4],[17,4],[18,2],[22,2],[25,2],[30,4],[30,4],[33,1],[33,5],[33,5],[40,5],[40,7],[49,5],[54,4],[57,3],[20,2],[24,2],[21,3],[67,3],[71,1],[71,1],[71,3],[71,5],[71,1],[74,2],[77,3],[80,2],[80,2],[80,1],[80,1],[85,2],[85,2],[85,4],[85,4],[89,2],[91,4],[91,4],[91,6],[97,1],[97,1],[97,1],[97,1],[101,3],[103,3],[105,4],[105,3],[105,5],[105,4],[105,2],[105,2],[105,2],[105,6],[105,6],[129,2],[125,2],[134,3],[137,2],[139,3],[115,1],[115,2],[112,2],[112,1],[121,4],[146,7],[151,3],[62,3],[62,3],[155,2],[158,3],[162,3],[159,2],[159,2],[159,2],[159,3],[159,4],[159,2],[159,6],[159,6],[159,1],[84,1],[84,1],[84,1],[73,2],[73,6],[177,1],[177,4],[42,3],[180,3],[153,2],[153,2],[186,1],[184,2],[190,2],[188,2],[193,1],[193,1],[193,1],[194,2],[198,2],[164,2],[164,2],[202,4],[208,1],[208,3],[210,2],[212,2],[215,2],[214,2],[216,1],[216,1],[216,2],[216,3],[220,1],[220,1],[220,4],[221,1],[221,1],[221,2],[221,2],[185,3],[185,3],[203,3],[203,3],[197,1],[197,1],[200,1],[200,1],[39,9],[39,5],[99,9],[99,5],[243,1],[243,1],[244,1],[244,1],[244,1],[244,1],[244,1],[36,2],[249,2],[247,2],[253,2],[251,1],[251,3],[251,4],[255,2],[261,2],[261,2],[261,2],[259,2],[269,2],[267,2],[267,2],[267,2],[267,1],[272,1],[272,1],[272,1],[272,1],[272,1],[272,1],[82,3],[72,1],[72,2],[72,4],[72,6],[72,8],[72,2],[72,4],[72,2],[72,4],[72,3],[274,5],[274,5],[274,6],[293,4],[98,1],[98,2],[98,3],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[296,1],[296,1],[296,1],[296,1],[263,1],[263,1],[263,1],[265,1],[265,1],[265,1],[60,1],[60,1],[60,1],[313,0],[313,1],[5,1],[5,1],[314,1],[314,1],[7,0],[7,2],[9,1],[9,1],[9,1],[9,1],[10,0],[10,1],[19,0],[19,2],[23,0],[23,2],[27,1],[27,2],[315,1],[315,1],[29,0],[29,1],[31,0],[31,1],[32,0],[32,1],[43,0],[43,2],[44,0],[44,2],[47,0],[47,1],[318,1],[318,1],[319,1],[319,2],[51,1],[51,1],[52,0],[52,2],[53,0],[53,1],[56,0],[56,2],[59,0],[59,1],[61,0],[61,1],[63,0],[63,1],[64,0],[64,1],[65,0],[65,1],[66,0],[66,1],[70,1],[70,2],[76,1],[76,2],[79,1],[79,2],[92,0],[92,2],[94,0],[94,2],[95,1],[95,2],[96,0],[96,2],[102,1],[102,2],[104,0],[104,4],[106,0],[106,2],[108,0],[108,1],[109,0],[109,1],[110,1],[110,1],[111,0],[111,1],[113,1],[113,1],[113,1],[114,0],[114,1],[118,0],[118,1],[124,0],[124,1],[126,0],[126,1],[127,0],[127,2],[128,0],[128,1],[130,0],[130,1],[131,0],[131,2],[136,0],[136,1],[142,0],[142,1],[143,1],[143,1],[143,1],[144,0],[144,1],[145,0],[145,2],[147,1],[147,1],[148,0],[148,1],[149,0],[149,1],[150,0],[150,1],[152,0],[152,3],[154,0],[154,1],[156,0],[156,1],[157,0],[157,2],[160,0],[160,1],[161,0],[161,1],[163,0],[163,3],[165,0],[165,1],[166,0],[166,3],[169,1],[169,1],[171,0],[171,1],[172,1],[172,1],[175,0],[175,1],[176,0],[176,3],[178,0],[178,3],[179,0],[179,1],[181,0],[181,3],[182,0],[182,1],[183,1],[183,1],[187,0],[187,1],[189,0],[189,2],[192,0],[192,1],[196,0],[196,3],[199,0],[199,3],[201,1],[201,1],[204,0],[204,1],[205,1],[205,1],[206,0],[206,3],[207,0],[207,2],[209,1],[209,1],[211,0],[211,3],[213,0],[213,3],[332,1],[332,1],[332,1],[217,0],[217,1],[218,0],[218,1],[222,0],[222,3],[223,0],[223,1],[225,1],[225,2],[228,1],[228,2],[229,1],[229,1],[230,1],[230,1],[232,1],[232,1],[233,1],[233,1],[234,1],[234,1],[236,1],[236,1],[237,1],[237,1],[238,1],[238,1],[239,1],[239,1],[240,1],[240,1],[241,1],[241,1],[242,1],[242,1],[248,0],[248,2],[252,0],[252,2],[256,1],[256,1],[256,1],[256,1],[256,1],[256,1],[257,0],[257,1],[260,0],[260,2],[262,1],[262,1],[264,0],[264,2],[266,0],[266,2],[268,0],[268,2],[270,1],[270,1],[280,1],[280,1],[280,1],[280,1],[280,1],[283,0],[283,1],[286,0],[286,1],[287,1],[287,1],[289,0],[289,1],[291,0],[291,1],[292,0],[292,1]],performAction:function(e,t,r,n,i,o,a){var s,l,u,c,h=o.length-1;switch(i){case 1:if(o[h-1]=o[h-1]||{},rn.base&&(o[h-1].base=rn.base),rn.base="",o[h-1].prefixes=rn.prefixes,rn.prefixes=null,"update"===o[h-1].type){const e={};for(const t of o[h-1].updates)if("insert"===t.updateType){const r={};for(const e of t.insert)if("bgp"===e.type||"graph"===e.type)for(const t of e.triples)"BlankNode"===t.subject.termType&&(r[t.subject.value]=!0),"BlankNode"===t.predicate.termType&&(r[t.predicate.value]=!0),"BlankNode"===t.object.termType&&(r[t.object.value]=!0);for(const t of Object.keys(r)){if(e[t])throw new Error("Detected reuse blank node across different INSERT DATA clauses");e[t]=!0}}}return o[h-1];case 3:this.$=Ar(o[h-1],o[h],{type:"query"});break;case 4:rn.base=xr(o[h]);break;case 5:rn.prefixes||(rn.prefixes={}),o[h-1]=o[h-1].substr(0,o[h-1].length-1),o[h]=xr(o[h]),rn.prefixes[o[h-1]]=o[h];break;case 6:this.$=Ar(o[h-3],Pr(o[h-2]),o[h-1],o[h]);break;case 7:if(!rn.skipValidation&&(Yr(o[h-3].variables.map((e=>Qr(e.expression)))).some((e=>"count"===e.aggregation&&!(e.expression instanceof lr)))||o[h].group))for(const e of o[h-3].variables)if("Variable"===e.termType){if(!o[h].group||!o[h].group.map((e=>Vr(e))).includes(Vr(e)))throw Error("Projection of ungrouped variable (?"+Vr(e)+")")}else if(0===Qr(e.expression).length){const t=zr(e.expression);for(const e of t)if(!o[h].group||!o[h].group.map||!o[h].group.map((e=>Vr(e))).includes(Vr(e)))throw Error("Use of ungrouped variable in projection of operation (?"+Vr(e)+")")}const e=o[h-1].where.filter((e=>"query"===e.type));if(e.length>0){const t=o[h-3].variables.filter((e=>e.variable&&e.variable.value)).map((e=>e.variable.value)),r=Yr(e.map((e=>e.variables))).map((e=>e.value||e.variable.value));for(const e of t)if(r.indexOf(e)>=0)throw Error("Target id of 'AS' (?"+e+") already used in subquery")}this.$=Ar(o[h-3],Pr(o[h-2]),o[h-1],o[h]);break;case 8:this.$=Ar(o[h-1],{variables:[new lr]});break;case 9:const t=function(e){const t=e.slice().sort(),r=[];for(let e=0;e<t.length-1;e++)t[e+1]==t[e]&&r.push(t[e]);return r}(o[h].map((e=>e.value||e.variable.value)));if(t.length>0)throw Error("Two or more of the resulting columns have the same name (?"+t[0]+")");this.$=Ar(o[h-1],{variables:o[h]});break;case 10:this.$=Ar({queryType:"SELECT"},o[h]&&(o[h-1]=Er(o[h]),o[h]={},o[h][o[h-1]]=!0,o[h]));break;case 11:case 12:this.$=Ar(o[h-3],o[h-2],o[h-1],o[h],{type:"query"});break;case 13:case 100:case 137:case 166:this.$=kr(o[h]);break;case 14:case 28:this.$=Or(o[h-3],{variable:kr(o[h-1])});break;case 15:this.$=Jr(Or(o[h-3],{variable:kr(o[h-1])}));break;case 16:this.$=Ar({queryType:"CONSTRUCT",template:o[h-3]},Pr(o[h-2]),o[h-1],o[h]);break;case 17:this.$=Ar({queryType:"CONSTRUCT",template:o[h-2]=o[h-2]?o[h-2].triples:[]},Pr(o[h-5]),{where:[{type:"bgp",triples:Rr([],o[h-2])}]},o[h]);break;case 18:this.$=Ar({queryType:"DESCRIBE",variables:"*"===o[h-3]?[new lr]:o[h-3].map(kr)},Pr(o[h-2]),o[h-1],o[h]);break;case 19:this.$=Ar({queryType:"ASK"},Pr(o[h-2]),o[h-1],o[h]);break;case 20:case 61:this.$={iri:o[h],named:!!o[h-1]};break;case 21:this.$={where:o[h].patterns};break;case 22:this.$=Ar(o[h-1],o[h]);break;case 23:this.$=Ar(o[h-2],o[h-1],o[h]);break;case 24:this.$={group:o[h]};break;case 25:case 26:case 32:case 34:this.$=Or(o[h]);break;case 27:this.$=Or(o[h-1]);break;case 29:case 35:this.$=Or(kr(o[h]));break;case 30:this.$={having:o[h]};break;case 31:this.$={order:o[h]};break;case 33:this.$=Or(o[h],{descending:!0});break;case 36:this.$={limit:Dr(o[h])};break;case 37:this.$={offset:Dr(o[h])};break;case 38:this.$={limit:Dr(o[h-2]),offset:Dr(o[h])};break;case 39:this.$={limit:Dr(o[h]),offset:Dr(o[h-2])};break;case 40:this.$={type:"values",values:o[h]};break;case 41:this.$=o[h-1].map((function(e){var t={};return t[o[h-3]]=e,t}));break;case 42:this.$=o[h-1].map((function(){return{}}));break;case 43:var f=o[h-4].length;o[h-4]=o[h-4].map(kr),this.$=o[h-1].map((function(e){if(e.length!==f)throw Error("Inconsistent VALUES length");for(var t={},r=0;r<f;r++)t["?"+o[h-4][r].value]=e[r];return t}));break;case 46:this.$=Jr(o[h]);break;case 47:this.$=void 0;break;case 48:case 92:case 117:case 167:this.$=o[h-1];break;case 49:this.$={type:"update",updates:Sr(o[h-2],o[h-1])};break;case 50:this.$=Ar({type:"load",silent:!!o[h-2],source:o[h-1]},o[h]&&{destination:o[h]});break;case 51:this.$={type:Er(o[h-2]),silent:!!o[h-1],graph:o[h]};break;case 52:this.$={type:Er(o[h-4]),silent:!!o[h-3],source:o[h-2],destination:o[h]};break;case 53:this.$={type:"create",silent:!!o[h-2],graph:{type:"graph",name:o[h]}};break;case 54:this.$={updateType:"insert",insert:Zr(o[h])};break;case 55:this.$={updateType:"delete",delete:en(Zr(o[h]))};break;case 56:this.$={updateType:"deletewhere",delete:en(o[h])};break;case 57:this.$=Ar({updateType:"insertdelete"},o[h-5],{insert:o[h-4]||[]},{delete:o[h-3]||[]},Pr(o[h-2],"using"),{where:o[h].patterns});break;case 58:this.$=Ar({updateType:"insertdelete"},o[h-5],{delete:o[h-4]||[]},{insert:o[h-3]||[]},Pr(o[h-2],"using"),{where:o[h].patterns});break;case 59:this.$=en(o[h]);break;case 60:case 63:case 160:case 181:this.$=o[h];break;case 62:this.$={graph:o[h]};break;case 64:this.$={type:"graph",default:!0};break;case 65:case 66:this.$={type:"graph",name:o[h]};break;case 67:this.$={},this.$[Er(o[h])]=!0;break;case 68:this.$=o[h-2]?Tr(o[h-1],[o[h-2]]):Tr(o[h-1]);break;case 69:var d=Ar(o[h-3]||{triples:[]},{type:"graph",name:kr(o[h-5])});this.$=o[h]?[d,o[h]]:[d];break;case 70:case 75:this.$={type:"bgp",triples:Tr(o[h-2],[o[h-1]])};break;case 71:this.$={type:"group",patterns:[o[h-1]]};break;case 72:for(const e of o[h-1].filter((e=>"bind"===e.type))){const t=o[h-1].indexOf(e),r=new Set;for(const e of o[h-1].slice(0,t))"group"!==e.type&&"bgp"!==e.type||Kr(e).forEach((e=>r.add(e)));if(r.has(e.variable.value))throw Error("Variable used to bind is already bound (?"+e.variable.value+")")}this.$={type:"group",patterns:o[h-1]};break;case 73:this.$=o[h-1]?Tr([o[h-1]],o[h]):Tr(o[h]);break;case 74:this.$=o[h]?[o[h-2],o[h]]:o[h-2];break;case 76:o[h-1].length?this.$={type:"union",patterns:Tr(o[h-1].map(Fr),[Fr(o[h])])}:this.$=o[h];break;case 77:this.$=Ar(o[h],{type:"optional"});break;case 78:this.$=Ar(o[h],{type:"minus"});break;case 79:this.$=Ar(o[h],{type:"graph",name:kr(o[h-1])});break;case 80:this.$=Ar(o[h],{type:"service",name:kr(o[h-1]),silent:!!o[h-2]});break;case 81:this.$={type:"filter",expression:o[h]};break;case 82:this.$={type:"bind",variable:kr(o[h-1]),expression:o[h-3]};break;case 83:this.$=Jr({type:"bind",variable:kr(o[h-1]),expression:o[h-3]});break;case 88:this.$={type:"functionCall",function:o[h-1],args:[]};break;case 89:this.$={type:"functionCall",function:o[h-5],args:Sr(o[h-2],o[h-1]),distinct:!!o[h-3]};break;case 90:case 108:case 119:case 210:case 218:case 220:case 232:case 234:case 244:case 248:case 268:case 270:case 274:case 278:case 301:case 307:case 318:case 328:case 334:case 340:case 344:case 354:case 356:case 360:case 368:case 372:case 374:case 382:case 384:case 388:case 390:case 399:case 431:case 433:case 443:case 447:case 449:case 451:this.$=[];break;case 91:this.$=Sr(o[h-2],o[h-1]);break;case 93:this.$=Tr(o[h-2],[o[h-1]]);break;case 94:case 105:this.$=o[h].map((function(e){return Ar(Lr(o[h-1]),e)}));break;case 95:this.$=Rr(o[h].map((function(e){return Ar(Lr(o[h-1].entity),e)})),o[h-1].triples);break;case 97:this.$=Tr([o[h-1]],o[h]);break;case 98:this.$=Tr(o[h]);break;case 99:this.$=Hr(o[h-1],o[h]);break;case 102:case 115:case 122:this.$=rn.factory.namedNode(cr);break;case 103:case 104:this.$=Sr(o[h-1],o[h]);break;case 106:this.$=o[h]?Rr(o[h].map((function(e){return Ar(Lr(o[h-1].entity),e)})),o[h-1].triples):o[h-1].triples;break;case 107:this.$=Hr(kr(o[h-3]),Sr(o[h-2],o[h-1]),o[h]);break;case 109:this.$=Hr(kr(o[h-1]),o[h]);break;case 110:this.$=o[h-1].length?Ir("|",Sr(o[h-1],o[h])):o[h];break;case 111:this.$=o[h-1].length?Ir("/",Sr(o[h-1],o[h])):o[h];break;case 112:this.$=o[h]?Ir(o[h],[o[h-1]]):o[h-1];break;case 113:this.$=o[h-1]?Ir(o[h-1],[o[h]]):o[h];break;case 116:case 123:this.$=Ir(o[h-1],[o[h]]);break;case 120:this.$=Ir("|",Sr(o[h-2],o[h-1]));break;case 124:this.$=Ir(o[h-1],[rn.factory.namedNode(cr)]);break;case 125:case 127:this.$=function(e){var t=Mr(),r=t,n=[],i=[];e.forEach((function(e){n.push(e.entity),Rr(i,e.triples)}));for(var o=0,a=0,s=n.length,l=Array(2*s);o<s;)l[a++]=Lr(r,rn.factory.namedNode(hr),n[o]),l[a++]=Lr(r,rn.factory.namedNode(fr),r=++o<s?Mr():rn.factory.namedNode(dr));return{entity:t,triples:Rr(l,i)}}(o[h-1]);break;case 126:case 128:this.$=(u=o[h-1],{entity:c=Mr(),triples:u.map((function(e){return Ar(Lr(c),e)}))});break;case 129:case 131:this.$={entity:o[h],triples:[]};break;case 133:case 135:this.$=Jr(rn.factory.quad(o[h-4],o[h-3],o[h-2],kr(o[h-6])));break;case 134:case 136:this.$=Jr(rn.factory.quad(o[h-3],o[h-2],o[h-1]));break;case 141:this.$=Mr(o[h].replace(/^(_:)/,""));break;case 142:this.$=Mr();break;case 143:this.$=rn.factory.namedNode(dr);break;case 144:case 146:case 151:case 155:this.$=jr(o[h-1],o[h]);break;case 145:this.$=["||",o[h]];break;case 147:this.$=["&&",o[h]];break;case 149:this.$=Nr(o[h-1],[o[h-2],o[h]]);break;case 150:this.$=Nr(o[h-2]?"notin":"in",[o[h-3],o[h]]);break;case 152:case 156:this.$=[o[h-1],o[h]];break;case 153:this.$=["+",jr(o[h-1],o[h])];break;case 154:var p=Cr(o[h-1].value.replace("-",""),o[h-1].datatype);this.$=["-",jr(p,o[h])];break;case 157:this.$=Nr("UPLUS",[o[h]]);break;case 158:this.$=Nr(o[h-1],[o[h]]);break;case 159:this.$=Nr("UMINUS",[o[h]]);break;case 169:this.$=Nr(Er(o[h-1]));break;case 170:this.$=Nr(Er(o[h-3]),[o[h-1]]);break;case 171:this.$=Nr(Er(o[h-5]),[o[h-3],o[h-1]]);break;case 172:this.$=Nr(Er(o[h-7]),[o[h-5],o[h-3],o[h-1]]);break;case 173:this.$=Nr(Er(o[h-1]),o[h]);break;case 174:this.$=Nr("bound",[kr(o[h-1])]);break;case 175:this.$=Nr(o[h-1],[]);break;case 176:this.$=Nr(o[h-3],[o[h-1]]);break;case 177:this.$=Nr(o[h-2]?"notexists":"exists",[Fr(o[h])]);break;case 178:case 179:this.$=Or(o[h-1],{type:"aggregate",aggregation:Er(o[h-4]),distinct:!!o[h-2]});break;case 180:this.$=Or(o[h-2],{type:"aggregate",aggregation:Er(o[h-5]),distinct:!!o[h-3],separator:o[h-1]||" "});break;case 182:this.$=Cr(o[h]);break;case 183:this.$=(s=o[h-1],l=Er(o[h].substr(1)),rn.factory.literal(s,l));break;case 184:this.$=Cr(o[h-2],o[h]);break;case 185:case 198:this.$=Cr(o[h],br);break;case 186:case 199:this.$=Cr(o[h],yr);break;case 187:case 200:this.$=Cr(Er(o[h]),gr);break;case 190:this.$=Cr(o[h].toLowerCase(),_r);break;case 191:case 192:this.$=Wr(o[h],1);break;case 193:case 194:this.$=Wr(o[h],3);break;case 195:this.$=Cr(o[h].substr(1),br);break;case 196:this.$=Cr(o[h].substr(1),yr);break;case 197:this.$=Cr(o[h].substr(1).toLowerCase(),gr);break;case 201:this.$=rn.factory.namedNode(xr(o[h]));break;case 202:var b=o[h].indexOf(":"),y=o[h].substr(0,b),g=rn.prefixes[y];if(!g)throw new Error("Unknown prefix: "+y);var _=xr(g+o[h].substr(b+1));this.$=rn.factory.namedNode(_);break;case 203:if(o[h]=o[h].substr(0,o[h].length-1),!(o[h]in rn.prefixes))throw new Error("Unknown prefix: "+o[h]);_=xr(rn.prefixes[o[h]]),this.$=rn.factory.namedNode(_);break;case 211:case 219:case 221:case 223:case 233:case 235:case 241:case 245:case 249:case 263:case 265:case 267:case 269:case 271:case 273:case 275:case 277:case 302:case 308:case 319:case 335:case 369:case 385:case 404:case 406:case 432:case 434:case 444:case 448:case 450:case 452:o[h-1].push(o[h]);break;case 222:case 240:case 262:case 264:case 266:case 272:case 276:case 403:case 405:this.$=[o[h]];break;case 279:o[h-3].push(o[h-2]);break;case 329:case 341:case 345:case 355:case 357:case 361:case 373:case 375:case 383:case 389:case 391:case 400:o[h-2].push(o[h-1])}},table:[e(t,i,{3:1,4:2,7:3}),{1:[3]},e(o,[2,278],{5:4,8:5,313:6,9:7,103:8,17:9,40:10,49:11,54:12,104:13,18:14,22:15,25:19,6:[2,204],28:a,41:[1,16],50:[1,17],55:[1,18]}),e([6,28,41,50,55,107,117,120,122,123,132,133,138,322,323,324,325,326],[2,2],{314:21,11:22,14:23,12:[1,24],15:[1,25]}),{6:[1,26]},{6:[2,206]},{6:[2,207]},{6:[2,216],10:27,89:28,90:s},{6:[2,205]},e(l,[2,212]),e(l,[2,213]),e(l,[2,214]),e(l,[2,215]),{105:30,107:[1,31],110:32,113:33,117:[1,34],120:[1,35],122:[1,36],123:[1,37],124:38,128:39,132:[2,303],133:[2,297],137:45,138:[1,46],322:[1,40],323:[1,41],324:[1,42],325:[1,43],326:[1,44]},e(u,[2,218],{19:47}),e(u,[2,220],{23:48}),e(c,[2,234],{42:49,44:50,46:[1,51]}),{13:h,16:f,26:[1,54],34:d,51:52,60:57,312:p,318:55,319:53},e(u,[2,248],{56:61}),{26:[1,62],27:63,33:64,34:b,35:y},e(g,[2,226],{29:67,315:68,316:[1,69],317:[1,70]}),e(t,[2,211]),e(t,[2,208]),e(t,[2,209]),{13:[1,71]},{16:[1,72]},{1:[2,1]},{6:[2,3]},{6:[2,217]},{34:[1,74],35:[1,76],91:73,93:[1,75]},{6:[2,280],106:77,191:[1,78]},e(_,[2,282],{108:79,321:[1,80]}),e(m,[2,288],{111:81,321:[1,82]}),e(w,[2,293],{114:83,321:[1,84]}),{118:85,119:[2,295],321:[1,86]},{46:v,121:87},{46:v,121:89},{46:v,121:90},{125:91,133:E},{129:93,132:S},e(R,[2,286]),e(R,[2,287]),e(A,[2,290]),e(A,[2,291]),e(A,[2,292]),{132:[2,304],133:[2,298]},{13:h,16:f,60:95,312:p},{20:96,45:T,46:x,57:97,58:k,61:98},{20:101,45:T,46:x,57:102,58:k,61:98},e(u,[2,232],{43:103}),{45:[1,104],57:105,58:k},e(N,[2,360],{179:106,180:107,181:108,48:[2,358]}),e(O,[2,244],{52:109}),e(O,[2,242],{60:57,318:110,13:h,16:f,34:d,312:p}),e(O,[2,243]),e(I,[2,240]),e(I,[2,238]),e(I,[2,239]),e(j,[2,201]),e(j,[2,202]),e(j,[2,203]),{20:111,45:T,46:x,57:112,58:k,61:98},e(u,[2,8]),e(u,[2,9],{33:113,34:b,35:y}),e(P,[2,222]),e(P,[2,13]),{13:h,16:f,34:D,35:F,36:114,39:115,60:128,72:127,73:129,82:126,87:C,98:130,219:L,231:M,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(g,[2,10]),e(g,[2,227]),e(g,[2,224]),e(g,[2,225]),e(t,[2,4]),{13:[1,168]},e(ye,[2,40]),{46:[1,169]},{46:[1,170]},{34:[1,172],95:171},{6:[2,49]},e(t,i,{7:3,4:173}),{13:h,16:f,60:174,312:p},e(_,[2,283]),{112:175,119:[1,176],141:[1,178],143:177,320:[1,179],327:[1,180]},e(m,[2,289]),e(_,ge,{115:181,142:183,119:_e,141:me}),e(w,[2,294]),{119:[1,185]},{119:[2,296]},e(we,[2,54]),e(N,ve,{144:186,151:187,152:188,48:Ee,119:Ee}),e(we,[2,55]),e(we,[2,56]),e(Se,[2,299],{126:189,129:190,132:S}),{46:v,121:191},e(Se,[2,305],{130:192,125:193,133:E}),{46:v,121:194},e([132,133],[2,62]),e(Re,Ae,{21:195,64:196,74:197,75:Te}),e(u,[2,219]),{46:xe,62:199},e(_,[2,250],{59:201,320:[1,202]}),{46:[2,253]},e(ke,Ne,{24:203,63:204,67:205,68:Oe}),e(u,[2,221]),{20:207,45:T,46:x,57:208,58:k,61:98},{46:[1,209]},e(c,[2,235]),{48:[1,210]},{48:[2,359]},{13:h,16:f,34:Ie,35:je,39:215,60:220,87:C,93:Pe,98:221,153:211,183:212,185:213,226:De,231:M,243:214,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(Le,[2,246],{61:98,53:225,57:226,20:227,45:T,46:x,58:k}),e(I,[2,241]),e(ke,Ne,{63:204,67:205,24:228,68:Oe}),e(u,[2,249]),e(P,[2,223]),{37:[1,229]},{37:[1,230]},e(Me,[2,431],{248:231}),{13:h,16:f,34:Ie,39:234,60:220,87:C,93:Pe,98:221,119:[1,232],231:M,236:233,243:235,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(Be,[2,433],{252:236}),e(Be,[2,148],{256:237,257:238,258:[2,441],295:[1,239],334:[1,240],335:[1,241],336:[1,242],337:[1,243],338:[1,244],339:[1,245]}),e($e,[2,443],{260:246}),e(Ue,[2,451],{268:247}),{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,263:146,265:147,272:248,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,263:146,265:147,272:249,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,263:146,265:147,272:250,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(Ue,[2,160]),e(Ue,[2,161]),e(Ue,[2,162]),e(Ue,[2,163],{35:qe,93:Ge}),e(Ue,[2,164]),e(Ue,[2,165]),e(Ue,[2,166]),{13:h,16:f,34:D,35:F,36:253,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(We,[2,168]),{93:[1,254]},{35:[1,255]},{35:[1,256]},{35:[1,257]},{35:He,93:Ve,177:258},{35:[1,261]},{35:[1,263],93:[1,262]},{284:[1,264]},e(Qe,[2,182],{297:[1,265],298:[1,266]}),e(Qe,[2,185]),e(Qe,[2,186]),e(Qe,[2,187]),e(Qe,[2,188]),e(Qe,[2,189]),e(Qe,[2,190]),{35:[1,267]},{35:[1,268]},{35:[1,269]},e(ze,[2,455]),e(ze,[2,456]),e(ze,[2,457]),e(ze,[2,458]),e(ze,[2,459]),{284:[2,461]},e(Ye,[2,191]),e(Ye,[2,192]),e(Ye,[2,193]),e(Ye,[2,194]),e(Qe,[2,195]),e(Qe,[2,196]),e(Qe,[2,197]),e(Qe,[2,198]),e(Qe,[2,199]),e(Qe,[2,200]),e(t,[2,5]),e(Xe,[2,268],{92:270}),e(Ke,[2,270],{94:271}),{34:[1,273],38:[1,272]},e(Je,[2,272]),e(o,[2,279],{6:[2,281]}),e(we,[2,284],{109:274,139:275,140:[1,276]}),e(we,[2,51]),{13:h,16:f,60:277,312:p},e(we,[2,67]),e(we,[2,313]),e(we,[2,314]),e(we,[2,315]),{116:[1,278]},e(Ze,[2,64]),{13:h,16:f,60:279,312:p},e(_,[2,312]),{13:h,16:f,60:280,312:p},e(et,[2,318],{145:281}),e(et,[2,317]),{13:h,16:f,34:Ie,35:je,39:215,60:220,87:C,93:Pe,98:221,153:282,183:212,185:213,226:De,231:M,243:214,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(Se,[2,301],{127:283}),e(Se,[2,300]),e([45,132,135],[2,60]),e(Se,[2,307],{131:284}),e(Se,[2,306]),e([45,133,135],[2,59]),e(l,[2,6]),e(tt,[2,258],{65:285,77:286,78:[1,287]}),e(Re,[2,257]),{13:h,16:f,35:F,60:293,72:291,73:292,76:288,82:290,84:289,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e([6,48,68,75,78,86,88,90],[2,21]),e(N,rt,{25:19,30:294,155:295,18:296,22:297,156:298,162:299,163:300,28:a,46:nt,48:nt,90:nt,119:nt,167:nt,168:nt,170:nt,173:nt,174:nt}),{13:h,16:f,60:301,312:p},e(_,[2,251]),e(l,[2,7]),e(Re,Ae,{64:196,74:197,21:302,75:Te}),e(ke,[2,255]),{69:[1,303]},e(ke,Ne,{63:204,67:205,24:304,68:Oe}),e(u,[2,233]),e(N,ve,{152:188,47:305,151:306,48:[2,236]}),e(u,[2,92]),{48:[2,362],182:307,328:[1,308]},{13:h,16:f,34:it,60:313,184:309,188:310,193:311,195:ot,312:p},e(at,[2,366],{188:310,193:311,60:313,186:315,187:316,184:317,13:h,16:f,34:it,195:ot,312:p}),e(st,[2,364]),e(st,[2,365]),{13:h,16:f,34:Ie,35:je,39:323,60:220,87:C,93:Pe,98:221,185:321,197:319,225:318,226:De,229:320,231:M,243:322,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},{13:h,16:f,34:it,60:313,184:324,188:310,193:311,195:ot,312:p},e(lt,[2,137]),e(lt,[2,138]),e(lt,[2,139]),e(lt,[2,140]),e(lt,[2,141]),e(lt,[2,142]),e(lt,[2,143]),e(ke,Ne,{63:204,67:205,24:325,68:Oe}),e(O,[2,245]),e(Le,[2,247]),e(l,[2,19]),{34:[1,326]},{34:[1,327]},e([37,38,191,278],[2,144],{249:328,250:[1,329]}),{13:h,16:f,34:[1,331],60:332,232:330,312:p},{13:h,16:f,34:it,60:313,193:333,195:ot,312:p},e(st,[2,417]),e(st,[2,418]),e(Me,[2,146],{253:334,254:[1,335]}),{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,219:L,255:336,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{258:[1,337]},e(ut,[2,435]),e(ut,[2,436]),e(ut,[2,437]),e(ut,[2,438]),e(ut,[2,439]),e(ut,[2,440]),{258:[2,442]},e([37,38,191,250,254,258,278,295,334,335,336,337,338,339],[2,151],{261:338,262:339,263:340,265:341,271:[1,342],273:[1,343],306:ie,307:oe,308:ae,309:se,310:le,311:ue}),e($e,[2,155],{269:344,270:345,26:ct,331:ht}),e(Ue,[2,157]),e(Ue,[2,158]),e(Ue,[2,159]),e(We,[2,88]),e(ut,[2,352],{175:348,316:[1,349]}),{38:[1,350]},e(We,[2,169]),{13:h,16:f,34:D,35:F,36:351,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{13:h,16:f,34:D,35:F,36:352,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{13:h,16:f,34:D,35:F,36:353,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(We,[2,173]),e(We,[2,90]),e(ut,[2,356],{178:354}),{34:[1,355]},e(We,[2,175]),{13:h,16:f,34:D,35:F,36:356,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{46:xe,62:357},e(Qe,[2,183]),{13:h,16:f,60:358,312:p},e(ft,[2,462],{286:359,316:[1,360]}),e(ut,[2,466],{289:361,316:[1,362]}),e(ut,[2,468],{291:363,316:[1,364]}),{13:h,16:f,48:[1,365],60:367,87:C,97:366,98:368,99:369,100:dt,231:pt,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},{48:[1,372],93:[1,373]},{46:[1,374]},e(Je,[2,273]),e(we,[2,50]),e(we,[2,285]),{119:[1,375]},e(we,[2,66]),e(_,ge,{142:183,115:376,119:_e,141:me}),e(Ze,[2,65]),e(we,[2,53]),{48:[1,377],119:[1,379],146:378},e(et,[2,330],{154:380,328:[1,381]}),{45:[1,382],134:383,135:bt},{45:[1,385],134:386,135:bt},e(yt,[2,260],{66:387,85:388,86:[1,389],88:[1,390]}),e(tt,[2,259]),{69:[1,391]},e(Re,[2,30],{274:133,280:138,283:141,82:290,72:291,73:292,60:293,84:392,13:h,16:f,35:F,275:U,276:q,277:G,279:W,281:H,282:V,284:Q,285:z,288:Y,290:X,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be}),e(gt,[2,264]),e(_t,[2,85]),e(_t,[2,86]),e(_t,[2,87]),{35:qe,93:Ge},{48:[1,393]},{48:[1,394]},{20:395,45:T,46:x,61:98},{20:396,45:T,46:x,61:98},e(mt,[2,334],{157:397}),e(mt,[2,333]),{13:h,16:f,34:Ie,35:wt,39:402,60:220,87:C,93:Pe,98:221,164:398,201:399,203:400,226:vt,231:M,243:401,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(O,[2,20]),e(yt,[2,22]),{13:h,16:f,34:Et,35:St,60:293,70:405,71:406,72:407,73:408,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(l,[2,16]),{48:[1,411]},{48:[2,237]},{48:[2,93]},e(N,[2,361],{48:[2,363]}),e(at,[2,94]),e(Rt,[2,368],{189:412}),e(N,[2,372],{194:413,196:414}),e(N,[2,100]),e(N,[2,101]),e(N,[2,102]),e(at,[2,95]),e(at,[2,96]),e(at,[2,367]),{13:h,16:f,34:Ie,35:je,38:[1,415],39:323,60:220,87:C,93:Pe,98:221,185:321,197:416,226:De,229:320,231:M,243:322,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(At,[2,403]),e(Tt,[2,129]),e(Tt,[2,130]),e(Tt,[2,407]),e(Tt,[2,408]),{227:[1,417]},e(l,[2,18]),{38:[1,418]},{38:[1,419]},e(Me,[2,432]),{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:420,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{46:[1,421]},{46:[2,411]},{46:[2,412]},{13:h,16:f,34:Ie,39:423,60:220,87:C,93:Pe,98:221,231:M,237:422,243:424,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(Be,[2,434]),{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,219:L,251:425,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(Be,[2,149]),{35:He,93:Ve,177:426},e($e,[2,444]),{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,219:L,259:427,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(Ue,[2,447],{264:428}),e(Ue,[2,449],{266:429}),e(ut,[2,445]),e(ut,[2,446]),e(Ue,[2,452]),{13:h,16:f,34:D,35:F,60:128,72:127,73:129,82:126,87:C,98:130,219:L,263:146,265:147,267:430,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(ut,[2,453]),e(ut,[2,454]),e(ut,[2,354],{176:431}),e(ut,[2,353]),e([6,13,16,26,34,35,37,38,46,48,78,81,83,86,87,88,90,93,119,167,168,170,173,174,191,226,231,245,246,250,254,258,271,273,275,276,277,278,279,281,282,284,285,288,290,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339,340,341,342,343,344],[2,167]),{38:[1,432]},{278:[1,433]},{278:[1,434]},{13:h,16:f,34:D,35:F,36:435,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{38:[1,436]},{38:[1,437]},e(We,[2,177]),e(Qe,[2,184]),{13:h,16:f,26:[1,439],34:D,35:F,36:440,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,287:438,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(ft,[2,463]),{13:h,16:f,34:D,35:F,36:441,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(ut,[2,467]),{13:h,16:f,34:D,35:F,36:442,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(ut,[2,469]),e(ye,[2,41]),e(Xe,[2,269]),e(xt,[2,44]),e(xt,[2,45]),e(xt,[2,46]),e(xt,[2,47]),{13:h,16:f,60:220,87:C,93:Pe,98:221,99:445,119:[1,443],231:pt,241:444,244:446,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(ye,[2,42]),e(Ke,[2,271]),e(kt,[2,274],{96:447}),{13:h,16:f,60:448,312:p},e(we,[2,52]),e([6,45,132,133,135,191],[2,68]),e(et,[2,319]),{13:h,16:f,34:[1,450],60:451,147:449,312:p},e(et,[2,70]),e(N,[2,329],{48:Nt,119:Nt}),{46:xe,62:452},e(Se,[2,302]),e(_,[2,309],{136:453,320:[1,454]}),{46:xe,62:455},e(Se,[2,308]),e(yt,[2,23]),e(yt,[2,261]),{87:[1,456]},{87:[1,457]},{13:h,16:f,34:Ot,35:F,60:293,72:291,73:292,79:458,80:459,81:It,82:290,83:jt,84:462,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(gt,[2,265]),e(Pt,[2,71]),e(Pt,[2,72]),e(Re,Ae,{64:196,74:197,21:464,75:Te}),e(ke,Ne,{63:204,67:205,24:465,68:Oe}),{46:[2,344],48:[2,73],89:475,90:s,119:[1,471],158:466,159:467,166:468,167:[1,469],168:[1,470],170:[1,472],173:[1,473],174:[1,474]},e(mt,[2,342],{165:476,328:[1,477]}),e(Dt,Ft,{202:478,205:479,210:480,211:482,34:Ct}),e(Lt,[2,378],{205:479,210:480,211:482,204:483,202:484,13:Ft,16:Ft,35:Ft,195:Ft,219:Ft,224:Ft,312:Ft,34:Ct}),e(Mt,[2,376]),e(Mt,[2,377]),{13:h,16:f,34:Ie,35:wt,39:490,60:220,87:C,93:Pe,98:221,200:486,203:488,226:vt,228:485,230:487,231:M,243:489,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(Dt,Ft,{205:479,210:480,211:482,202:491,34:Ct}),e(ke,[2,24],{274:133,280:138,283:141,60:293,72:407,73:408,71:492,13:h,16:f,34:Et,35:St,275:U,276:q,277:G,279:W,281:H,282:V,284:Q,285:z,288:Y,290:X,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be}),e(Bt,[2,262]),e(Bt,[2,25]),e(Bt,[2,26]),{13:h,16:f,34:D,35:F,36:493,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(Bt,[2,29]),e(ke,Ne,{63:204,67:205,24:494,68:Oe}),e([48,119,227,328],[2,97],{190:495,191:[1,496]}),e(Rt,[2,99]),{13:h,16:f,34:Ie,35:je,39:323,60:220,87:C,93:Pe,98:221,185:321,197:497,226:De,229:320,231:M,243:322,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e($t,[2,125]),e(At,[2,404]),e($t,[2,126]),e(P,[2,14]),e(P,[2,15]),e(Me,[2,145]),{13:h,16:f,34:Ie,39:499,60:220,87:C,93:Pe,98:221,231:M,233:498,243:500,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},{235:[1,501]},{235:[2,419]},{235:[2,420]},e(Be,[2,147]),e(Be,[2,150]),e($e,[2,152]),e($e,[2,153],{270:345,269:502,26:ct,331:ht}),e($e,[2,154],{270:345,269:503,26:ct,331:ht}),e(Ue,[2,156]),{13:h,16:f,34:D,35:F,36:504,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(We,[2,170]),{13:h,16:f,34:D,35:F,36:505,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{13:h,16:f,34:D,35:F,36:506,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{38:[1,507],278:[1,508]},e(We,[2,174]),e(We,[2,176]),{38:[1,509]},{38:[2,464]},{38:[2,465]},{38:[1,510]},{38:[2,470],191:[1,513],292:511,293:512},{13:h,16:f,34:[1,515],60:516,238:514,312:p},{13:h,16:f,34:it,60:313,193:517,195:ot,312:p},e(st,[2,427]),e(st,[2,428]),{35:[1,520],48:[1,518],101:519},e(we,[2,63]),{46:[1,521]},{46:[2,320]},{46:[2,321]},e(we,[2,57]),{13:h,16:f,60:522,312:p},e(_,[2,310]),e(we,[2,58]),e(yt,[2,36],{88:[1,523]}),e(yt,[2,37],{86:[1,524]}),e(tt,[2,31],{274:133,280:138,283:141,82:290,72:291,73:292,60:293,84:462,80:525,13:h,16:f,34:Ot,35:F,81:It,83:jt,275:U,276:q,277:G,279:W,281:H,282:V,284:Q,285:z,288:Y,290:X,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be}),e(Ut,[2,266]),{35:F,82:526},{35:F,82:527},e(Ut,[2,34]),e(Ut,[2,35]),{31:528,48:[2,228],89:529,90:s},{32:530,48:[2,230],89:531,90:s},e(mt,[2,335]),e(qt,[2,336],{160:532,328:[1,533]}),{46:xe,62:534},{46:xe,62:535},{46:xe,62:536},{13:h,16:f,34:[1,538],60:539,169:537,312:p},e(Gt,[2,348],{171:540,321:[1,541]}),{13:h,16:f,35:F,60:293,72:291,73:292,82:290,84:542,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{35:[1,543]},e(Wt,[2,84]),e(mt,[2,75]),e(N,[2,341],{46:Ht,48:Ht,90:Ht,119:Ht,167:Ht,168:Ht,170:Ht,173:Ht,174:Ht}),e(Lt,[2,105]),e(N,[2,382],{206:544}),e(N,[2,380]),e(N,[2,381]),e(Dt,[2,390],{212:545,213:546}),e(Lt,[2,106]),e(Lt,[2,379]),{13:h,16:f,34:Ie,35:wt,38:[1,547],39:490,60:220,87:C,93:Pe,98:221,200:548,203:488,226:vt,230:487,231:M,243:489,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(At,[2,405]),e(Vt,[2,131]),e(Vt,[2,132]),e(Vt,[2,409]),e(Vt,[2,410]),{227:[1,549]},e(Bt,[2,263]),{37:[1,551],38:[1,550]},e(l,[2,17]),e(Rt,[2,369]),e(Rt,[2,370],{193:311,60:313,192:552,188:553,13:h,16:f,34:it,195:ot,312:p}),e(Rt,[2,103],{278:[1,554]}),{13:h,16:f,34:it,60:313,193:555,195:ot,312:p},e(st,[2,413]),e(st,[2,414]),e(Qt,[2,134]),e(Ue,[2,448]),e(Ue,[2,450]),{38:[1,556],278:[1,557]},{38:[1,558]},{278:[1,559]},e(We,[2,91]),e(ut,[2,357]),e(We,[2,178]),e(We,[2,179]),{38:[1,560]},{38:[2,471]},{294:[1,561]},{46:[1,562]},{46:[2,421]},{46:[2,422]},{13:h,16:f,60:220,87:C,93:Pe,98:221,99:564,231:pt,242:563,244:565,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(ye,[2,43]),e(kt,[2,275]),{13:h,16:f,60:367,87:C,97:567,98:368,99:369,100:dt,102:566,231:pt,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(N,ve,{152:188,148:568,151:569,48:[2,322]}),e(Se,[2,61]),{87:[1,570]},{87:[1,571]},e(Ut,[2,267]),e(Ut,[2,32]),e(Ut,[2,33]),{48:[2,11]},{48:[2,229]},{48:[2,12]},{48:[2,231]},e(N,rt,{163:300,161:572,162:573,46:zt,48:zt,90:zt,119:zt,167:zt,168:zt,170:zt,173:zt,174:zt}),e(qt,[2,337]),e(Wt,[2,76],{329:[1,574]}),e(Wt,[2,77]),e(Wt,[2,78]),{46:xe,62:575},{46:[2,346]},{46:[2,347]},{13:h,16:f,34:[1,577],60:578,172:576,312:p},e(Gt,[2,349]),e(Wt,[2,81]),{13:h,16:f,34:D,35:F,36:579,39:580,60:128,72:127,73:129,82:126,87:C,98:130,219:L,231:M,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},{13:h,16:f,34:Ie,35:wt,39:490,60:220,87:C,93:Pe,98:221,200:581,203:488,226:vt,230:487,231:M,243:489,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(At,[2,110],{330:[1,582]}),e(Yt,[2,397],{214:583,218:584,224:[1,585]}),e(Xt,[2,127]),e(At,[2,406]),e(Xt,[2,128]),e(Bt,[2,27]),{34:[1,586]},e(Rt,[2,98]),e(Rt,[2,371]),e(N,[2,373]),{13:h,16:f,34:Ie,39:588,60:220,87:C,93:Pe,98:221,231:M,234:587,243:589,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(We,[2,89]),e(ut,[2,355]),e(We,[2,171]),{13:h,16:f,34:D,35:F,36:590,60:128,72:127,73:129,82:126,87:C,98:130,219:L,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:B,272:125,273:$,274:133,275:U,276:q,277:G,279:W,280:138,281:H,282:V,283:141,284:Q,285:z,288:Y,290:X,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p,339:ce,340:he,341:fe,342:de,343:pe,344:be},e(We,[2,180]),{295:[1,591]},{13:h,16:f,60:220,87:C,93:Pe,98:221,99:593,231:pt,239:592,244:594,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},{235:[1,595]},{235:[2,429]},{235:[2,430]},{13:h,16:f,38:[1,596],60:367,87:C,97:597,98:368,99:369,100:dt,231:pt,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(Kt,[2,276]),{48:[1,598]},{48:[2,323]},e(yt,[2,38]),e(yt,[2,39]),e(mt,[2,74]),e(mt,[2,339]),{46:[2,345]},e(Wt,[2,79]),{46:xe,62:599},{46:[2,350]},{46:[2,351]},{37:[1,600]},{37:[1,601]},e(Jt,[2,384],{207:602,278:[1,603]}),e(Dt,[2,389]),e([13,16,34,35,38,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,330],[2,111],{331:[1,604]}),{13:h,16:f,35:[1,610],60:607,195:[1,608],215:605,216:606,219:[1,609],312:p},e(Yt,[2,398]),{38:[1,611]},{48:[1,612]},{48:[2,415]},{48:[2,416]},{38:[1,613]},{296:614,302:ee,303:te,304:re,305:ne},{13:h,16:f,34:it,60:313,193:615,195:ot,312:p},e(st,[2,423]),e(st,[2,424]),e(Zt,[2,136]),e(kt,[2,48]),e(Kt,[2,277]),e(er,[2,324],{149:616,328:[1,617]}),e(Wt,[2,80]),{34:[1,618]},{34:[1,619]},e([46,48,90,119,167,168,170,173,174,227,328],[2,107],{208:620,191:[1,621]}),e(N,[2,383]),e(Dt,[2,391]),e(tr,[2,113]),e(tr,[2,395],{217:622,332:623,26:[1,625],271:[1,626],333:[1,624]}),e(rr,[2,114]),e(rr,[2,115]),{13:h,16:f,35:[1,630],60:631,93:[1,629],195:nr,220:627,221:628,224:ir,312:p},e(Dt,Ft,{211:482,210:634}),e(Bt,[2,28]),{235:[1,635]},e(We,[2,172]),{38:[2,181]},{13:h,16:f,60:220,87:C,93:Pe,98:221,99:637,231:pt,240:636,244:638,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},e(N,ve,{152:188,150:639,151:640,48:or,119:or}),e(er,[2,325]),{38:[1,641]},{38:[1,642]},e(Jt,[2,385]),e(Jt,[2,108],{211:482,209:643,210:644,13:Ft,16:Ft,35:Ft,195:Ft,219:Ft,224:Ft,312:Ft,34:[1,645]}),e(tr,[2,112]),e(tr,[2,396]),e(tr,[2,392]),e(tr,[2,393]),e(tr,[2,394]),e(rr,[2,116]),e(rr,[2,118]),e(rr,[2,119]),e(ar,[2,399],{222:646}),e(rr,[2,121]),e(rr,[2,122]),{13:h,16:f,60:647,195:[1,648],312:p},{38:[1,649]},e(Qt,[2,133]),{48:[1,650]},{48:[2,425]},{48:[2,426]},e(et,[2,69]),e(et,[2,327]),e(Wt,[2,82]),e(Wt,[2,83]),e(N,[2,374],{198:651,199:652}),e(N,[2,386]),e(N,[2,387]),{13:h,16:f,38:[2,401],60:631,195:nr,221:654,223:653,224:ir,312:p},e(rr,[2,123]),e(rr,[2,124]),e(rr,[2,117]),{235:[1,655]},e(Jt,[2,109]),{13:h,16:f,34:Ie,35:wt,39:490,60:220,87:C,93:Pe,98:221,200:656,203:488,226:vt,230:487,231:M,243:489,244:219,245:Fe,246:Ce,263:146,265:147,296:142,299:K,300:J,301:Z,302:ee,303:te,304:re,305:ne,306:ie,307:oe,308:ae,309:se,310:le,311:ue,312:p},{38:[1,657]},{38:[2,402],330:[1,658]},e(Zt,[2,135]),e(Jt,[2,104],{278:[1,659]}),e(rr,[2,120]),e(ar,[2,400]),e(N,[2,375])],defaultActions:{5:[2,206],6:[2,207],8:[2,205],26:[2,1],27:[2,3],28:[2,217],77:[2,49],86:[2,296],100:[2,253],107:[2,359],157:[2,461],245:[2,442],306:[2,237],307:[2,93],331:[2,411],332:[2,412],423:[2,419],424:[2,420],439:[2,464],440:[2,465],450:[2,320],451:[2,321],512:[2,471],515:[2,421],516:[2,422],528:[2,11],529:[2,229],530:[2,12],531:[2,231],538:[2,346],539:[2,347],564:[2,429],565:[2,430],569:[2,323],574:[2,345],577:[2,350],578:[2,351],588:[2,415],589:[2,416],614:[2,181],637:[2,425],638:[2,426]},parseError:function(e,t){if(!t.recoverable){var r=new Error(e);throw r.hash=t,r}this.trace(e)},parse:function(e){var t=this,r=[0],n=[null],i=[],o=this.table,a="",s=0,l=0,u=0,c=2,h=1,f=i.slice.call(arguments,1),d=Object.create(this.lexer),p={yy:{}};for(var b in this.yy)Object.prototype.hasOwnProperty.call(this.yy,b)&&(p.yy[b]=this.yy[b]);d.setInput(e,p.yy),p.yy.lexer=d,p.yy.parser=this,void 0===d.yylloc&&(d.yylloc={});var y=d.yylloc;i.push(y);var g=d.options&&d.options.ranges;"function"==typeof p.yy.parseError?this.parseError=p.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var _,m,w,v,E,S,R,A,T,x=function(){var e;return"number"!=typeof(e=d.lex()||h)&&(e=t.symbols_[e]||e),e},k={};;){if(w=r[r.length-1],this.defaultActions[w]?v=this.defaultActions[w]:(null==_&&(_=x()),v=o[w]&&o[w][_]),void 0===v||!v.length||!v[0]){var N="";for(S in T=[],o[w])this.terminals_[S]&&S>c&&T.push("'"+this.terminals_[S]+"'");N=d.showPosition?"Parse error on line "+(s+1)+":\n"+d.showPosition()+"\nExpecting "+T.join(", ")+", got '"+(this.terminals_[_]||_)+"'":"Parse error on line "+(s+1)+": Unexpected "+(_==h?"end of input":"'"+(this.terminals_[_]||_)+"'"),this.parseError(N,{text:d.match,token:this.terminals_[_]||_,line:d.yylineno,loc:y,expected:T})}if(v[0]instanceof Array&&v.length>1)throw new Error("Parse Error: multiple actions possible at state: "+w+", token: "+_);switch(v[0]){case 1:r.push(_),n.push(d.yytext),i.push(d.yylloc),r.push(v[1]),_=null,m?(_=m,m=null):(l=d.yyleng,a=d.yytext,s=d.yylineno,y=d.yylloc,u>0&&u--);break;case 2:if(R=this.productions_[v[1]][1],k.$=n[n.length-R],k._$={first_line:i[i.length-(R||1)].first_line,last_line:i[i.length-1].last_line,first_column:i[i.length-(R||1)].first_column,last_column:i[i.length-1].last_column},g&&(k._$.range=[i[i.length-(R||1)].range[0],i[i.length-1].range[1]]),void 0!==(E=this.performAction.apply(k,[a,l,s,p.yy,v[1],n,i].concat(f))))return E;R&&(r=r.slice(0,-1*R*2),n=n.slice(0,-1*R),i=i.slice(0,-1*R)),r.push(this.productions_[v[1]][0]),n.push(k.$),i.push(k._$),A=o[r[r.length-2]][r[r.length-1]],r.push(A);break;case 3:return!0}}return!0}},lr=r(1348).R,ur="http://www.w3.org/1999/02/22-rdf-syntax-ns#",cr=ur+"type",hr=ur+"first",fr=ur+"rest",dr=ur+"nil",pr="http://www.w3.org/2001/XMLSchema#",br=pr+"integer",yr=pr+"decimal",gr=pr+"double",_r=pr+"boolean",mr="",wr="",vr="";function Er(e){return e.toLowerCase()}function Sr(e,t){return e.push(t),e}function Rr(e,t){return e.push.apply(e,t),e}function Ar(e){e||(e={});for(var t,r=1,n=arguments.length;r<n&&(t=arguments[r]||{});r++)for(var i in t)e[i]=t[i];return e}function Tr(){for(var e=[],t=0,r=arguments.length;t<r;t++)e=e.concat.apply(e,arguments[t]);return e}function xr(e){if("<"===e[0]&&(e=e.substring(1,e.length-1)),/^[a-z]+:/i.test(e))return e;if(!rn.base)throw new Error("Cannot resolve relative IRI "+e+" because no base IRI was set.");switch(mr!==rn.base&&(mr=rn.base,wr=mr.replace(/[^\/:]*$/,""),vr=mr.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0]),e[0]){case void 0:return mr;case"#":return mr+e;case"?":return mr.replace(/(?:\?.*)?$/,e);case"/":return vr+e;default:return wr+e}}function kr(e){if(e){var t=e[0];if("?"===t||"$"===t)return rn.factory.variable(e.substr(1))}return e}function Nr(e,t){return{type:"operation",operator:e,args:t||[]}}function Or(e,t){var r={expression:"*"===e?new lr:e};if(t)for(var n in t)r[n]=t[n];return r}function Ir(e,t){return{type:"path",pathType:e,items:t}}function jr(e,t){for(var r,n=0,i=t.length;n<i&&(r=t[n]);n++)e=Nr(r[0],[e,r[1]]);return e}function Pr(e,t){var r,n=[],i=[],o=e.length,a={};if(!o)return null;for(var s=0;s<o&&(r=e[s]);s++)(r.named?i:n).push(r.iri);return a[t||"from"]={default:n,named:i},a}function Dr(e){return parseInt(e,10)}function Fr(e){return"group"===e.type&&1===e.patterns.length?e.patterns[0]:e}function Cr(e,t){return t&&"NamedNode"!==t.termType&&(t=rn.factory.namedNode(t)),rn.factory.literal(e,t)}function Lr(e,t,r){var n={};return null!=e&&(n.subject=e),null!=t&&(n.predicate=t),null!=r&&(n.object=r),n}function Mr(e){return"string"==typeof e?e.startsWith("e_")?rn.factory.blankNode(e):rn.factory.blankNode("e_"+e):rn.factory.blankNode("g_"+Br++)}var Br=0;rn._resetBlanks=function(){Br=0};var $r=/\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,Ur={"\\":"\\","'":"'",'"':'"',t:"\t",b:"\b",n:"\n",r:"\r",f:"\f"},qr=/[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/,Gr=String.fromCharCode;function Wr(e,t){e=e.substring(t,e.length-t);try{e=e.replace($r,(function(e,t,r,n){var i;if(t){if(i=parseInt(t,16),isNaN(i))throw new Error;return Gr(i)}if(r){if(i=parseInt(r,16),isNaN(i))throw new Error;return i<65535?Gr(i):Gr(55296+((i-=65536)>>10),56320+(1023&i))}var o=Ur[n];if(!o)throw new Error;return o}))}catch(e){return""}if(qr.exec(e))throw new Error("Invalid unicode codepoint of surrogate pair without corresponding codepoint in "+e);return e}function Hr(e,t,r){var n=[],i=[];return t.forEach((function(t){n.push(Lr(null,e,t.entity)),Rr(i,t.triples)})),Tr(n,r||[],i)}function Vr(e){return e.variable?e.variable.value:e.value||e.expression.value}function Qr(e){if(!e)return[];if("aggregate"===e.type)return[e];if("operation"===e.type){const t=[];for(const r of e.args)t.push(...Qr(r));return t}return[]}function zr(e){const t=new Set,r=function(e){e&&("Variable"===e.termType?t.add(e):"operation"===e.type&&e.args.forEach(r))};return r(e),t}function Yr(e,t=1,r=[]){for(const n of e)t>0&&n instanceof Array?Yr(n,t-1,r):r.push(n);return r}function Xr(e){return"Variable"===e.termType}function Kr(e){if(e.triples){const t=[];for(const r of e.triples)Xr(r.subject)&&t.push(r.subject.value),Xr(r.predicate)&&t.push(r.predicate.value),Xr(r.object)&&t.push(r.object.value);return t}if(e.patterns){const t=[];for(const r of e.patterns)t.push(...Kr(r));return t}return[]}function Jr(e){if(!rn.sparqlStar)throw new Error("SPARQL* support is not enabled");return e}function Zr(e){for(const t of e){if("graph"===t.type&&"Variable"===t.name.termType)throw new Error("Detected illegal variable in GRAPH");if("bgp"===t.type||"graph"===t.type)for(const e of t.triples)if("Variable"===e.subject.termType||"Variable"===e.predicate.termType||"Variable"===e.object.termType)throw new Error("Detected illegal variable in BGP")}return e}function en(e){for(const t of e)if("bgp"===t.type)for(const e of t.triples)if("BlankNode"===e.subject.termType||"BlankNode"===e.predicate.termType||"BlankNode"===e.object.termType)throw new Error("Detected illegal blank node in BGP");return e}var tn={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,r=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var n=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),r.length-1&&(this.yylineno-=r.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:r?(r.length===n.length?this.yylloc.first_column:0)+n[n.length-r.length].length-r[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var r,n,i;if(this.options.backtrack_lexer&&(i={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(i.yylloc.range=this.yylloc.range.slice(0))),(n=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=n.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:n?n[n.length-1].length-n[n.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],r=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),r)return r;if(this._backtrack){for(var o in i)this[o]=i[o];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,r,n;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var i=this._currentRules(),o=0;o<i.length;o++)if((r=this._input.match(this.rules[i[o]]))&&(!t||r[0].length>t[0].length)){if(t=r,n=o,this.options.backtrack_lexer){if(!1!==(e=this.test_match(r,i[o])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,i[n]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){return this.next()||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{flex:!0,"case-insensitive":!0},performAction:function(e,t,r,i){switch(r){case 0:break;case 1:return 12;case 2:return 15;case 3:return 28;case 4:return 316;case 5:return 317;case 6:return 35;case 7:return 37;case 8:return 38;case 9:return 26;case 10:return 41;case 11:return 45;case 12:return 46;case 13:return 48;case 14:return 50;case 15:return 55;case 16:return 58;case 17:return 320;case 18:return 68;case 19:return 69;case 20:return 75;case 21:return 78;case 22:return 81;case 23:return 83;case 24:return 86;case 25:return 88;case 26:return 90;case 27:return 191;case 28:return 107;case 29:return 321;case 30:return 140;case 31:return 322;case 32:return 323;case 33:return 117;case 34:return 324;case 35:return 116;case 36:return 325;case 37:return 326;case 38:return 120;case 39:return 122;case 40:return 123;case 41:return 138;case 42:return 132;case 43:return 133;case 44:return 135;case 45:return 141;case 46:return 119;case 47:return 327;case 48:return 328;case 49:return 167;case 50:return 170;case 51:return 174;case 52:return 100;case 53:return 168;case 54:return 329;case 55:return 173;case 56:return 231;case 57:return 235;case 58:return 278;case 59:return 195;case 60:return 330;case 61:return 331;case 62:return 224;case 63:return 333;case 64:return 271;case 65:return 219;case 66:return 226;case 67:return 227;case 68:return 250;case 69:return 254;case 70:return 295;case 71:return 334;case 72:return 335;case 73:return 336;case 74:return 337;case 75:return 338;case 76:return 258;case 77:return 339;case 78:return 273;case 79:return 281;case 80:return 282;case 81:return 275;case 82:return 276;case 83:return 277;case 84:return 340;case 85:return 341;case 86:return 279;case 87:return 343;case 88:return 342;case 89:return 344;case 90:return 284;case 91:return 285;case 92:return 288;case 93:return 290;case 94:return 294;case 95:return 298;case 96:return 301;case 97:return 13;case 98:return 16;case 99:return 312;case 100:return 245;case 101:return 34;case 102:return 297;case 103:return 87;case 104:return 299;case 105:return 300;case 106:return 306;case 107:return 307;case 108:return 308;case 109:return 309;case 110:return 310;case 111:return 311;case 112:return"EXPONENT";case 113:return 302;case 114:return 303;case 115:return 304;case 116:return 305;case 117:return 93;case 118:return 246;case 119:return 6;case 120:return"INVALID";case 121:n.log(t.yytext)}},rules:[/^(?:\s+|(#[^\n\r]*))/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i,/^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i,/^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STRUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true|false)/i,/^(?:(<(?:[^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:)((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?))/i,/^(?:([\?\$]((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(?:-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(?:(?:[^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*'))/i,/^(?:("(?:(?:[^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*"))/i,/^(?:('''(?:(?:'|'')?(?:[^'\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*'''))/i,/^(?:("""(?:(?:"|"")?(?:[^\"\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],inclusive:!0}}};function rn(){this.yy={}}return sr.lexer=tn,rn.prototype=sr,sr.Parser=rn,new rn}();t.parser=o,t.Parser=o.Parser,t.parse=function(){return o.parse.apply(o,arguments)},t.main=function(e){e[1]||(n.log("Usage: "+e[0]+" FILE"),i.exit(1));var o=r(9270).readFileSync(r(8080).normalize(e[1]),"utf8");return t.parser.parse(o)},r.c[r.s]===e&&t.main(i.argv.slice(1))},1348:e=>{class t{constructor(){return r||this}equals(e){return e&&this.termType===e.termType}}Object.defineProperty(t.prototype,"value",{enumerable:!0,value:"*"}),Object.defineProperty(t.prototype,"termType",{enumerable:!0,value:"Wildcard"});var r=new t;e.exports.R=t},9619:(e,t,r)=>{var n=r(7107).Parser,i=r(4404),o=r(1348).R,{DataFactory:a}=r(1640);e.exports={Parser:function({prefixes:e,baseIRI:t,factory:r,sparqlStar:i,skipValidation:o,skipUngroupedVariableCheck:s}={}){var l={};for(var u in e||{})l[u]=e[u];var c=new n;return c.parse=function(){return n.base=t||"",n.prefixes=Object.create(l),n.factory=r||new a,n.sparqlStar=Boolean(i),n.skipValidation=Boolean(o)||Boolean(s),n.prototype.parse.apply(c,arguments)},c._resetBlanks=n._resetBlanks,c},Generator:i,Wildcard:o}},9249:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r(287),t)},287:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SparqlJsonParser=void 0;const n=r(1640),i=r(7077),o=r(2222);t.SparqlJsonParser=class{constructor(e){e=e||{},this.dataFactory=e.dataFactory||new n.DataFactory,this.prefixVariableQuestionMark=!!e.prefixVariableQuestionMark}parseJsonResults(e){return e.results.bindings.map((e=>this.parseJsonBindings(e)))}parseJsonResultsStream(e){const t=e=>s.emit("error",e);e.on("error",t);const r=new o;r.onError=t;let n=!1,a=!1;r.onValue=e=>{"vars"===r.key&&2===r.stack.length&&"head"===r.stack[1].key?(s.emit("variables",e.map((e=>this.dataFactory.variable(e)))),n=!0):"results"===r.key&&1===r.stack.length?a=!0:"number"==typeof r.key&&3===r.stack.length&&"results"===r.stack[1].key&&"bindings"===r.stack[2].key&&s.push(this.parseJsonBindings(e))};const s=e.on("end",(e=>{a?n||s.emit("variables",[]):s.emit("error",new Error("No valid SPARQL query results were found."))})).pipe(new i.Transform({objectMode:!0,transform(e,t,n){r.write(e),n()}}));return s}parseJsonBindings(e){const t={};for(const r in e){const n=e[r];let i=null;switch(n.type){case"bnode":i=this.dataFactory.blankNode(n.value);break;case"literal":i=n["xml:lang"]?this.dataFactory.literal(n.value,n["xml:lang"]):n.datatype?this.dataFactory.literal(n.value,this.dataFactory.namedNode(n.datatype)):this.dataFactory.literal(n.value);break;case"typed-literal":i=this.dataFactory.literal(n.value,this.dataFactory.namedNode(n.datatype));break;default:i=this.dataFactory.namedNode(n.value)}t[this.prefixVariableQuestionMark?"?"+r:r]=i}return t}parseJsonBoolean(e){if("boolean"in e)return e.boolean;throw new Error("No valid ASK response was found.")}parseJsonBooleanStream(e){return new Promise(((t,r)=>{const n=new o;n.onError=r,n.onValue=e=>{"boolean"===n.key&&"boolean"==typeof e&&1===n.stack.length&&t(e)},e.on("error",r).on("data",(e=>n.write(e))).on("end",(()=>r(new Error("No valid ASK response was found."))))}))}}},1627:(e,t,r)=>{"use strict";const{AbortError:n,codes:i}=r(1007),o=r(4732),{ERR_INVALID_ARG_TYPE:a}=i;e.exports.addAbortSignal=function(t,r){if(((e,t)=>{if("object"!=typeof e||!("aborted"in e))throw new a("signal","AbortSignal",e)})(t),!(n=r)||"function"!=typeof n.pipe)throw new a("stream","stream.Stream",r);var n;return e.exports.addAbortSignalNoValidate(t,r)},e.exports.addAbortSignalNoValidate=function(e,t){if("object"!=typeof e||!("aborted"in e))return t;const r=()=>{t.destroy(new n(void 0,{cause:e.reason}))};return e.aborted?r():(e.addEventListener("abort",r),o(t,(()=>e.removeEventListener("abort",r)))),t}},3099:(e,t,r)=>{"use strict";var n=r(8764).Buffer;const{StringPrototypeSlice:i,SymbolIterator:o,TypedArrayPrototypeSet:a,Uint8Array:s}=r(4990),{inspect:l}=r(8734);e.exports=class{constructor(){this.head=null,this.tail=null,this.length=0}push(e){const t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}unshift(e){const t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}shift(){if(0===this.length)return;const e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}clear(){this.head=this.tail=null,this.length=0}join(e){if(0===this.length)return"";let t=this.head,r=""+t.data;for(;null!==(t=t.next);)r+=e+t.data;return r}concat(e){if(0===this.length)return n.alloc(0);const t=n.allocUnsafe(e>>>0);let r=this.head,i=0;for(;r;)a(t,r.data,i),i+=r.data.length,r=r.next;return t}consume(e,t){const r=this.head.data;if(e<r.length){const t=r.slice(0,e);return this.head.data=r.slice(e),t}return e===r.length?this.shift():t?this._getString(e):this._getBuffer(e)}first(){return this.head.data}*[o](){for(let e=this.head;e;e=e.next)yield e.data}_getString(e){let t="",r=this.head,n=0;do{const o=r.data;if(!(e>o.length)){e===o.length?(t+=o,++n,r.next?this.head=r.next:this.head=this.tail=null):(t+=i(o,0,e),this.head=r,r.data=i(o,e));break}t+=o,e-=o.length,++n}while(null!==(r=r.next));return this.length-=n,t}_getBuffer(e){const t=n.allocUnsafe(e),r=e;let i=this.head,o=0;do{const n=i.data;if(!(e>n.length)){e===n.length?(a(t,n,r-e),++o,i.next?this.head=i.next:this.head=this.tail=null):(a(t,new s(n.buffer,n.byteOffset,e),r-e),this.head=i,i.data=n.slice(e));break}a(t,n,r-e),e-=n.length,++o}while(null!==(i=i.next));return this.length-=o,t}[Symbol.for("nodejs.util.inspect.custom")](e,t){return l(this,{...t,depth:0,customInspect:!1})}}},8681:(e,t,r)=>{"use strict";const{pipeline:n}=r(8714),i=r(5438),{destroyer:o}=r(7402),{isNodeStream:a,isReadable:s,isWritable:l}=r(894),{AbortError:u,codes:{ERR_INVALID_ARG_VALUE:c,ERR_MISSING_ARGS:h}}=r(1007);e.exports=function(...e){if(0===e.length)throw new h("streams");if(1===e.length)return i.from(e[0]);const t=[...e];if("function"==typeof e[0]&&(e[0]=i.from(e[0])),"function"==typeof e[e.length-1]){const t=e.length-1;e[t]=i.from(e[t])}for(let r=0;r<e.length;++r)if(a(e[r])){if(r<e.length-1&&!s(e[r]))throw new c(`streams[${r}]`,t[r],"must be readable");if(r>0&&!l(e[r]))throw new c(`streams[${r}]`,t[r],"must be writable")}let r,f,d,p,b;const y=e[0],g=n(e,(function(e){const t=p;p=null,t?t(e):e?b.destroy(e):m||_||b.destroy()})),_=!!l(y),m=!!s(g);return b=new i({writableObjectMode:!(null==y||!y.writableObjectMode),readableObjectMode:!(null==g||!g.writableObjectMode),writable:_,readable:m}),_&&(b._write=function(e,t,n){y.write(e,t)?n():r=n},b._final=function(e){y.end(),f=e},y.on("drain",(function(){if(r){const e=r;r=null,e()}})),g.on("finish",(function(){if(f){const e=f;f=null,e()}}))),m&&(g.on("readable",(function(){if(d){const e=d;d=null,e()}})),g.on("end",(function(){b.push(null)})),b._read=function(){for(;;){const e=g.read();if(null===e)return void(d=b._read);if(!b.push(e))return}}),b._destroy=function(e,t){e||null===p||(e=new u),d=null,r=null,f=null,null===p?t(e):(p=t,o(g,e))},b}},7402:(e,t,r)=>{"use strict";var n=r(4155);const{aggregateTwoErrors:i,codes:{ERR_MULTIPLE_CALLBACK:o},AbortError:a}=r(1007),{Symbol:s}=r(4990),{kDestroyed:l,isDestroyed:u,isFinished:c,isServerRequest:h}=r(894),f=s("kDestroy"),d=s("kConstruct");function p(e,t,r){e&&(e.stack,t&&!t.errored&&(t.errored=e),r&&!r.errored&&(r.errored=e))}function b(e,t,r){let i=!1;function o(t){if(i)return;i=!0;const o=e._readableState,a=e._writableState;p(t,a,o),a&&(a.closed=!0),o&&(o.closed=!0),"function"==typeof r&&r(t),t?n.nextTick(y,e,t):n.nextTick(g,e)}try{e._destroy(t||null,o)}catch(t){o(t)}}function y(e,t){_(e,t),g(e)}function g(e){const t=e._readableState,r=e._writableState;r&&(r.closeEmitted=!0),t&&(t.closeEmitted=!0),(r&&r.emitClose||t&&t.emitClose)&&e.emit("close")}function _(e,t){const r=e._readableState,n=e._writableState;n&&n.errorEmitted||r&&r.errorEmitted||(n&&(n.errorEmitted=!0),r&&(r.errorEmitted=!0),e.emit("error",t))}function m(e,t,r){const i=e._readableState,o=e._writableState;if(o&&o.destroyed||i&&i.destroyed)return this;i&&i.autoDestroy||o&&o.autoDestroy?e.destroy(t):t&&(t.stack,o&&!o.errored&&(o.errored=t),i&&!i.errored&&(i.errored=t),r?n.nextTick(_,e,t):_(e,t))}function w(e){let t=!1;function r(r){if(t)return void m(e,null!=r?r:new o);t=!0;const i=e._readableState,a=e._writableState,s=a||i;i&&(i.constructed=!0),a&&(a.constructed=!0),s.destroyed?e.emit(f,r):r?m(e,r,!0):n.nextTick(v,e)}try{e._construct(r)}catch(e){r(e)}}function v(e){e.emit(d)}function E(e){return e&&e.setHeader&&"function"==typeof e.abort}function S(e){e.emit("close")}function R(e,t){e.emit("error",t),n.nextTick(S,e)}e.exports={construct:function(e,t){if("function"!=typeof e._construct)return;const r=e._readableState,i=e._writableState;r&&(r.constructed=!1),i&&(i.constructed=!1),e.once(d,t),e.listenerCount(d)>1||n.nextTick(w,e)},destroyer:function(e,t){e&&!u(e)&&(t||c(e)||(t=new a),h(e)?(e.socket=null,e.destroy(t)):E(e)?e.abort():E(e.req)?e.req.abort():"function"==typeof e.destroy?e.destroy(t):"function"==typeof e.close?e.close():t?n.nextTick(R,e):n.nextTick(S,e),e.destroyed||(e[l]=!0))},destroy:function(e,t){const r=this._readableState,n=this._writableState,o=n||r;return n&&n.destroyed||r&&r.destroyed?("function"==typeof t&&t(),this):(p(e,n,r),n&&(n.destroyed=!0),r&&(r.destroyed=!0),o.constructed?b(this,e,t):this.once(f,(function(r){b(this,i(r,e),t)})),this)},undestroy:function(){const e=this._readableState,t=this._writableState;e&&(e.constructed=!0,e.closed=!1,e.closeEmitted=!1,e.destroyed=!1,e.errored=null,e.errorEmitted=!1,e.reading=!1,e.ended=!1===e.readable,e.endEmitted=!1===e.readable),t&&(t.constructed=!0,t.destroyed=!1,t.closed=!1,t.closeEmitted=!1,t.errored=null,t.errorEmitted=!1,t.finalCalled=!1,t.prefinished=!1,t.ended=!1===t.writable,t.ending=!1===t.writable,t.finished=!1===t.writable)},errorOrDestroy:m}},5438:(e,t,r)=>{"use strict";const{ObjectDefineProperties:n,ObjectGetOwnPropertyDescriptor:i,ObjectKeys:o,ObjectSetPrototypeOf:a}=r(4990);e.exports=u;const s=r(6420),l=r(9181);a(u.prototype,s.prototype),a(u,s);{const e=o(l.prototype);for(let t=0;t<e.length;t++){const r=e[t];u.prototype[r]||(u.prototype[r]=l.prototype[r])}}function u(e){if(!(this instanceof u))return new u(e);s.call(this,e),l.call(this,e),e?(this.allowHalfOpen=!1!==e.allowHalfOpen,!1===e.readable&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===e.writable&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)):this.allowHalfOpen=!0}let c,h;function f(){return void 0===c&&(c={}),c}n(u.prototype,{writable:i(l.prototype,"writable"),writableHighWaterMark:i(l.prototype,"writableHighWaterMark"),writableObjectMode:i(l.prototype,"writableObjectMode"),writableBuffer:i(l.prototype,"writableBuffer"),writableLength:i(l.prototype,"writableLength"),writableFinished:i(l.prototype,"writableFinished"),writableCorked:i(l.prototype,"writableCorked"),writableEnded:i(l.prototype,"writableEnded"),writableNeedDrain:i(l.prototype,"writableNeedDrain"),destroyed:{get(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set(e){this._readableState&&this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}}),u.fromWeb=function(e,t){return f().newStreamDuplexFromReadableWritablePair(e,t)},u.toWeb=function(e){return f().newReadableWritablePairFromDuplex(e)},u.from=function(e){return h||(h=r(1441)),h(e,"body")}},1441:(e,t,r)=>{"use strict";var n=r(4155);const i=r(8764),{isReadable:o,isWritable:a,isIterable:s,isNodeStream:l,isReadableNodeStream:u,isWritableNodeStream:c,isDuplexNodeStream:h}=r(894),f=r(4732),{AbortError:d,codes:{ERR_INVALID_ARG_TYPE:p,ERR_INVALID_RETURN_VALUE:b}}=r(1007),{destroyer:y}=r(7402),g=r(5438),_=r(6420),{createDeferredPromise:m}=r(8734),w=r(5513),v=globalThis.Blob||i.Blob,E=void 0!==v?function(e){return e instanceof v}:function(e){return!1},S=globalThis.AbortController||r(8599).AbortController,{FunctionPrototypeCall:R}=r(4990);class A extends g{constructor(e){super(e),!1===(null==e?void 0:e.readable)&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===(null==e?void 0:e.writable)&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)}}function T(e){const t=e.readable&&"function"!=typeof e.readable.read?_.wrap(e.readable):e.readable,r=e.writable;let n,i,s,l,u,c=!!o(t),h=!!a(r);function p(e){const t=l;l=null,t?t(e):e?u.destroy(e):c||h||u.destroy()}return u=new A({readableObjectMode:!(null==t||!t.readableObjectMode),writableObjectMode:!(null==r||!r.writableObjectMode),readable:c,writable:h}),h&&(f(r,(e=>{h=!1,e&&y(t,e),p(e)})),u._write=function(e,t,i){r.write(e,t)?i():n=i},u._final=function(e){r.end(),i=e},r.on("drain",(function(){if(n){const e=n;n=null,e()}})),r.on("finish",(function(){if(i){const e=i;i=null,e()}}))),c&&(f(t,(e=>{c=!1,e&&y(t,e),p(e)})),t.on("readable",(function(){if(s){const e=s;s=null,e()}})),t.on("end",(function(){u.push(null)})),u._read=function(){for(;;){const e=t.read();if(null===e)return void(s=u._read);if(!u.push(e))return}}),u._destroy=function(e,o){e||null===l||(e=new d),s=null,n=null,i=null,null===l?o(e):(l=o,y(r,e),y(t,e))},u}e.exports=function e(t,r){if(h(t))return t;if(u(t))return T({readable:t});if(c(t))return T({writable:t});if(l(t))return T({writable:!1,readable:!1});if("function"==typeof t){const{value:e,write:i,final:o,destroy:a}=function(e){let{promise:t,resolve:r}=m();const i=new S,o=i.signal;return{value:e(async function*(){for(;;){const e=t;t=null;const{chunk:i,done:a,cb:s}=await e;if(n.nextTick(s),a)return;if(o.aborted)throw new d(void 0,{cause:o.reason});({promise:t,resolve:r}=m()),yield i}}(),{signal:o}),write(e,t,n){const i=r;r=null,i({chunk:e,done:!1,cb:n})},final(e){const t=r;r=null,t({done:!0,cb:e})},destroy(e,t){i.abort(),t(e)}}}(t);if(s(e))return w(A,e,{objectMode:!0,write:i,final:o,destroy:a});const l=null==e?void 0:e.then;if("function"==typeof l){let t;const r=R(l,e,(e=>{if(null!=e)throw new b("nully","body",e)}),(e=>{y(t,e)}));return t=new A({objectMode:!0,readable:!1,write:i,final(e){o((async()=>{try{await r,n.nextTick(e,null)}catch(t){n.nextTick(e,t)}}))},destroy:a})}throw new b("Iterable, AsyncIterable or AsyncFunction",r,e)}if(E(t))return e(t.arrayBuffer());if(s(t))return w(A,t,{objectMode:!0,writable:!1});if("object"==typeof(null==t?void 0:t.writable)||"object"==typeof(null==t?void 0:t.readable))return T({readable:null!=t&&t.readable?u(null==t?void 0:t.readable)?null==t?void 0:t.readable:e(t.readable):void 0,writable:null!=t&&t.writable?c(null==t?void 0:t.writable)?null==t?void 0:t.writable:e(t.writable):void 0});const i=null==t?void 0:t.then;if("function"==typeof i){let e;return R(i,t,(t=>{null!=t&&e.push(t),e.push(null)}),(t=>{y(e,t)})),e=new A({objectMode:!0,writable:!1,read(){}})}throw new p(r,["Blob","ReadableStream","WritableStream","Stream","Iterable","AsyncIterable","Function","{ readable, writable } pair","Promise"],t)}},4732:(e,t,r)=>{"use strict";var n=r(4155);const{AbortError:i,codes:o}=r(1007),{ERR_INVALID_ARG_TYPE:a,ERR_STREAM_PREMATURE_CLOSE:s}=o,{once:l}=r(8734),{validateAbortSignal:u,validateFunction:c,validateObject:h}=r(9178),{Promise:f}=r(4990),{isClosed:d,isReadable:p,isReadableNodeStream:b,isReadableFinished:y,isReadableErrored:g,isWritable:_,isWritableNodeStream:m,isWritableFinished:w,isWritableErrored:v,isNodeStream:E,willEmitClose:S}=r(894);function R(e){return e.setHeader&&"function"==typeof e.abort}const A=()=>{};function T(e,t,r){var o,f;2===arguments.length?(r=t,t={}):null==t?t={}:h(t,"options"),c(r,"callback"),u(t.signal,"options.signal"),r=l(r);const T=null!==(o=t.readable)&&void 0!==o?o:b(e),x=null!==(f=t.writable)&&void 0!==f?f:m(e);if(!E(e))throw new a("stream","Stream",e);const k=e._writableState,N=e._readableState,O=()=>{e.writable||P()};let I=S(e)&&b(e)===T&&m(e)===x,j=w(e,!1);const P=()=>{j=!0,e.destroyed&&(I=!1),(!I||e.readable&&!T)&&(T&&!D||r.call(e))};let D=y(e,!1);const F=()=>{D=!0,e.destroyed&&(I=!1),(!I||e.writable&&!x)&&(x&&!j||r.call(e))},C=t=>{r.call(e,t)};let L=d(e);const M=()=>{L=!0;const t=v(e)||g(e);return t&&"boolean"!=typeof t?r.call(e,t):T&&!D&&b(e,!0)&&!y(e,!1)?r.call(e,new s):!x||j||w(e,!1)?void r.call(e):r.call(e,new s)},B=()=>{e.req.on("finish",P)};R(e)?(e.on("complete",P),I||e.on("abort",M),e.req?B():e.on("request",B)):x&&!k&&(e.on("end",O),e.on("close",O)),I||"boolean"!=typeof e.aborted||e.on("aborted",M),e.on("end",F),e.on("finish",P),!1!==t.error&&e.on("error",C),e.on("close",M),L?n.nextTick(M):null!=k&&k.errorEmitted||null!=N&&N.errorEmitted?I||n.nextTick(M):(T||I&&!p(e)||!j&&!1!==_(e))&&(x||I&&!_(e)||!D&&!1!==p(e))?N&&e.req&&e.aborted&&n.nextTick(M):n.nextTick(M);const $=()=>{r=A,e.removeListener("aborted",M),e.removeListener("complete",P),e.removeListener("abort",M),e.removeListener("request",B),e.req&&e.req.removeListener("finish",P),e.removeListener("end",O),e.removeListener("close",O),e.removeListener("finish",P),e.removeListener("end",F),e.removeListener("error",C),e.removeListener("close",M)};if(t.signal&&!L){const o=()=>{const n=r;$(),n.call(e,new i(void 0,{cause:t.signal.reason}))};if(t.signal.aborted)n.nextTick(o);else{const n=r;r=l(((...r)=>{t.signal.removeEventListener("abort",o),n.apply(e,r)})),t.signal.addEventListener("abort",o)}}return $}e.exports=T,e.exports.finished=function(e,t){return new f(((r,n)=>{T(e,t,(e=>{e?n(e):r()}))}))}},5513:(e,t,r)=>{"use strict";var n=r(8764).Buffer,i=r(4155);const{PromisePrototypeThen:o,SymbolAsyncIterator:a,SymbolIterator:s}=r(4990),{ERR_INVALID_ARG_TYPE:l,ERR_STREAM_NULL_VALUES:u}=r(1007).codes;e.exports=function(e,t,r){let c,h;if("string"==typeof t||t instanceof n)return new e({objectMode:!0,...r,read(){this.push(t),this.push(null)}});if(t&&t[a])h=!0,c=t[a]();else{if(!t||!t[s])throw new l("iterable",["Iterable"],t);h=!1,c=t[s]()}const f=new e({objectMode:!0,highWaterMark:1,...r});let d=!1;return f._read=function(){d||(d=!0,async function(){for(;;){try{const{value:e,done:t}=h?await c.next():c.next();if(t)f.push(null);else{const t=e&&"function"==typeof e.then?await e:e;if(null===t)throw d=!1,new u;if(f.push(t))continue;d=!1}}catch(e){f.destroy(e)}break}}())},f._destroy=function(e,t){o(async function(e){const t=null!=e,r="function"==typeof c.throw;if(t&&r){const{value:t,done:r}=await c.throw(e);if(await t,r)return}if("function"==typeof c.return){const{value:e}=await c.return();await e}}(e),(()=>i.nextTick(t,e)),(r=>i.nextTick(t,r||e)))},f}},7483:(e,t,r)=>{"use strict";const{ArrayIsArray:n,ObjectSetPrototypeOf:i}=r(4990),{EventEmitter:o}=r(7187);function a(e){o.call(this,e)}function s(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?n(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}i(a.prototype,o.prototype),i(a,o),a.prototype.pipe=function(e,t){const r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function i(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",i),e._isStdio||t&&!1===t.end||(r.on("end",l),r.on("close",u));let a=!1;function l(){a||(a=!0,e.end())}function u(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){h(),0===o.listenerCount(this,"error")&&this.emit("error",e)}function h(){r.removeListener("data",n),e.removeListener("drain",i),r.removeListener("end",l),r.removeListener("close",u),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",h),r.removeListener("close",h),e.removeListener("close",h)}return s(r,"error",c),s(e,"error",c),r.on("end",h),r.on("close",h),e.on("close",h),e.emit("pipe",r),e},e.exports={Stream:a,prependListener:s}},6655:(e,t,r)=>{"use strict";const n=globalThis.AbortController||r(8599).AbortController,{codes:{ERR_INVALID_ARG_TYPE:i,ERR_MISSING_ARGS:o,ERR_OUT_OF_RANGE:a},AbortError:s}=r(1007),{validateAbortSignal:l,validateInteger:u,validateObject:c}=r(9178),h=r(4990).Symbol("kWeak"),{finished:f}=r(4732),{ArrayPrototypePush:d,MathFloor:p,Number:b,NumberIsNaN:y,Promise:g,PromiseReject:_,PromisePrototypeCatch:m,Symbol:w}=r(4990),v=w("kEmpty"),E=w("kEof");function S(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);null!=t&&c(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal");let r=1;return null!=(null==t?void 0:t.concurrency)&&(r=p(t.concurrency)),u(r,"concurrency",1),async function*(){var i,o;const a=new n,l=this,u=[],c=a.signal,h={signal:c},f=()=>a.abort();let d,p;null!=t&&null!==(i=t.signal)&&void 0!==i&&i.aborted&&f(),null==t||null===(o=t.signal)||void 0===o||o.addEventListener("abort",f);let b=!1;function y(){b=!0}!async function(){try{for await(let t of l){var n;if(b)return;if(c.aborted)throw new s;try{t=e(t,h)}catch(e){t=_(e)}t!==v&&("function"==typeof(null===(n=t)||void 0===n?void 0:n.catch)&&t.catch(y),u.push(t),d&&(d(),d=null),!b&&u.length&&u.length>=r&&await new g((e=>{p=e})))}u.push(E)}catch(e){const t=_(e);m(t,y),u.push(t)}finally{var i;b=!0,d&&(d(),d=null),null==t||null===(i=t.signal)||void 0===i||i.removeEventListener("abort",f)}}();try{for(;;){for(;u.length>0;){const e=await u[0];if(e===E)return;if(c.aborted)throw new s;e!==v&&(yield e),u.shift(),p&&(p(),p=null)}await new g((e=>{d=e}))}}finally{a.abort(),b=!0,p&&(p(),p=null)}}.call(this)}async function R(e,t){for await(const r of A.call(this,e,t))return!0;return!1}function A(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);return S.call(this,(async function(t,r){return await e(t,r)?t:v}),t)}class T extends o{constructor(){super("reduce"),this.message="Reduce of an empty stream requires an initial value"}}function x(e){if(e=b(e),y(e))return 0;if(e<0)throw new a("number",">= 0",e);return e}e.exports.streamReturningOperators={asIndexedPairs:function(e){return null!=e&&c(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal"),async function*(){let t=0;for await(const n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new s({cause:e.signal.reason});yield[t++,n]}}.call(this)},drop:function(e,t){return null!=t&&c(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal"),e=x(e),async function*(){var r;if(null!=t&&null!==(r=t.signal)&&void 0!==r&&r.aborted)throw new s;for await(const r of this){var n;if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new s;e--<=0&&(yield r)}}.call(this)},filter:A,flatMap:function(e,t){const r=S.call(this,e,t);return async function*(){for await(const e of r)yield*e}.call(this)},map:S,take:function(e,t){return null!=t&&c(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal"),e=x(e),async function*(){var r;if(null!=t&&null!==(r=t.signal)&&void 0!==r&&r.aborted)throw new s;for await(const r of this){var n;if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new s;if(!(e-- >0))return;yield r}}.call(this)}},e.exports.promiseReturningOperators={every:async function(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);return!await R.call(this,(async(...t)=>!await e(...t)),t)},forEach:async function(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);for await(const r of S.call(this,(async function(t,r){return await e(t,r),v}),t));},reduce:async function(e,t,r){var o;if("function"!=typeof e)throw new i("reducer",["Function","AsyncFunction"],e);null!=r&&c(r,"options"),null!=(null==r?void 0:r.signal)&&l(r.signal,"options.signal");let a=arguments.length>1;if(null!=r&&null!==(o=r.signal)&&void 0!==o&&o.aborted){const e=new s(void 0,{cause:r.signal.reason});throw this.once("error",(()=>{})),await f(this.destroy(e)),e}const u=new n,d=u.signal;if(null!=r&&r.signal){const e={once:!0,[h]:this};r.signal.addEventListener("abort",(()=>u.abort()),e)}let p=!1;try{for await(const n of this){var b;if(p=!0,null!=r&&null!==(b=r.signal)&&void 0!==b&&b.aborted)throw new s;a?t=await e(t,n,{signal:d}):(t=n,a=!0)}if(!p&&!a)throw new T}finally{u.abort()}return t},toArray:async function(e){null!=e&&c(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal");const t=[];for await(const n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new s(void 0,{cause:e.signal.reason});d(t,n)}return t},some:R,find:async function(e,t){for await(const r of A.call(this,e,t))return r}}},7081:(e,t,r)=>{"use strict";const{ObjectSetPrototypeOf:n}=r(4990);e.exports=o;const i=r(7290);function o(e){if(!(this instanceof o))return new o(e);i.call(this,e)}n(o.prototype,i.prototype),n(o,i),o.prototype._transform=function(e,t,r){r(null,e)}},8714:(e,t,r)=>{"use strict";var n=r(4155);const{ArrayIsArray:i,Promise:o,SymbolAsyncIterator:a}=r(4990),s=r(4732),{once:l}=r(8734),u=r(7402),c=r(5438),{aggregateTwoErrors:h,codes:{ERR_INVALID_ARG_TYPE:f,ERR_INVALID_RETURN_VALUE:d,ERR_MISSING_ARGS:p,ERR_STREAM_DESTROYED:b},AbortError:y}=r(1007),{validateFunction:g,validateAbortSignal:_}=r(9178),{isIterable:m,isReadable:w,isReadableNodeStream:v,isNodeStream:E}=r(894),S=globalThis.AbortController||r(8599).AbortController;let R,A;function T(e,t,r){let n=!1;return e.on("close",(()=>{n=!0})),{destroy:t=>{n||(n=!0,u.destroyer(e,t||new b("pipe")))},cleanup:s(e,{readable:t,writable:r},(e=>{n=!e}))}}function x(e){if(m(e))return e;if(v(e))return async function*(e){A||(A=r(6420)),yield*A.prototype[a].call(e)}(e);throw new f("val",["Readable","Iterable","AsyncIterable"],e)}async function k(e,t,r,{end:n}){let i,a=null;const l=e=>{if(e&&(i=e),a){const e=a;a=null,e()}},u=()=>new o(((e,t)=>{i?t(i):a=()=>{i?t(i):e()}}));t.on("drain",l);const c=s(t,{readable:!1},l);try{t.writableNeedDrain&&await u();for await(const r of e)t.write(r)||await u();n&&t.end(),await u(),r()}catch(e){r(i!==e?h(i,e):e)}finally{c(),t.off("drain",l)}}function N(e,t,o){if(1===e.length&&i(e[0])&&(e=e[0]),e.length<2)throw new p("streams");const a=new S,s=a.signal,l=null==o?void 0:o.signal,u=[];function h(){P(new y)}let b,g;_(l,"options.signal"),null==l||l.addEventListener("abort",h);const A=[];let N,I=0;function j(e){P(e,0==--I)}function P(e,r){if(!e||b&&"ERR_STREAM_PREMATURE_CLOSE"!==b.code||(b=e),b||r){for(;A.length;)A.shift()(b);null==l||l.removeEventListener("abort",h),a.abort(),r&&(b||u.forEach((e=>e())),n.nextTick(t,b,g))}}for(let F=0;F<e.length;F++){const C=e[F],L=F<e.length-1,M=F>0,B=L||!1!==(null==o?void 0:o.end),$=F===e.length-1;if(E(C)){if(B){const{destroy:q,cleanup:G}=T(C,L,M);A.push(q),w(C)&&$&&u.push(G)}function U(e){e&&"AbortError"!==e.name&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code&&j(e)}C.on("error",U),w(C)&&$&&u.push((()=>{C.removeListener("error",U)}))}if(0===F)if("function"==typeof C){if(N=C({signal:s}),!m(N))throw new d("Iterable, AsyncIterable or Stream","source",N)}else N=m(C)||v(C)?C:c.from(C);else if("function"==typeof C)if(N=x(N),N=C(N,{signal:s}),L){if(!m(N,!0))throw new d("AsyncIterable",`transform[${F-1}]`,N)}else{var D;R||(R=r(7081));const W=new R({objectMode:!0}),H=null===(D=N)||void 0===D?void 0:D.then;if("function"==typeof H)I++,H.call(N,(e=>{g=e,null!=e&&W.write(e),B&&W.end(),n.nextTick(j)}),(e=>{W.destroy(e),n.nextTick(j,e)}));else{if(!m(N,!0))throw new d("AsyncIterable or Promise","destination",N);I++,k(N,W,j,{end:B})}N=W;const{destroy:V,cleanup:Q}=T(N,!1,!0);A.push(V),$&&u.push(Q)}else if(E(C)){if(v(N)){I+=2;const z=O(N,C,j,{end:B});w(C)&&$&&u.push(z)}else{if(!m(N))throw new f("val",["Readable","Iterable","AsyncIterable"],N);I++,k(N,C,j,{end:B})}N=C}else N=c.from(C)}return(null!=s&&s.aborted||null!=l&&l.aborted)&&n.nextTick(h),N}function O(e,t,r,{end:n}){return e.pipe(t,{end:n}),n?e.once("end",(()=>t.end())):r(),s(e,{readable:!0,writable:!1},(t=>{const n=e._readableState;t&&"ERR_STREAM_PREMATURE_CLOSE"===t.code&&n&&n.ended&&!n.errored&&!n.errorEmitted?e.once("end",r).once("error",r):r(t)})),s(t,{readable:!1,writable:!0},r)}e.exports={pipelineImpl:N,pipeline:function(...e){return N(e,l(function(e){return g(e[e.length-1],"streams[stream.length - 1]"),e.pop()}(e)))}}},6420:(e,t,r)=>{"use strict";var n=r(8764).Buffer,i=r(4155);const{ArrayPrototypeIndexOf:o,NumberIsInteger:a,NumberIsNaN:s,NumberParseInt:l,ObjectDefineProperties:u,ObjectKeys:c,ObjectSetPrototypeOf:h,Promise:f,SafeSet:d,SymbolAsyncIterator:p,Symbol:b}=r(4990);e.exports=B,B.ReadableState=M;const{EventEmitter:y}=r(7187),{Stream:g,prependListener:_}=r(7483),{addAbortSignal:m}=r(1627),w=r(4732);let v=r(8734).debuglog("stream",(e=>{v=e}));const E=r(3099),S=r(7402),{getHighWaterMark:R,getDefaultHighWaterMark:A}=r(3390),{aggregateTwoErrors:T,codes:{ERR_INVALID_ARG_TYPE:x,ERR_METHOD_NOT_IMPLEMENTED:k,ERR_OUT_OF_RANGE:N,ERR_STREAM_PUSH_AFTER_EOF:O,ERR_STREAM_UNSHIFT_AFTER_END_EVENT:I}}=r(1007),{validateObject:j}=r(9178),P=b("kPaused"),{StringDecoder:D}=r(2553),F=r(5513);h(B.prototype,g.prototype),h(B,g);const C=()=>{},{errorOrDestroy:L}=S;function M(e,t,n){"boolean"!=typeof n&&(n=t instanceof r(5438)),this.objectMode=!(!e||!e.objectMode),n&&(this.objectMode=this.objectMode||!(!e||!e.readableObjectMode)),this.highWaterMark=e?R(this,e,"readableHighWaterMark",n):A(!1),this.buffer=new E,this.length=0,this.pipes=[],this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.constructed=!0,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this[P]=null,this.errorEmitted=!1,this.emitClose=!e||!1!==e.emitClose,this.autoDestroy=!e||!1!==e.autoDestroy,this.destroyed=!1,this.errored=null,this.closed=!1,this.closeEmitted=!1,this.defaultEncoding=e&&e.defaultEncoding||"utf8",this.awaitDrainWriters=null,this.multiAwaitDrain=!1,this.readingMore=!1,this.dataEmitted=!1,this.decoder=null,this.encoding=null,e&&e.encoding&&(this.decoder=new D(e.encoding),this.encoding=e.encoding)}function B(e){if(!(this instanceof B))return new B(e);const t=this instanceof r(5438);this._readableState=new M(e,this,t),e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.construct&&(this._construct=e.construct),e.signal&&!t&&m(e.signal,this)),g.call(this,e),S.construct(this,(()=>{this._readableState.needReadable&&H(this,this._readableState)}))}function $(e,t,r,i){v("readableAddChunk",t);const o=e._readableState;let a;if(o.objectMode||("string"==typeof t?(r=r||o.defaultEncoding,o.encoding!==r&&(i&&o.encoding?t=n.from(t,r).toString(o.encoding):(t=n.from(t,r),r=""))):t instanceof n?r="":g._isUint8Array(t)?(t=g._uint8ArrayToBuffer(t),r=""):null!=t&&(a=new x("chunk",["string","Buffer","Uint8Array"],t))),a)L(e,a);else if(null===t)o.reading=!1,function(e,t){if(v("onEofChunk"),!t.ended){if(t.decoder){const e=t.decoder.end();e&&e.length&&(t.buffer.push(e),t.length+=t.objectMode?1:e.length)}t.ended=!0,t.sync?G(e):(t.needReadable=!1,t.emittedReadable=!0,W(e))}}(e,o);else if(o.objectMode||t&&t.length>0)if(i)if(o.endEmitted)L(e,new I);else{if(o.destroyed||o.errored)return!1;U(e,o,t,!0)}else if(o.ended)L(e,new O);else{if(o.destroyed||o.errored)return!1;o.reading=!1,o.decoder&&!r?(t=o.decoder.write(t),o.objectMode||0!==t.length?U(e,o,t,!1):H(e,o)):U(e,o,t,!1)}else i||(o.reading=!1,H(e,o));return!o.ended&&(o.length<o.highWaterMark||0===o.length)}function U(e,t,r,n){t.flowing&&0===t.length&&!t.sync&&e.listenerCount("data")>0?(t.multiAwaitDrain?t.awaitDrainWriters.clear():t.awaitDrainWriters=null,t.dataEmitted=!0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&G(e)),H(e,t)}function q(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:s(e)?t.flowing&&t.length?t.buffer.first().length:t.length:e<=t.length?e:t.ended?t.length:0}function G(e){const t=e._readableState;v("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(v("emitReadable",t.flowing),t.emittedReadable=!0,i.nextTick(W,e))}function W(e){const t=e._readableState;v("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||t.errored||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,X(e)}function H(e,t){!t.readingMore&&t.constructed&&(t.readingMore=!0,i.nextTick(V,e,t))}function V(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){const r=t.length;if(v("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function Q(e){const t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!1===t[P]?t.flowing=!0:e.listenerCount("data")>0?e.resume():t.readableListening||(t.flowing=null)}function z(e){v("readable nexttick read 0"),e.read(0)}function Y(e,t){v("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),X(e),t.flowing&&!t.reading&&e.read(0)}function X(e){const t=e._readableState;for(v("flow",t.flowing);t.flowing&&null!==e.read(););}function K(e,t){"function"!=typeof e.read&&(e=B.wrap(e,{objectMode:!0}));const r=async function*(e,t){let r,n=C;function i(t){this===e?(n(),n=C):n=t}e.on("readable",i);const o=w(e,{writable:!1},(e=>{r=e?T(r,e):null,n(),n=C}));try{for(;;){const t=e.destroyed?null:e.read();if(null!==t)yield t;else{if(r)throw r;if(null===r)return;await new f(i)}}}catch(e){throw r=T(r,e),r}finally{!r&&!1===(null==t?void 0:t.destroyOnReturn)||void 0!==r&&!e._readableState.autoDestroy?(e.off("readable",i),o()):S.destroyer(e,null)}}(e,t);return r.stream=e,r}function J(e,t){if(0===t.length)return null;let r;return t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r}function Z(e){const t=e._readableState;v("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,i.nextTick(ee,t,e))}function ee(e,t){if(v("endReadableNT",e.endEmitted,e.length),!e.errored&&!e.closeEmitted&&!e.endEmitted&&0===e.length)if(e.endEmitted=!0,t.emit("end"),t.writable&&!1===t.allowHalfOpen)i.nextTick(te,t);else if(e.autoDestroy){const e=t._writableState;(!e||e.autoDestroy&&(e.finished||!1===e.writable))&&t.destroy()}}function te(e){e.writable&&!e.writableEnded&&!e.destroyed&&e.end()}let re;function ne(){return void 0===re&&(re={}),re}B.prototype.destroy=S.destroy,B.prototype._undestroy=S.undestroy,B.prototype._destroy=function(e,t){t(e)},B.prototype[y.captureRejectionSymbol]=function(e){this.destroy(e)},B.prototype.push=function(e,t){return $(this,e,t,!1)},B.prototype.unshift=function(e,t){return $(this,e,t,!0)},B.prototype.isPaused=function(){const e=this._readableState;return!0===e[P]||!1===e.flowing},B.prototype.setEncoding=function(e){const t=new D(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;const r=this._readableState.buffer;let n="";for(const e of r)n+=t.write(e);return r.clear(),""!==n&&r.push(n),this._readableState.length=n.length,this},B.prototype.read=function(e){v("read",e),void 0===e?e=NaN:a(e)||(e=l(e,10));const t=this._readableState,r=e;if(e>t.highWaterMark&&(t.highWaterMark=function(e){if(e>1073741824)throw new N("size","<= 1GiB",e);return e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,++e}(e)),0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return v("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?Z(this):G(this),null;if(0===(e=q(e,t))&&t.ended)return 0===t.length&&Z(this),null;let n,i=t.needReadable;if(v("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&(i=!0,v("length less than watermark",i)),t.ended||t.reading||t.destroyed||t.errored||!t.constructed)i=!1,v("reading, ended or constructing",i);else if(i){v("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0);try{this._read(t.highWaterMark)}catch(e){L(this,e)}t.sync=!1,t.reading||(e=q(r,t))}return n=e>0?J(e,t):null,null===n?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.multiAwaitDrain?t.awaitDrainWriters.clear():t.awaitDrainWriters=null),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&Z(this)),null===n||t.errorEmitted||t.closeEmitted||(t.dataEmitted=!0,this.emit("data",n)),n},B.prototype._read=function(e){throw new k("_read()")},B.prototype.pipe=function(e,t){const r=this,n=this._readableState;1===n.pipes.length&&(n.multiAwaitDrain||(n.multiAwaitDrain=!0,n.awaitDrainWriters=new d(n.awaitDrainWriters?[n.awaitDrainWriters]:[]))),n.pipes.push(e),v("pipe count=%d opts=%j",n.pipes.length,t);const o=t&&!1===t.end||e===i.stdout||e===i.stderr?b:a;function a(){v("onend"),e.end()}let s;n.endEmitted?i.nextTick(o):r.once("end",o),e.on("unpipe",(function t(i,o){v("onunpipe"),i===r&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,v("cleanup"),e.removeListener("close",f),e.removeListener("finish",p),s&&e.removeListener("drain",s),e.removeListener("error",h),e.removeListener("unpipe",t),r.removeListener("end",a),r.removeListener("end",b),r.removeListener("data",c),l=!0,s&&n.awaitDrainWriters&&(!e._writableState||e._writableState.needDrain)&&s())}));let l=!1;function u(){l||(1===n.pipes.length&&n.pipes[0]===e?(v("false write response, pause",0),n.awaitDrainWriters=e,n.multiAwaitDrain=!1):n.pipes.length>1&&n.pipes.includes(e)&&(v("false write response, pause",n.awaitDrainWriters.size),n.awaitDrainWriters.add(e)),r.pause()),s||(s=function(e,t){return function(){const r=e._readableState;r.awaitDrainWriters===t?(v("pipeOnDrain",1),r.awaitDrainWriters=null):r.multiAwaitDrain&&(v("pipeOnDrain",r.awaitDrainWriters.size),r.awaitDrainWriters.delete(t)),r.awaitDrainWriters&&0!==r.awaitDrainWriters.size||!e.listenerCount("data")||e.resume()}}(r,e),e.on("drain",s))}function c(t){v("ondata");const r=e.write(t);v("dest.write",r),!1===r&&u()}function h(t){if(v("onerror",t),b(),e.removeListener("error",h),0===e.listenerCount("error")){const r=e._writableState||e._readableState;r&&!r.errorEmitted?L(e,t):e.emit("error",t)}}function f(){e.removeListener("finish",p),b()}function p(){v("onfinish"),e.removeListener("close",f),b()}function b(){v("unpipe"),r.unpipe(e)}return r.on("data",c),_(e,"error",h),e.once("close",f),e.once("finish",p),e.emit("pipe",r),!0===e.writableNeedDrain?n.flowing&&u():n.flowing||(v("pipe resume"),r.resume()),e},B.prototype.unpipe=function(e){const t=this._readableState;if(0===t.pipes.length)return this;if(!e){const e=t.pipes;t.pipes=[],this.pause();for(let t=0;t<e.length;t++)e[t].emit("unpipe",this,{hasUnpiped:!1});return this}const r=o(t.pipes,e);return-1===r||(t.pipes.splice(r,1),0===t.pipes.length&&this.pause(),e.emit("unpipe",this,{hasUnpiped:!1})),this},B.prototype.on=function(e,t){const r=g.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,v("on readable",n.length,n.reading),n.length?G(this):n.reading||i.nextTick(z,this))),r},B.prototype.addListener=B.prototype.on,B.prototype.removeListener=function(e,t){const r=g.prototype.removeListener.call(this,e,t);return"readable"===e&&i.nextTick(Q,this),r},B.prototype.off=B.prototype.removeListener,B.prototype.removeAllListeners=function(e){const t=g.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||i.nextTick(Q,this),t},B.prototype.resume=function(){const e=this._readableState;return e.flowing||(v("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(Y,e,t))}(this,e)),e[P]=!1,this},B.prototype.pause=function(){return v("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(v("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState[P]=!0,this},B.prototype.wrap=function(e){let t=!1;e.on("data",(r=>{!this.push(r)&&e.pause&&(t=!0,e.pause())})),e.on("end",(()=>{this.push(null)})),e.on("error",(e=>{L(this,e)})),e.on("close",(()=>{this.destroy()})),e.on("destroy",(()=>{this.destroy()})),this._read=()=>{t&&e.resume&&(t=!1,e.resume())};const r=c(e);for(let t=1;t<r.length;t++){const n=r[t];void 0===this[n]&&"function"==typeof e[n]&&(this[n]=e[n].bind(e))}return this},B.prototype[p]=function(){return K(this)},B.prototype.iterator=function(e){return void 0!==e&&j(e,"options"),K(this,e)},u(B.prototype,{readable:{get(){const e=this._readableState;return!(!e||!1===e.readable||e.destroyed||e.errorEmitted||e.endEmitted)},set(e){this._readableState&&(this._readableState.readable=!!e)}},readableDidRead:{enumerable:!1,get:function(){return this._readableState.dataEmitted}},readableAborted:{enumerable:!1,get:function(){return!(!1===this._readableState.readable||!this._readableState.destroyed&&!this._readableState.errored||this._readableState.endEmitted)}},readableHighWaterMark:{enumerable:!1,get:function(){return this._readableState.highWaterMark}},readableBuffer:{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}},readableFlowing:{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}},readableLength:{enumerable:!1,get(){return this._readableState.length}},readableObjectMode:{enumerable:!1,get(){return!!this._readableState&&this._readableState.objectMode}},readableEncoding:{enumerable:!1,get(){return this._readableState?this._readableState.encoding:null}},errored:{enumerable:!1,get(){return this._readableState?this._readableState.errored:null}},closed:{get(){return!!this._readableState&&this._readableState.closed}},destroyed:{enumerable:!1,get(){return!!this._readableState&&this._readableState.destroyed},set(e){this._readableState&&(this._readableState.destroyed=e)}},readableEnded:{enumerable:!1,get(){return!!this._readableState&&this._readableState.endEmitted}}}),u(M.prototype,{pipesCount:{get(){return this.pipes.length}},paused:{get(){return!1!==this[P]},set(e){this[P]=!!e}}}),B._fromList=J,B.from=function(e,t){return F(B,e,t)},B.fromWeb=function(e,t){return ne().newStreamReadableFromReadableStream(e,t)},B.toWeb=function(e){return ne().newReadableStreamFromStreamReadable(e)},B.wrap=function(e,t){var r,n;return new B({objectMode:null===(r=null!==(n=e.readableObjectMode)&&void 0!==n?n:e.objectMode)||void 0===r||r,...t,destroy(t,r){S.destroyer(e,t),r(t)}}).wrap(e)}},3390:(e,t,r)=>{"use strict";const{MathFloor:n,NumberIsInteger:i}=r(4990),{ERR_INVALID_ARG_VALUE:o}=r(1007).codes;function a(e){return e?16:16384}e.exports={getHighWaterMark:function(e,t,r,s){const l=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,s,r);if(null!=l){if(!i(l)||l<0)throw new o(s?`options.${r}`:"options.highWaterMark",l);return n(l)}return a(e.objectMode)},getDefaultHighWaterMark:a}},7290:(e,t,r)=>{"use strict";const{ObjectSetPrototypeOf:n,Symbol:i}=r(4990);e.exports=l;const{ERR_METHOD_NOT_IMPLEMENTED:o}=r(1007).codes,a=r(5438);n(l.prototype,a.prototype),n(l,a);const s=i("kCallback");function l(e){if(!(this instanceof l))return new l(e);a.call(this,e),this._readableState.sync=!1,this[s]=null,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",c)}function u(e){"function"!=typeof this._flush||this.destroyed?(this.push(null),e&&e()):this._flush(((t,r)=>{t?e?e(t):this.destroy(t):(null!=r&&this.push(r),this.push(null),e&&e())}))}function c(){this._final!==u&&u.call(this)}l.prototype._final=u,l.prototype._transform=function(e,t,r){throw new o("_transform()")},l.prototype._write=function(e,t,r){const n=this._readableState,i=this._writableState,o=n.length;this._transform(e,t,((e,t)=>{e?r(e):(null!=t&&this.push(t),i.ended||o===n.length||n.length<n.highWaterMark||0===n.highWaterMark||0===n.length?r():this[s]=r)}))},l.prototype._read=function(){if(this[s]){const e=this[s];this[s]=null,e()}}},894:(e,t,r)=>{"use strict";const{Symbol:n,SymbolAsyncIterator:i,SymbolIterator:o}=r(4990),a=n("kDestroyed"),s=n("kIsErrored"),l=n("kIsReadable"),u=n("kIsDisturbed");function c(e,t=!1){var r;return!(!e||"function"!=typeof e.pipe||"function"!=typeof e.on||t&&("function"!=typeof e.pause||"function"!=typeof e.resume)||e._writableState&&!1===(null===(r=e._readableState)||void 0===r?void 0:r.readable)||e._writableState&&!e._readableState)}function h(e){var t;return!(!e||"function"!=typeof e.write||"function"!=typeof e.on||e._readableState&&!1===(null===(t=e._writableState)||void 0===t?void 0:t.writable))}function f(e){return e&&(e._readableState||e._writableState||"function"==typeof e.write&&"function"==typeof e.on||"function"==typeof e.pipe&&"function"==typeof e.on)}function d(e){if(!f(e))return null;const t=e._writableState,r=e._readableState,n=t||r;return!!(e.destroyed||e[a]||null!=n&&n.destroyed)}function p(e){if(!h(e))return null;if(!0===e.writableEnded)return!0;const t=e._writableState;return(null==t||!t.errored)&&("boolean"!=typeof(null==t?void 0:t.ended)?null:t.ended)}function b(e,t){if(!c(e))return null;const r=e._readableState;return(null==r||!r.errored)&&("boolean"!=typeof(null==r?void 0:r.endEmitted)?null:!!(r.endEmitted||!1===t&&!0===r.ended&&0===r.length))}function y(e){return e&&null!=e[l]?e[l]:"boolean"!=typeof(null==e?void 0:e.readable)?null:!d(e)&&c(e)&&e.readable&&!b(e)}function g(e){return"boolean"!=typeof(null==e?void 0:e.writable)?null:!d(e)&&h(e)&&e.writable&&!p(e)}function _(e){return"boolean"==typeof e._closed&&"boolean"==typeof e._defaultKeepAlive&&"boolean"==typeof e._removedConnection&&"boolean"==typeof e._removedContLen}function m(e){return"boolean"==typeof e._sent100&&_(e)}e.exports={kDestroyed:a,isDisturbed:function(e){var t;return!(!e||!(null!==(t=e[u])&&void 0!==t?t:e.readableDidRead||e.readableAborted))},kIsDisturbed:u,isErrored:function(e){var t,r,n,i,o,a,l,u,c,h;return!(!e||!(null!==(t=null!==(r=null!==(n=null!==(i=null!==(o=null!==(a=e[s])&&void 0!==a?a:e.readableErrored)&&void 0!==o?o:e.writableErrored)&&void 0!==i?i:null===(l=e._readableState)||void 0===l?void 0:l.errorEmitted)&&void 0!==n?n:null===(u=e._writableState)||void 0===u?void 0:u.errorEmitted)&&void 0!==r?r:null===(c=e._readableState)||void 0===c?void 0:c.errored)&&void 0!==t?t:null===(h=e._writableState)||void 0===h?void 0:h.errored))},kIsErrored:s,isReadable:y,kIsReadable:l,isClosed:function(e){if(!f(e))return null;if("boolean"==typeof e.closed)return e.closed;const t=e._writableState,r=e._readableState;return"boolean"==typeof(null==t?void 0:t.closed)||"boolean"==typeof(null==r?void 0:r.closed)?(null==t?void 0:t.closed)||(null==r?void 0:r.closed):"boolean"==typeof e._closed&&_(e)?e._closed:null},isDestroyed:d,isDuplexNodeStream:function(e){return!(!e||"function"!=typeof e.pipe||!e._readableState||"function"!=typeof e.on||"function"!=typeof e.write)},isFinished:function(e,t){return f(e)?!(!d(e)&&(!1!==(null==t?void 0:t.readable)&&y(e)||!1!==(null==t?void 0:t.writable)&&g(e))):null},isIterable:function(e,t){return null!=e&&(!0===t?"function"==typeof e[i]:!1===t?"function"==typeof e[o]:"function"==typeof e[i]||"function"==typeof e[o])},isReadableNodeStream:c,isReadableEnded:function(e){if(!c(e))return null;if(!0===e.readableEnded)return!0;const t=e._readableState;return!(!t||t.errored)&&("boolean"!=typeof(null==t?void 0:t.ended)?null:t.ended)},isReadableFinished:b,isReadableErrored:function(e){var t,r;return f(e)?e.readableErrored?e.readableErrored:null!==(t=null===(r=e._readableState)||void 0===r?void 0:r.errored)&&void 0!==t?t:null:null},isNodeStream:f,isWritable:g,isWritableNodeStream:h,isWritableEnded:p,isWritableFinished:function(e,t){if(!h(e))return null;if(!0===e.writableFinished)return!0;const r=e._writableState;return(null==r||!r.errored)&&("boolean"!=typeof(null==r?void 0:r.finished)?null:!!(r.finished||!1===t&&!0===r.ended&&0===r.length))},isWritableErrored:function(e){var t,r;return f(e)?e.writableErrored?e.writableErrored:null!==(t=null===(r=e._writableState)||void 0===r?void 0:r.errored)&&void 0!==t?t:null:null},isServerRequest:function(e){var t;return"boolean"==typeof e._consuming&&"boolean"==typeof e._dumped&&void 0===(null===(t=e.req)||void 0===t?void 0:t.upgradeOrConnect)},isServerResponse:m,willEmitClose:function(e){if(!f(e))return null;const t=e._writableState,r=e._readableState,n=t||r;return!n&&m(e)||!!(n&&n.autoDestroy&&n.emitClose&&!1===n.closed)}}},9181:(e,t,r)=>{"use strict";var n=r(8764).Buffer,i=r(4155);const{ArrayPrototypeSlice:o,Error:a,FunctionPrototypeSymbolHasInstance:s,ObjectDefineProperty:l,ObjectDefineProperties:u,ObjectSetPrototypeOf:c,StringPrototypeToLowerCase:h,Symbol:f,SymbolHasInstance:d}=r(4990);e.exports=D,D.WritableState=j;const{EventEmitter:p}=r(7187),b=r(7483).Stream,y=r(7402),{addAbortSignal:g}=r(1627),{getHighWaterMark:_,getDefaultHighWaterMark:m}=r(3390),{ERR_INVALID_ARG_TYPE:w,ERR_METHOD_NOT_IMPLEMENTED:v,ERR_MULTIPLE_CALLBACK:E,ERR_STREAM_CANNOT_PIPE:S,ERR_STREAM_DESTROYED:R,ERR_STREAM_ALREADY_FINISHED:A,ERR_STREAM_NULL_VALUES:T,ERR_STREAM_WRITE_AFTER_END:x,ERR_UNKNOWN_ENCODING:k}=r(1007).codes,{errorOrDestroy:N}=y;function O(){}c(D.prototype,b.prototype),c(D,b);const I=f("kOnFinished");function j(e,t,n){"boolean"!=typeof n&&(n=t instanceof r(5438)),this.objectMode=!(!e||!e.objectMode),n&&(this.objectMode=this.objectMode||!(!e||!e.writableObjectMode)),this.highWaterMark=e?_(this,e,"writableHighWaterMark",n):m(!1),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;const i=!(!e||!1!==e.decodeStrings);this.decodeStrings=!i,this.defaultEncoding=e&&e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=M.bind(void 0,t),this.writecb=null,this.writelen=0,this.afterWriteTickInfo=null,P(this),this.pendingcb=0,this.constructed=!0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!e||!1!==e.emitClose,this.autoDestroy=!e||!1!==e.autoDestroy,this.errored=null,this.closed=!1,this.closeEmitted=!1,this[I]=[]}function P(e){e.buffered=[],e.bufferedIndex=0,e.allBuffers=!0,e.allNoop=!0}function D(e){const t=this instanceof r(5438);if(!t&&!s(D,this))return new D(e);this._writableState=new j(e,this,t),e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final),"function"==typeof e.construct&&(this._construct=e.construct),e.signal&&g(e.signal,this)),b.call(this,e),y.construct(this,(()=>{const e=this._writableState;e.writing||q(this,e),W(this,e)}))}function F(e,t,r,o){const a=e._writableState;if("function"==typeof r)o=r,r=a.defaultEncoding;else{if(r){if("buffer"!==r&&!n.isEncoding(r))throw new k(r)}else r=a.defaultEncoding;"function"!=typeof o&&(o=O)}if(null===t)throw new T;if(!a.objectMode)if("string"==typeof t)!1!==a.decodeStrings&&(t=n.from(t,r),r="buffer");else if(t instanceof n)r="buffer";else{if(!b._isUint8Array(t))throw new w("chunk",["string","Buffer","Uint8Array"],t);t=b._uint8ArrayToBuffer(t),r="buffer"}let s;return a.ending?s=new x:a.destroyed&&(s=new R("write")),s?(i.nextTick(o,s),N(e,s,!0),s):(a.pendingcb++,function(e,t,r,n,i){const o=t.objectMode?1:r.length;t.length+=o;const a=t.length<t.highWaterMark;return a||(t.needDrain=!0),t.writing||t.corked||t.errored||!t.constructed?(t.buffered.push({chunk:r,encoding:n,callback:i}),t.allBuffers&&"buffer"!==n&&(t.allBuffers=!1),t.allNoop&&i!==O&&(t.allNoop=!1)):(t.writelen=o,t.writecb=i,t.writing=!0,t.sync=!0,e._write(r,n,t.onwrite),t.sync=!1),a&&!t.errored&&!t.destroyed}(e,a,t,r,o))}function C(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new R("write")):r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function L(e,t,r,n){--t.pendingcb,n(r),U(t),N(e,r)}function M(e,t){const r=e._writableState,n=r.sync,o=r.writecb;"function"==typeof o?(r.writing=!1,r.writecb=null,r.length-=r.writelen,r.writelen=0,t?(t.stack,r.errored||(r.errored=t),e._readableState&&!e._readableState.errored&&(e._readableState.errored=t),n?i.nextTick(L,e,r,t,o):L(e,r,t,o)):(r.buffered.length>r.bufferedIndex&&q(e,r),n?null!==r.afterWriteTickInfo&&r.afterWriteTickInfo.cb===o?r.afterWriteTickInfo.count++:(r.afterWriteTickInfo={count:1,cb:o,stream:e,state:r},i.nextTick(B,r.afterWriteTickInfo)):$(e,r,1,o))):N(e,new E)}function B({stream:e,state:t,count:r,cb:n}){return t.afterWriteTickInfo=null,$(e,t,r,n)}function $(e,t,r,n){for(!t.ending&&!e.destroyed&&0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"));r-- >0;)t.pendingcb--,n();t.destroyed&&U(t),W(e,t)}function U(e){if(e.writing)return;for(let r=e.bufferedIndex;r<e.buffered.length;++r){var t;const{chunk:n,callback:i}=e.buffered[r],o=e.objectMode?1:n.length;e.length-=o,i(null!==(t=e.errored)&&void 0!==t?t:new R("write"))}const r=e[I].splice(0);for(let t=0;t<r.length;t++){var n;r[t](null!==(n=e.errored)&&void 0!==n?n:new R("end"))}P(e)}function q(e,t){if(t.corked||t.bufferProcessing||t.destroyed||!t.constructed)return;const{buffered:r,bufferedIndex:n,objectMode:i}=t,a=r.length-n;if(!a)return;let s=n;if(t.bufferProcessing=!0,a>1&&e._writev){t.pendingcb-=a-1;const n=t.allNoop?O:e=>{for(let t=s;t<r.length;++t)r[t].callback(e)},i=t.allNoop&&0===s?r:o(r,s);i.allBuffers=t.allBuffers,C(e,t,!0,t.length,i,"",n),P(t)}else{do{const{chunk:n,encoding:o,callback:a}=r[s];r[s++]=null,C(e,t,!1,i?1:n.length,n,o,a)}while(s<r.length&&!t.writing);s===r.length?P(t):s>256?(r.splice(0,s),t.bufferedIndex=0):t.bufferedIndex=s}t.bufferProcessing=!1}function G(e){return e.ending&&!e.destroyed&&e.constructed&&0===e.length&&!e.errored&&0===e.buffered.length&&!e.finished&&!e.writing&&!e.errorEmitted&&!e.closeEmitted}function W(e,t,r){G(t)&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.finalCalled=!0,function(e,t){let r=!1;function n(n){if(r)N(e,null!=n?n:E());else if(r=!0,t.pendingcb--,n){const r=t[I].splice(0);for(let e=0;e<r.length;e++)r[e](n);N(e,n,t.sync)}else G(t)&&(t.prefinished=!0,e.emit("prefinish"),t.pendingcb++,i.nextTick(H,e,t))}t.sync=!0,t.pendingcb++;try{e._final(n)}catch(e){n(e)}t.sync=!1}(e,t)))}(e,t),0===t.pendingcb&&(r?(t.pendingcb++,i.nextTick(((e,t)=>{G(t)?H(e,t):t.pendingcb--}),e,t)):G(t)&&(t.pendingcb++,H(e,t))))}function H(e,t){t.pendingcb--,t.finished=!0;const r=t[I].splice(0);for(let e=0;e<r.length;e++)r[e]();if(e.emit("finish"),t.autoDestroy){const t=e._readableState;(!t||t.autoDestroy&&(t.endEmitted||!1===t.readable))&&e.destroy()}}j.prototype.getBuffer=function(){return o(this.buffered,this.bufferedIndex)},l(j.prototype,"bufferedRequestCount",{get(){return this.buffered.length-this.bufferedIndex}}),l(D,d,{value:function(e){return!!s(this,e)||this===D&&e&&e._writableState instanceof j}}),D.prototype.pipe=function(){N(this,new S)},D.prototype.write=function(e,t,r){return!0===F(this,e,t,r)},D.prototype.cork=function(){this._writableState.corked++},D.prototype.uncork=function(){const e=this._writableState;e.corked&&(e.corked--,e.writing||q(this,e))},D.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=h(e)),!n.isEncoding(e))throw new k(e);return this._writableState.defaultEncoding=e,this},D.prototype._write=function(e,t,r){if(!this._writev)throw new v("_write()");this._writev([{chunk:e,encoding:t}],r)},D.prototype._writev=null,D.prototype.end=function(e,t,r){const n=this._writableState;let o;if("function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e){const r=F(this,e,t);r instanceof a&&(o=r)}return n.corked&&(n.corked=1,this.uncork()),o||(n.errored||n.ending?n.finished?o=new A("end"):n.destroyed&&(o=new R("end")):(n.ending=!0,W(this,n,!0),n.ended=!0)),"function"==typeof r&&(o||n.finished?i.nextTick(r,o):n[I].push(r)),this},u(D.prototype,{closed:{get(){return!!this._writableState&&this._writableState.closed}},destroyed:{get(){return!!this._writableState&&this._writableState.destroyed},set(e){this._writableState&&(this._writableState.destroyed=e)}},writable:{get(){const e=this._writableState;return!(!e||!1===e.writable||e.destroyed||e.errored||e.ending||e.ended)},set(e){this._writableState&&(this._writableState.writable=!!e)}},writableFinished:{get(){return!!this._writableState&&this._writableState.finished}},writableObjectMode:{get(){return!!this._writableState&&this._writableState.objectMode}},writableBuffer:{get(){return this._writableState&&this._writableState.getBuffer()}},writableEnded:{get(){return!!this._writableState&&this._writableState.ending}},writableNeedDrain:{get(){const e=this._writableState;return!!e&&!e.destroyed&&!e.ending&&e.needDrain}},writableHighWaterMark:{get(){return this._writableState&&this._writableState.highWaterMark}},writableCorked:{get(){return this._writableState?this._writableState.corked:0}},writableLength:{get(){return this._writableState&&this._writableState.length}},errored:{enumerable:!1,get(){return this._writableState?this._writableState.errored:null}},writableAborted:{enumerable:!1,get:function(){return!(!1===this._writableState.writable||!this._writableState.destroyed&&!this._writableState.errored||this._writableState.finished)}}});const V=y.destroy;let Q;function z(){return void 0===Q&&(Q={}),Q}D.prototype.destroy=function(e,t){const r=this._writableState;return!r.destroyed&&(r.bufferedIndex<r.buffered.length||r[I].length)&&i.nextTick(U,r),V.call(this,e,t),this},D.prototype._undestroy=y.undestroy,D.prototype._destroy=function(e,t){t(e)},D.prototype[p.captureRejectionSymbol]=function(e){this.destroy(e)},D.fromWeb=function(e,t){return z().newStreamWritableFromWritableStream(e,t)},D.toWeb=function(e){return z().newWritableStreamFromStreamWritable(e)}},9178:(e,t,r)=>{"use strict";const{ArrayIsArray:n,ArrayPrototypeIncludes:i,ArrayPrototypeJoin:o,ArrayPrototypeMap:a,NumberIsInteger:s,NumberMAX_SAFE_INTEGER:l,NumberMIN_SAFE_INTEGER:u,NumberParseInt:c,RegExpPrototypeTest:h,String:f,StringPrototypeToUpperCase:d,StringPrototypeTrim:p}=r(4990),{hideStackFrames:b,codes:{ERR_SOCKET_BAD_PORT:y,ERR_INVALID_ARG_TYPE:g,ERR_INVALID_ARG_VALUE:_,ERR_OUT_OF_RANGE:m,ERR_UNKNOWN_SIGNAL:w}}=r(1007),{normalizeEncoding:v}=r(8734),{isAsyncFunction:E,isArrayBufferView:S}=r(8734).types,R={};function A(e){return e===(0|e)}function T(e){return e===e>>>0}const x=/^[0-7]+$/,k=b(((e,t,r=u,n=l)=>{if("number"!=typeof e)throw new g(t,"number",e);if(!s(e))throw new m(t,"an integer",e);if(e<r||e>n)throw new m(t,`>= ${r} && <= ${n}`,e)})),N=b(((e,t,r=-2147483648,n=2147483647)=>{if("number"!=typeof e)throw new g(t,"number",e);if(!A(e)){if(!s(e))throw new m(t,"an integer",e);throw new m(t,`>= ${r} && <= ${n}`,e)}if(e<r||e>n)throw new m(t,`>= ${r} && <= ${n}`,e)})),O=b(((e,t,r)=>{if("number"!=typeof e)throw new g(t,"number",e);if(!T(e)){if(!s(e))throw new m(t,"an integer",e);throw new m(t,`>= ${r?1:0} && < 4294967296`,e)}if(r&&0===e)throw new m(t,">= 1 && < 4294967296",e)}));function I(e,t){if("string"!=typeof e)throw new g(t,"string",e)}const j=b(((e,t,r)=>{if(!i(r,e)){const n=o(a(r,(e=>"string"==typeof e?`'${e}'`:f(e))),", ");throw new _(t,e,"must be one of: "+n)}})),P=b(((e,t,r)=>{const i=null==r,o=!i&&r.allowArray,a=!i&&r.allowFunction;if((i||!r.nullable)&&null===e||!o&&n(e)||"object"!=typeof e&&(!a||"function"!=typeof e))throw new g(t,"Object",e)})),D=b(((e,t,r=0)=>{if(!n(e))throw new g(t,"Array",e);if(e.length<r)throw new _(t,e,`must be longer than ${r}`)})),F=b(((e,t="buffer")=>{if(!S(e))throw new g(t,["Buffer","TypedArray","DataView"],e)})),C=b(((e,t)=>{if(void 0!==e&&(null===e||"object"!=typeof e||!("aborted"in e)))throw new g(t,"AbortSignal",e)})),L=b(((e,t)=>{if("function"!=typeof e)throw new g(t,"Function",e)})),M=b(((e,t)=>{if("function"!=typeof e||E(e))throw new g(t,"Function",e)})),B=b(((e,t)=>{if(void 0!==e)throw new g(t,"undefined",e)}));e.exports={isInt32:A,isUint32:T,parseFileMode:function(e,t,r){if(void 0===e&&(e=r),"string"==typeof e){if(!h(x,e))throw new _(t,e,"must be a 32-bit unsigned integer or an octal string");e=c(e,8)}return N(e,t,0,2**32-1),e},validateArray:D,validateBoolean:function(e,t){if("boolean"!=typeof e)throw new g(t,"boolean",e)},validateBuffer:F,validateEncoding:function(e,t){const r=v(t),n=e.length;if("hex"===r&&n%2!=0)throw new _("encoding",t,`is invalid for data of length ${n}`)},validateFunction:L,validateInt32:N,validateInteger:k,validateNumber:function(e,t){if("number"!=typeof e)throw new g(t,"number",e)},validateObject:P,validateOneOf:j,validatePlainFunction:M,validatePort:function(e,t="Port",r=!0){if("number"!=typeof e&&"string"!=typeof e||"string"==typeof e&&0===p(e).length||+e!=+e>>>0||e>65535||0===e&&!r)throw new y(t,e,r);return 0|e},validateSignalName:function(e,t="signal"){if(I(e,t),void 0===R[e]){if(void 0!==R[d(e)])throw new w(e+" (signals must use all capital letters)");throw new w(e)}},validateString:I,validateUint32:O,validateUndefined:B,validateAbortSignal:C}},7077:(e,t,r)=>{"use strict";const n=r(4908),i=r(55),o=n.Readable.destroy;e.exports=n.Readable,e.exports._uint8ArrayToBuffer=n._uint8ArrayToBuffer,e.exports._isUint8Array=n._isUint8Array,e.exports.isDisturbed=n.isDisturbed,e.exports.isErrored=n.isErrored,e.exports.isReadable=n.isReadable,e.exports.Readable=n.Readable,e.exports.Writable=n.Writable,e.exports.Duplex=n.Duplex,e.exports.Transform=n.Transform,e.exports.PassThrough=n.PassThrough,e.exports.addAbortSignal=n.addAbortSignal,e.exports.finished=n.finished,e.exports.destroy=n.destroy,e.exports.destroy=o,e.exports.pipeline=n.pipeline,e.exports.compose=n.compose,Object.defineProperty(n,"promises",{configurable:!0,enumerable:!0,get:()=>i}),e.exports.Stream=n.Stream,e.exports.default=e.exports},1007:(e,t,r)=>{"use strict";const{format:n,inspect:i,AggregateError:o}=r(8734),a=globalThis.AggregateError||o,s=Symbol("kIsNodeError"),l=["string","function","number","object","Function","Object","boolean","bigint","symbol"],u=/^([A-Z][a-z0-9]*)+$/,c={};function h(e,t){if(!e)throw new c.ERR_INTERNAL_ASSERTION(t)}function f(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function d(e,t,r){r||(r=Error);class i extends r{constructor(...r){super(function(e,t,r){if("function"==typeof t)return h(t.length<=r.length,`Code: ${e}; The provided arguments length (${r.length}) does not match the required ones (${t.length}).`),t(...r);const i=(t.match(/%[dfijoOs]/g)||[]).length;return h(i===r.length,`Code: ${e}; The provided arguments length (${r.length}) does not match the required ones (${i}).`),0===r.length?t:n(t,...r)}(e,t,r))}toString(){return`${this.name} [${e}]: ${this.message}`}}Object.defineProperties(i.prototype,{name:{value:r.name,writable:!0,enumerable:!1,configurable:!0},toString:{value(){return`${this.name} [${e}]: ${this.message}`},writable:!0,enumerable:!1,configurable:!0}}),i.prototype.code=e,i.prototype[s]=!0,c[e]=i}function p(e){const t="__node_internal_"+e.name;return Object.defineProperty(e,"name",{value:t}),e}class b extends Error{constructor(e="The operation was aborted",t){if(void 0!==t&&"object"!=typeof t)throw new c.ERR_INVALID_ARG_TYPE("options","Object",t);super(e,t),this.code="ABORT_ERR",this.name="AbortError"}}d("ERR_ASSERTION","%s",Error),d("ERR_INVALID_ARG_TYPE",((e,t,r)=>{h("string"==typeof e,"'name' must be a string"),Array.isArray(t)||(t=[t]);let n="The ";e.endsWith(" argument")?n+=`${e} `:n+=`"${e}" ${e.includes(".")?"property":"argument"} `,n+="must be ";const o=[],a=[],s=[];for(const e of t)h("string"==typeof e,"All expected entries have to be of type string"),l.includes(e)?o.push(e.toLowerCase()):u.test(e)?a.push(e):(h("object"!==e,'The value "object" should be written as "Object"'),s.push(e));if(a.length>0){const e=o.indexOf("object");-1!==e&&(o.splice(o,e,1),a.push("Object"))}if(o.length>0){switch(o.length){case 1:n+=`of type ${o[0]}`;break;case 2:n+=`one of type ${o[0]} or ${o[1]}`;break;default:{const e=o.pop();n+=`one of type ${o.join(", ")}, or ${e}`}}(a.length>0||s.length>0)&&(n+=" or ")}if(a.length>0){switch(a.length){case 1:n+=`an instance of ${a[0]}`;break;case 2:n+=`an instance of ${a[0]} or ${a[1]}`;break;default:{const e=a.pop();n+=`an instance of ${a.join(", ")}, or ${e}`}}s.length>0&&(n+=" or ")}switch(s.length){case 0:break;case 1:s[0].toLowerCase()!==s[0]&&(n+="an "),n+=`${s[0]}`;break;case 2:n+=`one of ${s[0]} or ${s[1]}`;break;default:{const e=s.pop();n+=`one of ${s.join(", ")}, or ${e}`}}if(null==r)n+=`. Received ${r}`;else if("function"==typeof r&&r.name)n+=`. Received function ${r.name}`;else if("object"==typeof r){var c;null!==(c=r.constructor)&&void 0!==c&&c.name?n+=`. Received an instance of ${r.constructor.name}`:n+=`. Received ${i(r,{depth:-1})}`}else{let e=i(r,{colors:!1});e.length>25&&(e=`${e.slice(0,25)}...`),n+=`. Received type ${typeof r} (${e})`}return n}),TypeError),d("ERR_INVALID_ARG_VALUE",((e,t,r="is invalid")=>{let n=i(t);return n.length>128&&(n=n.slice(0,128)+"..."),`The ${e.includes(".")?"property":"argument"} '${e}' ${r}. Received ${n}`}),TypeError),d("ERR_INVALID_RETURN_VALUE",((e,t,r)=>{var n;return`Expected ${e} to be returned from the "${t}" function but got ${null!=r&&null!==(n=r.constructor)&&void 0!==n&&n.name?`instance of ${r.constructor.name}`:"type "+typeof r}.`}),TypeError),d("ERR_MISSING_ARGS",((...e)=>{let t;h(e.length>0,"At least one arg needs to be specified");const r=e.length;switch(e=(Array.isArray(e)?e:[e]).map((e=>`"${e}"`)).join(" or "),r){case 1:t+=`The ${e[0]} argument`;break;case 2:t+=`The ${e[0]} and ${e[1]} arguments`;break;default:{const r=e.pop();t+=`The ${e.join(", ")}, and ${r} arguments`}}return`${t} must be specified`}),TypeError),d("ERR_OUT_OF_RANGE",((e,t,r)=>{let n;return h(t,'Missing "range" argument'),Number.isInteger(r)&&Math.abs(r)>2**32?n=f(String(r)):"bigint"==typeof r?(n=String(r),(r>2n**32n||r<-(2n**32n))&&(n=f(n)),n+="n"):n=i(r),`The value of "${e}" is out of range. It must be ${t}. Received ${n}`}),RangeError),d("ERR_MULTIPLE_CALLBACK","Callback called multiple times",Error),d("ERR_METHOD_NOT_IMPLEMENTED","The %s method is not implemented",Error),d("ERR_STREAM_ALREADY_FINISHED","Cannot call %s after a stream was finished",Error),d("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable",Error),d("ERR_STREAM_DESTROYED","Cannot call %s after a stream was destroyed",Error),d("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),d("ERR_STREAM_PREMATURE_CLOSE","Premature close",Error),d("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF",Error),d("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event",Error),d("ERR_STREAM_WRITE_AFTER_END","write after end",Error),d("ERR_UNKNOWN_ENCODING","Unknown encoding: %s",TypeError),e.exports={AbortError:b,aggregateTwoErrors:p((function(e,t){if(e&&t&&e!==t){if(Array.isArray(t.errors))return t.errors.push(e),t;const r=new a([t,e],t.message);return r.code=t.code,r}return e||t})),hideStackFrames:p,codes:c}},4990:e=>{"use strict";e.exports={ArrayIsArray:e=>Array.isArray(e),ArrayPrototypeIncludes:(e,t)=>e.includes(t),ArrayPrototypeIndexOf:(e,t)=>e.indexOf(t),ArrayPrototypeJoin:(e,t)=>e.join(t),ArrayPrototypeMap:(e,t)=>e.map(t),ArrayPrototypePop:(e,t)=>e.pop(t),ArrayPrototypePush:(e,t)=>e.push(t),ArrayPrototypeSlice:(e,t,r)=>e.slice(t,r),Error,FunctionPrototypeCall:(e,t,...r)=>e.call(t,...r),FunctionPrototypeSymbolHasInstance:(e,t)=>Function.prototype[Symbol.hasInstance].call(e,t),MathFloor:Math.floor,Number,NumberIsInteger:Number.isInteger,NumberIsNaN:Number.isNaN,NumberMAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:Number.MIN_SAFE_INTEGER,NumberParseInt:Number.parseInt,ObjectDefineProperties:(e,t)=>Object.defineProperties(e,t),ObjectDefineProperty:(e,t,r)=>Object.defineProperty(e,t,r),ObjectGetOwnPropertyDescriptor:(e,t)=>Object.getOwnPropertyDescriptor(e,t),ObjectKeys:e=>Object.keys(e),ObjectSetPrototypeOf:(e,t)=>Object.setPrototypeOf(e,t),Promise,PromisePrototypeCatch:(e,t)=>e.catch(t),PromisePrototypeThen:(e,t,r)=>e.then(t,r),PromiseReject:e=>Promise.reject(e),ReflectApply:Reflect.apply,RegExpPrototypeTest:(e,t)=>e.test(t),SafeSet:Set,String,StringPrototypeSlice:(e,t,r)=>e.slice(t,r),StringPrototypeToLowerCase:e=>e.toLowerCase(),StringPrototypeToUpperCase:e=>e.toUpperCase(),StringPrototypeTrim:e=>e.trim(),Symbol,SymbolAsyncIterator:Symbol.asyncIterator,SymbolHasInstance:Symbol.hasInstance,SymbolIterator:Symbol.iterator,TypedArrayPrototypeSet:(e,t,r)=>e.set(t,r),Uint8Array}},8734:(e,t,r)=>{"use strict";const n=r(8764),i=Object.getPrototypeOf((async function(){})).constructor,o=globalThis.Blob||n.Blob,a=void 0!==o?function(e){return e instanceof o}:function(e){return!1};class s extends Error{constructor(e){if(!Array.isArray(e))throw new TypeError("Expected input to be an Array, got "+typeof e);let t="";for(let r=0;r<e.length;r++)t+=`    ${e[r].stack}\n`;super(t),this.name="AggregateError",this.errors=e}}e.exports={AggregateError:s,once(e){let t=!1;return function(...r){t||(t=!0,e.apply(this,r))}},createDeferredPromise:function(){let e,t;return{promise:new Promise(((r,n)=>{e=r,t=n})),resolve:e,reject:t}},promisify:e=>new Promise(((t,r)=>{e(((e,...n)=>e?r(e):t(...n)))})),debuglog:()=>function(){},format:(e,...t)=>e.replace(/%([sdifj])/g,(function(...[e,r]){const n=t.shift();return"f"===r?n.toFixed(6):"j"===r?JSON.stringify(n):"s"===r&&"object"==typeof n?`${n.constructor!==Object?n.constructor.name:""} {}`.trim():n.toString()})),inspect(e){switch(typeof e){case"string":if(e.includes("'")){if(!e.includes('"'))return`"${e}"`;if(!e.includes("`")&&!e.includes("${"))return`\`${e}\``}return`'${e}'`;case"number":return isNaN(e)?"NaN":Object.is(e,-0)?String(e):e;case"bigint":return`${String(e)}n`;case"boolean":case"undefined":return String(e);case"object":return"{}"}},types:{isAsyncFunction:e=>e instanceof i,isArrayBufferView:e=>ArrayBuffer.isView(e)},isBlob:a},e.exports.promisify.custom=Symbol.for("nodejs.util.promisify.custom")},4908:(e,t,r)=>{"use strict";var n=r(8764).Buffer;const{ObjectDefineProperty:i,ObjectKeys:o,ReflectApply:a}=r(4990),{promisify:{custom:s}}=r(8734),{streamReturningOperators:l,promiseReturningOperators:u}=r(6655),{codes:{ERR_ILLEGAL_CONSTRUCTOR:c}}=r(1007),h=r(8681),{pipeline:f}=r(8714),{destroyer:d}=r(7402),p=r(4732),b=r(55),y=r(894),g=e.exports=r(7483).Stream;g.isDisturbed=y.isDisturbed,g.isErrored=y.isErrored,g.isReadable=y.isReadable,g.Readable=r(6420);for(const m of o(l)){const w=l[m];function v(...e){if(new.target)throw c();return g.Readable.from(a(w,this,e))}i(v,"name",{value:w.name}),i(v,"length",{value:w.length}),i(g.Readable.prototype,m,{value:v,enumerable:!1,configurable:!0,writable:!0})}for(const E of o(u)){const S=u[E];function R(...e){if(new.target)throw c();return a(S,this,e)}i(R,"name",{value:S.name}),i(R,"length",{value:S.length}),i(g.Readable.prototype,E,{value:R,enumerable:!1,configurable:!0,writable:!0})}g.Writable=r(9181),g.Duplex=r(5438),g.Transform=r(7290),g.PassThrough=r(7081),g.pipeline=f;const{addAbortSignal:_}=r(1627);g.addAbortSignal=_,g.finished=p,g.destroy=d,g.compose=h,i(g,"promises",{configurable:!0,enumerable:!0,get:()=>b}),i(f,s,{enumerable:!0,get:()=>b.pipeline}),i(p,s,{enumerable:!0,get:()=>b.finished}),g.Stream=g,g._isUint8Array=function(e){return e instanceof Uint8Array},g._uint8ArrayToBuffer=function(e){return n.from(e.buffer,e.byteOffset,e.byteLength)}},55:(e,t,r)=>{"use strict";const{ArrayPrototypePop:n,Promise:i}=r(4990),{isIterable:o,isNodeStream:a}=r(894),{pipelineImpl:s}=r(8714),{finished:l}=r(4732);e.exports={finished:l,pipeline:function(...e){return new i(((t,r)=>{let i,l;const u=e[e.length-1];if(u&&"object"==typeof u&&!a(u)&&!o(u)){const t=n(e);i=t.signal,l=t.end}s(e,((e,n)=>{e?r(e):t(n)}),{signal:i,end:l})}))}}},5271:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r(3189),t)},3189:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SparqlXmlParser=void 0;const n=r(1640),i=r(2208),o=r(5484);t.SparqlXmlParser=class{constructor(e){e=e||{},this.dataFactory=e.dataFactory||new n.DataFactory,this.prefixVariableQuestionMark=!!e.prefixVariableQuestionMark}parseXmlResultsStream(e){const t=e=>p.emit("error",e);e.on("error",t);const r=new i.SaxesParser,n=[];let a=!1,s=!1;const l=[];let u,c={},h="",f="",d="";r.on("error",t),r.on("opentag",(e=>{"variable"===e.name&&this.stackEquals(n,["sparql","head"])?l.push(this.dataFactory.variable(e.attributes.name)):"results"===e.name&&this.stackEquals(n,["sparql"])?s=!0:"result"===e.name&&this.stackEquals(n,["sparql","results"])?c={}:"binding"===e.name&&this.stackEquals(n,["sparql","results","result"])?(h=e.attributes.name||"",f="",u="",d=""):this.stackEquals(n,["sparql","results","result","binding"])&&(f=e.name,u="xml:lang"in e.attributes?e.attributes["xml:lang"]:"datatype"in e.attributes?this.dataFactory.namedNode(e.attributes.datatype):void 0),n.push(e.name)})),r.on("closetag",(e=>{if(this.stackEquals(n,["sparql","head"])&&(p.emit("variables",l),a=!0),this.stackEquals(n,["sparql","results","result"])&&p.push(c),this.stackEquals(n,["sparql","results","result","binding"])){const e=this.prefixVariableQuestionMark?"?"+h:h;!h&&f?t(new Error(`Terms should have a name on line ${r.line+1}`)):"uri"===f?c[e]=this.dataFactory.namedNode(d):"bnode"===f?c[e]=this.dataFactory.blankNode(d):"literal"===f?c[e]=this.dataFactory.literal(d,u):f&&t(new Error(`Invalid term type '${f}' on line ${r.line+1}`))}n.pop()})),r.on("text",(e=>{this.stackEquals(n,["sparql","results","result","binding",f])&&(d=e)}));const p=e.on("end",(e=>{s?a||p.emit("variables",[]):p.emit("error",new Error("No valid SPARQL query results were found."))})).pipe(new o.Transform({objectMode:!0,transform(e,t,n){r.write(e),n()}}));return p}parseXmlBooleanStream(e){return new Promise(((t,r)=>{const n=new i.SaxesParser,o=[];n.on("error",r),n.on("opentag",(e=>{o.push(e.name)})),n.on("closetag",(e=>{o.pop()})),n.on("text",(e=>{this.stackEquals(o,["sparql","boolean"])&&t("true"===e)})),e.on("error",r).on("data",(e=>n.write(e))).on("end",(()=>r(new Error("No valid ASK response was found."))))}))}stackEquals(e,t){return e.length===t.length&&e.every(((e,r)=>t[r]===e))}}},575:(e,t,r)=>{"use strict";const{AbortError:n,codes:i}=r(122),o=r(7532),{ERR_INVALID_ARG_TYPE:a}=i;e.exports.addAbortSignal=function(t,r){if(((e,t)=>{if("object"!=typeof e||!("aborted"in e))throw new a("signal","AbortSignal",e)})(t),!(n=r)||"function"!=typeof n.pipe)throw new a("stream","stream.Stream",r);var n;return e.exports.addAbortSignalNoValidate(t,r)},e.exports.addAbortSignalNoValidate=function(e,t){if("object"!=typeof e||!("aborted"in e))return t;const r=()=>{t.destroy(new n(void 0,{cause:e.reason}))};return e.aborted?r():(e.addEventListener("abort",r),o(t,(()=>e.removeEventListener("abort",r)))),t}},1321:(e,t,r)=>{"use strict";var n=r(8764).Buffer;const{StringPrototypeSlice:i,SymbolIterator:o,TypedArrayPrototypeSet:a,Uint8Array:s}=r(1705),{inspect:l}=r(9897);e.exports=class{constructor(){this.head=null,this.tail=null,this.length=0}push(e){const t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}unshift(e){const t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}shift(){if(0===this.length)return;const e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}clear(){this.head=this.tail=null,this.length=0}join(e){if(0===this.length)return"";let t=this.head,r=""+t.data;for(;null!==(t=t.next);)r+=e+t.data;return r}concat(e){if(0===this.length)return n.alloc(0);const t=n.allocUnsafe(e>>>0);let r=this.head,i=0;for(;r;)a(t,r.data,i),i+=r.data.length,r=r.next;return t}consume(e,t){const r=this.head.data;if(e<r.length){const t=r.slice(0,e);return this.head.data=r.slice(e),t}return e===r.length?this.shift():t?this._getString(e):this._getBuffer(e)}first(){return this.head.data}*[o](){for(let e=this.head;e;e=e.next)yield e.data}_getString(e){let t="",r=this.head,n=0;do{const o=r.data;if(!(e>o.length)){e===o.length?(t+=o,++n,r.next?this.head=r.next:this.head=this.tail=null):(t+=i(o,0,e),this.head=r,r.data=i(o,e));break}t+=o,e-=o.length,++n}while(null!==(r=r.next));return this.length-=n,t}_getBuffer(e){const t=n.allocUnsafe(e),r=e;let i=this.head,o=0;do{const n=i.data;if(!(e>n.length)){e===n.length?(a(t,n,r-e),++o,i.next?this.head=i.next:this.head=this.tail=null):(a(t,new s(n.buffer,n.byteOffset,e),r-e),this.head=i,i.data=n.slice(e));break}a(t,n,r-e),e-=n.length,++o}while(null!==(i=i.next));return this.length-=o,t}[Symbol.for("nodejs.util.inspect.custom")](e,t){return l(this,{...t,depth:0,customInspect:!1})}}},2524:(e,t,r)=>{"use strict";const{pipeline:n}=r(640),i=r(955),{destroyer:o}=r(3726),{isNodeStream:a,isReadable:s,isWritable:l}=r(7772),{AbortError:u,codes:{ERR_INVALID_ARG_VALUE:c,ERR_MISSING_ARGS:h}}=r(122);e.exports=function(...e){if(0===e.length)throw new h("streams");if(1===e.length)return i.from(e[0]);const t=[...e];if("function"==typeof e[0]&&(e[0]=i.from(e[0])),"function"==typeof e[e.length-1]){const t=e.length-1;e[t]=i.from(e[t])}for(let r=0;r<e.length;++r)if(a(e[r])){if(r<e.length-1&&!s(e[r]))throw new c(`streams[${r}]`,t[r],"must be readable");if(r>0&&!l(e[r]))throw new c(`streams[${r}]`,t[r],"must be writable")}let r,f,d,p,b;const y=e[0],g=n(e,(function(e){const t=p;p=null,t?t(e):e?b.destroy(e):m||_||b.destroy()})),_=!!l(y),m=!!s(g);return b=new i({writableObjectMode:!(null==y||!y.writableObjectMode),readableObjectMode:!(null==g||!g.writableObjectMode),writable:_,readable:m}),_&&(b._write=function(e,t,n){y.write(e,t)?n():r=n},b._final=function(e){y.end(),f=e},y.on("drain",(function(){if(r){const e=r;r=null,e()}})),g.on("finish",(function(){if(f){const e=f;f=null,e()}}))),m&&(g.on("readable",(function(){if(d){const e=d;d=null,e()}})),g.on("end",(function(){b.push(null)})),b._read=function(){for(;;){const e=g.read();if(null===e)return void(d=b._read);if(!b.push(e))return}}),b._destroy=function(e,t){e||null===p||(e=new u),d=null,r=null,f=null,null===p?t(e):(p=t,o(g,e))},b}},3726:(e,t,r)=>{"use strict";var n=r(4155);const{aggregateTwoErrors:i,codes:{ERR_MULTIPLE_CALLBACK:o},AbortError:a}=r(122),{Symbol:s}=r(1705),{kDestroyed:l,isDestroyed:u,isFinished:c,isServerRequest:h}=r(7772),f=s("kDestroy"),d=s("kConstruct");function p(e,t,r){e&&(e.stack,t&&!t.errored&&(t.errored=e),r&&!r.errored&&(r.errored=e))}function b(e,t,r){let i=!1;function o(t){if(i)return;i=!0;const o=e._readableState,a=e._writableState;p(t,a,o),a&&(a.closed=!0),o&&(o.closed=!0),"function"==typeof r&&r(t),t?n.nextTick(y,e,t):n.nextTick(g,e)}try{e._destroy(t||null,o)}catch(t){o(t)}}function y(e,t){_(e,t),g(e)}function g(e){const t=e._readableState,r=e._writableState;r&&(r.closeEmitted=!0),t&&(t.closeEmitted=!0),(r&&r.emitClose||t&&t.emitClose)&&e.emit("close")}function _(e,t){const r=e._readableState,n=e._writableState;n&&n.errorEmitted||r&&r.errorEmitted||(n&&(n.errorEmitted=!0),r&&(r.errorEmitted=!0),e.emit("error",t))}function m(e,t,r){const i=e._readableState,o=e._writableState;if(o&&o.destroyed||i&&i.destroyed)return this;i&&i.autoDestroy||o&&o.autoDestroy?e.destroy(t):t&&(t.stack,o&&!o.errored&&(o.errored=t),i&&!i.errored&&(i.errored=t),r?n.nextTick(_,e,t):_(e,t))}function w(e){let t=!1;function r(r){if(t)return void m(e,null!=r?r:new o);t=!0;const i=e._readableState,a=e._writableState,s=a||i;i&&(i.constructed=!0),a&&(a.constructed=!0),s.destroyed?e.emit(f,r):r?m(e,r,!0):n.nextTick(v,e)}try{e._construct(r)}catch(e){r(e)}}function v(e){e.emit(d)}function E(e){return e&&e.setHeader&&"function"==typeof e.abort}function S(e){e.emit("close")}function R(e,t){e.emit("error",t),n.nextTick(S,e)}e.exports={construct:function(e,t){if("function"!=typeof e._construct)return;const r=e._readableState,i=e._writableState;r&&(r.constructed=!1),i&&(i.constructed=!1),e.once(d,t),e.listenerCount(d)>1||n.nextTick(w,e)},destroyer:function(e,t){e&&!u(e)&&(t||c(e)||(t=new a),h(e)?(e.socket=null,e.destroy(t)):E(e)?e.abort():E(e.req)?e.req.abort():"function"==typeof e.destroy?e.destroy(t):"function"==typeof e.close?e.close():t?n.nextTick(R,e):n.nextTick(S,e),e.destroyed||(e[l]=!0))},destroy:function(e,t){const r=this._readableState,n=this._writableState,o=n||r;return n&&n.destroyed||r&&r.destroyed?("function"==typeof t&&t(),this):(p(e,n,r),n&&(n.destroyed=!0),r&&(r.destroyed=!0),o.constructed?b(this,e,t):this.once(f,(function(r){b(this,i(r,e),t)})),this)},undestroy:function(){const e=this._readableState,t=this._writableState;e&&(e.constructed=!0,e.closed=!1,e.closeEmitted=!1,e.destroyed=!1,e.errored=null,e.errorEmitted=!1,e.reading=!1,e.ended=!1===e.readable,e.endEmitted=!1===e.readable),t&&(t.constructed=!0,t.destroyed=!1,t.closed=!1,t.closeEmitted=!1,t.errored=null,t.errorEmitted=!1,t.finalCalled=!1,t.prefinished=!1,t.ended=!1===t.writable,t.ending=!1===t.writable,t.finished=!1===t.writable)},errorOrDestroy:m}},955:(e,t,r)=>{"use strict";const{ObjectDefineProperties:n,ObjectGetOwnPropertyDescriptor:i,ObjectKeys:o,ObjectSetPrototypeOf:a}=r(1705);e.exports=u;const s=r(9574),l=r(797);a(u.prototype,s.prototype),a(u,s);{const e=o(l.prototype);for(let t=0;t<e.length;t++){const r=e[t];u.prototype[r]||(u.prototype[r]=l.prototype[r])}}function u(e){if(!(this instanceof u))return new u(e);s.call(this,e),l.call(this,e),e?(this.allowHalfOpen=!1!==e.allowHalfOpen,!1===e.readable&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===e.writable&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)):this.allowHalfOpen=!0}let c,h;function f(){return void 0===c&&(c={}),c}n(u.prototype,{writable:i(l.prototype,"writable"),writableHighWaterMark:i(l.prototype,"writableHighWaterMark"),writableObjectMode:i(l.prototype,"writableObjectMode"),writableBuffer:i(l.prototype,"writableBuffer"),writableLength:i(l.prototype,"writableLength"),writableFinished:i(l.prototype,"writableFinished"),writableCorked:i(l.prototype,"writableCorked"),writableEnded:i(l.prototype,"writableEnded"),writableNeedDrain:i(l.prototype,"writableNeedDrain"),destroyed:{get(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set(e){this._readableState&&this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}}),u.fromWeb=function(e,t){return f().newStreamDuplexFromReadableWritablePair(e,t)},u.toWeb=function(e){return f().newReadableWritablePairFromDuplex(e)},u.from=function(e){return h||(h=r(9090)),h(e,"body")}},9090:(e,t,r)=>{"use strict";var n=r(4155);const i=r(8764),{isReadable:o,isWritable:a,isIterable:s,isNodeStream:l,isReadableNodeStream:u,isWritableNodeStream:c,isDuplexNodeStream:h}=r(7772),f=r(7532),{AbortError:d,codes:{ERR_INVALID_ARG_TYPE:p,ERR_INVALID_RETURN_VALUE:b}}=r(122),{destroyer:y}=r(3726),g=r(955),_=r(9574),{createDeferredPromise:m}=r(9897),w=r(7540),v=globalThis.Blob||i.Blob,E=void 0!==v?function(e){return e instanceof v}:function(e){return!1},S=globalThis.AbortController||r(8599).AbortController,{FunctionPrototypeCall:R}=r(1705);class A extends g{constructor(e){super(e),!1===(null==e?void 0:e.readable)&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===(null==e?void 0:e.writable)&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)}}function T(e){const t=e.readable&&"function"!=typeof e.readable.read?_.wrap(e.readable):e.readable,r=e.writable;let n,i,s,l,u,c=!!o(t),h=!!a(r);function p(e){const t=l;l=null,t?t(e):e?u.destroy(e):c||h||u.destroy()}return u=new A({readableObjectMode:!(null==t||!t.readableObjectMode),writableObjectMode:!(null==r||!r.writableObjectMode),readable:c,writable:h}),h&&(f(r,(e=>{h=!1,e&&y(t,e),p(e)})),u._write=function(e,t,i){r.write(e,t)?i():n=i},u._final=function(e){r.end(),i=e},r.on("drain",(function(){if(n){const e=n;n=null,e()}})),r.on("finish",(function(){if(i){const e=i;i=null,e()}}))),c&&(f(t,(e=>{c=!1,e&&y(t,e),p(e)})),t.on("readable",(function(){if(s){const e=s;s=null,e()}})),t.on("end",(function(){u.push(null)})),u._read=function(){for(;;){const e=t.read();if(null===e)return void(s=u._read);if(!u.push(e))return}}),u._destroy=function(e,o){e||null===l||(e=new d),s=null,n=null,i=null,null===l?o(e):(l=o,y(r,e),y(t,e))},u}e.exports=function e(t,r){if(h(t))return t;if(u(t))return T({readable:t});if(c(t))return T({writable:t});if(l(t))return T({writable:!1,readable:!1});if("function"==typeof t){const{value:e,write:i,final:o,destroy:a}=function(e){let{promise:t,resolve:r}=m();const i=new S,o=i.signal;return{value:e(async function*(){for(;;){const e=t;t=null;const{chunk:i,done:a,cb:s}=await e;if(n.nextTick(s),a)return;if(o.aborted)throw new d(void 0,{cause:o.reason});({promise:t,resolve:r}=m()),yield i}}(),{signal:o}),write(e,t,n){const i=r;r=null,i({chunk:e,done:!1,cb:n})},final(e){const t=r;r=null,t({done:!0,cb:e})},destroy(e,t){i.abort(),t(e)}}}(t);if(s(e))return w(A,e,{objectMode:!0,write:i,final:o,destroy:a});const l=null==e?void 0:e.then;if("function"==typeof l){let t;const r=R(l,e,(e=>{if(null!=e)throw new b("nully","body",e)}),(e=>{y(t,e)}));return t=new A({objectMode:!0,readable:!1,write:i,final(e){o((async()=>{try{await r,n.nextTick(e,null)}catch(t){n.nextTick(e,t)}}))},destroy:a})}throw new b("Iterable, AsyncIterable or AsyncFunction",r,e)}if(E(t))return e(t.arrayBuffer());if(s(t))return w(A,t,{objectMode:!0,writable:!1});if("object"==typeof(null==t?void 0:t.writable)||"object"==typeof(null==t?void 0:t.readable))return T({readable:null!=t&&t.readable?u(null==t?void 0:t.readable)?null==t?void 0:t.readable:e(t.readable):void 0,writable:null!=t&&t.writable?c(null==t?void 0:t.writable)?null==t?void 0:t.writable:e(t.writable):void 0});const i=null==t?void 0:t.then;if("function"==typeof i){let e;return R(i,t,(t=>{null!=t&&e.push(t),e.push(null)}),(t=>{y(e,t)})),e=new A({objectMode:!0,writable:!1,read(){}})}throw new p(r,["Blob","ReadableStream","WritableStream","Stream","Iterable","AsyncIterable","Function","{ readable, writable } pair","Promise"],t)}},7532:(e,t,r)=>{"use strict";var n=r(4155);const{AbortError:i,codes:o}=r(122),{ERR_INVALID_ARG_TYPE:a,ERR_STREAM_PREMATURE_CLOSE:s}=o,{once:l}=r(9897),{validateAbortSignal:u,validateFunction:c,validateObject:h}=r(5663),{Promise:f}=r(1705),{isClosed:d,isReadable:p,isReadableNodeStream:b,isReadableFinished:y,isReadableErrored:g,isWritable:_,isWritableNodeStream:m,isWritableFinished:w,isWritableErrored:v,isNodeStream:E,willEmitClose:S}=r(7772);function R(e){return e.setHeader&&"function"==typeof e.abort}const A=()=>{};function T(e,t,r){var o,f;2===arguments.length?(r=t,t={}):null==t?t={}:h(t,"options"),c(r,"callback"),u(t.signal,"options.signal"),r=l(r);const T=null!==(o=t.readable)&&void 0!==o?o:b(e),x=null!==(f=t.writable)&&void 0!==f?f:m(e);if(!E(e))throw new a("stream","Stream",e);const k=e._writableState,N=e._readableState,O=()=>{e.writable||P()};let I=S(e)&&b(e)===T&&m(e)===x,j=w(e,!1);const P=()=>{j=!0,e.destroyed&&(I=!1),(!I||e.readable&&!T)&&(T&&!D||r.call(e))};let D=y(e,!1);const F=()=>{D=!0,e.destroyed&&(I=!1),(!I||e.writable&&!x)&&(x&&!j||r.call(e))},C=t=>{r.call(e,t)};let L=d(e);const M=()=>{L=!0;const t=v(e)||g(e);return t&&"boolean"!=typeof t?r.call(e,t):T&&!D&&b(e,!0)&&!y(e,!1)?r.call(e,new s):!x||j||w(e,!1)?void r.call(e):r.call(e,new s)},B=()=>{e.req.on("finish",P)};R(e)?(e.on("complete",P),I||e.on("abort",M),e.req?B():e.on("request",B)):x&&!k&&(e.on("end",O),e.on("close",O)),I||"boolean"!=typeof e.aborted||e.on("aborted",M),e.on("end",F),e.on("finish",P),!1!==t.error&&e.on("error",C),e.on("close",M),L?n.nextTick(M):null!=k&&k.errorEmitted||null!=N&&N.errorEmitted?I||n.nextTick(M):(T||I&&!p(e)||!j&&!1!==_(e))&&(x||I&&!_(e)||!D&&!1!==p(e))?N&&e.req&&e.aborted&&n.nextTick(M):n.nextTick(M);const $=()=>{r=A,e.removeListener("aborted",M),e.removeListener("complete",P),e.removeListener("abort",M),e.removeListener("request",B),e.req&&e.req.removeListener("finish",P),e.removeListener("end",O),e.removeListener("close",O),e.removeListener("finish",P),e.removeListener("end",F),e.removeListener("error",C),e.removeListener("close",M)};if(t.signal&&!L){const o=()=>{const n=r;$(),n.call(e,new i(void 0,{cause:t.signal.reason}))};if(t.signal.aborted)n.nextTick(o);else{const n=r;r=l(((...r)=>{t.signal.removeEventListener("abort",o),n.apply(e,r)})),t.signal.addEventListener("abort",o)}}return $}e.exports=T,e.exports.finished=function(e,t){return new f(((r,n)=>{T(e,t,(e=>{e?n(e):r()}))}))}},7540:(e,t,r)=>{"use strict";var n=r(8764).Buffer,i=r(4155);const{PromisePrototypeThen:o,SymbolAsyncIterator:a,SymbolIterator:s}=r(1705),{ERR_INVALID_ARG_TYPE:l,ERR_STREAM_NULL_VALUES:u}=r(122).codes;e.exports=function(e,t,r){let c,h;if("string"==typeof t||t instanceof n)return new e({objectMode:!0,...r,read(){this.push(t),this.push(null)}});if(t&&t[a])h=!0,c=t[a]();else{if(!t||!t[s])throw new l("iterable",["Iterable"],t);h=!1,c=t[s]()}const f=new e({objectMode:!0,highWaterMark:1,...r});let d=!1;return f._read=function(){d||(d=!0,async function(){for(;;){try{const{value:e,done:t}=h?await c.next():c.next();if(t)f.push(null);else{const t=e&&"function"==typeof e.then?await e:e;if(null===t)throw d=!1,new u;if(f.push(t))continue;d=!1}}catch(e){f.destroy(e)}break}}())},f._destroy=function(e,t){o(async function(e){const t=null!=e,r="function"==typeof c.throw;if(t&&r){const{value:t,done:r}=await c.throw(e);if(await t,r)return}if("function"==typeof c.return){const{value:e}=await c.return();await e}}(e),(()=>i.nextTick(t,e)),(r=>i.nextTick(t,r||e)))},f}},9989:(e,t,r)=>{"use strict";const{ArrayIsArray:n,ObjectSetPrototypeOf:i}=r(1705),{EventEmitter:o}=r(7187);function a(e){o.call(this,e)}function s(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?n(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}i(a.prototype,o.prototype),i(a,o),a.prototype.pipe=function(e,t){const r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function i(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",i),e._isStdio||t&&!1===t.end||(r.on("end",l),r.on("close",u));let a=!1;function l(){a||(a=!0,e.end())}function u(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){h(),0===o.listenerCount(this,"error")&&this.emit("error",e)}function h(){r.removeListener("data",n),e.removeListener("drain",i),r.removeListener("end",l),r.removeListener("close",u),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",h),r.removeListener("close",h),e.removeListener("close",h)}return s(r,"error",c),s(e,"error",c),r.on("end",h),r.on("close",h),e.on("close",h),e.emit("pipe",r),e},e.exports={Stream:a,prependListener:s}},6893:(e,t,r)=>{"use strict";const n=globalThis.AbortController||r(8599).AbortController,{codes:{ERR_INVALID_ARG_TYPE:i,ERR_MISSING_ARGS:o,ERR_OUT_OF_RANGE:a},AbortError:s}=r(122),{validateAbortSignal:l,validateInteger:u,validateObject:c}=r(5663),h=r(1705).Symbol("kWeak"),{finished:f}=r(7532),{ArrayPrototypePush:d,MathFloor:p,Number:b,NumberIsNaN:y,Promise:g,PromiseReject:_,PromisePrototypeCatch:m,Symbol:w}=r(1705),v=w("kEmpty"),E=w("kEof");function S(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);null!=t&&c(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal");let r=1;return null!=(null==t?void 0:t.concurrency)&&(r=p(t.concurrency)),u(r,"concurrency",1),async function*(){var i,o;const a=new n,l=this,u=[],c=a.signal,h={signal:c},f=()=>a.abort();let d,p;null!=t&&null!==(i=t.signal)&&void 0!==i&&i.aborted&&f(),null==t||null===(o=t.signal)||void 0===o||o.addEventListener("abort",f);let b=!1;function y(){b=!0}!async function(){try{for await(let t of l){var n;if(b)return;if(c.aborted)throw new s;try{t=e(t,h)}catch(e){t=_(e)}t!==v&&("function"==typeof(null===(n=t)||void 0===n?void 0:n.catch)&&t.catch(y),u.push(t),d&&(d(),d=null),!b&&u.length&&u.length>=r&&await new g((e=>{p=e})))}u.push(E)}catch(e){const t=_(e);m(t,y),u.push(t)}finally{var i;b=!0,d&&(d(),d=null),null==t||null===(i=t.signal)||void 0===i||i.removeEventListener("abort",f)}}();try{for(;;){for(;u.length>0;){const e=await u[0];if(e===E)return;if(c.aborted)throw new s;e!==v&&(yield e),u.shift(),p&&(p(),p=null)}await new g((e=>{d=e}))}}finally{a.abort(),b=!0,p&&(p(),p=null)}}.call(this)}async function R(e,t){for await(const r of A.call(this,e,t))return!0;return!1}function A(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);return S.call(this,(async function(t,r){return await e(t,r)?t:v}),t)}class T extends o{constructor(){super("reduce"),this.message="Reduce of an empty stream requires an initial value"}}function x(e){if(e=b(e),y(e))return 0;if(e<0)throw new a("number",">= 0",e);return e}e.exports.streamReturningOperators={asIndexedPairs:function(e){return null!=e&&c(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal"),async function*(){let t=0;for await(const n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new s({cause:e.signal.reason});yield[t++,n]}}.call(this)},drop:function(e,t){return null!=t&&c(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal"),e=x(e),async function*(){var r;if(null!=t&&null!==(r=t.signal)&&void 0!==r&&r.aborted)throw new s;for await(const r of this){var n;if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new s;e--<=0&&(yield r)}}.call(this)},filter:A,flatMap:function(e,t){const r=S.call(this,e,t);return async function*(){for await(const e of r)yield*e}.call(this)},map:S,take:function(e,t){return null!=t&&c(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal"),e=x(e),async function*(){var r;if(null!=t&&null!==(r=t.signal)&&void 0!==r&&r.aborted)throw new s;for await(const r of this){var n;if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new s;if(!(e-- >0))return;yield r}}.call(this)}},e.exports.promiseReturningOperators={every:async function(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);return!await R.call(this,(async(...t)=>!await e(...t)),t)},forEach:async function(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);for await(const r of S.call(this,(async function(t,r){return await e(t,r),v}),t));},reduce:async function(e,t,r){var o;if("function"!=typeof e)throw new i("reducer",["Function","AsyncFunction"],e);null!=r&&c(r,"options"),null!=(null==r?void 0:r.signal)&&l(r.signal,"options.signal");let a=arguments.length>1;if(null!=r&&null!==(o=r.signal)&&void 0!==o&&o.aborted){const e=new s(void 0,{cause:r.signal.reason});throw this.once("error",(()=>{})),await f(this.destroy(e)),e}const u=new n,d=u.signal;if(null!=r&&r.signal){const e={once:!0,[h]:this};r.signal.addEventListener("abort",(()=>u.abort()),e)}let p=!1;try{for await(const n of this){var b;if(p=!0,null!=r&&null!==(b=r.signal)&&void 0!==b&&b.aborted)throw new s;a?t=await e(t,n,{signal:d}):(t=n,a=!0)}if(!p&&!a)throw new T}finally{u.abort()}return t},toArray:async function(e){null!=e&&c(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal");const t=[];for await(const n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new s(void 0,{cause:e.signal.reason});d(t,n)}return t},some:R,find:async function(e,t){for await(const r of A.call(this,e,t))return r}}},7042:(e,t,r)=>{"use strict";const{ObjectSetPrototypeOf:n}=r(1705);e.exports=o;const i=r(3788);function o(e){if(!(this instanceof o))return new o(e);i.call(this,e)}n(o.prototype,i.prototype),n(o,i),o.prototype._transform=function(e,t,r){r(null,e)}},640:(e,t,r)=>{"use strict";var n=r(4155);const{ArrayIsArray:i,Promise:o,SymbolAsyncIterator:a}=r(1705),s=r(7532),{once:l}=r(9897),u=r(3726),c=r(955),{aggregateTwoErrors:h,codes:{ERR_INVALID_ARG_TYPE:f,ERR_INVALID_RETURN_VALUE:d,ERR_MISSING_ARGS:p,ERR_STREAM_DESTROYED:b},AbortError:y}=r(122),{validateFunction:g,validateAbortSignal:_}=r(5663),{isIterable:m,isReadable:w,isReadableNodeStream:v,isNodeStream:E}=r(7772),S=globalThis.AbortController||r(8599).AbortController;let R,A;function T(e,t,r){let n=!1;return e.on("close",(()=>{n=!0})),{destroy:t=>{n||(n=!0,u.destroyer(e,t||new b("pipe")))},cleanup:s(e,{readable:t,writable:r},(e=>{n=!e}))}}function x(e){if(m(e))return e;if(v(e))return async function*(e){A||(A=r(9574)),yield*A.prototype[a].call(e)}(e);throw new f("val",["Readable","Iterable","AsyncIterable"],e)}async function k(e,t,r,{end:n}){let i,a=null;const l=e=>{if(e&&(i=e),a){const e=a;a=null,e()}},u=()=>new o(((e,t)=>{i?t(i):a=()=>{i?t(i):e()}}));t.on("drain",l);const c=s(t,{readable:!1},l);try{t.writableNeedDrain&&await u();for await(const r of e)t.write(r)||await u();n&&t.end(),await u(),r()}catch(e){r(i!==e?h(i,e):e)}finally{c(),t.off("drain",l)}}function N(e,t,o){if(1===e.length&&i(e[0])&&(e=e[0]),e.length<2)throw new p("streams");const a=new S,s=a.signal,l=null==o?void 0:o.signal,u=[];function h(){P(new y)}let b,g;_(l,"options.signal"),null==l||l.addEventListener("abort",h);const A=[];let N,I=0;function j(e){P(e,0==--I)}function P(e,r){if(!e||b&&"ERR_STREAM_PREMATURE_CLOSE"!==b.code||(b=e),b||r){for(;A.length;)A.shift()(b);null==l||l.removeEventListener("abort",h),a.abort(),r&&(b||u.forEach((e=>e())),n.nextTick(t,b,g))}}for(let F=0;F<e.length;F++){const C=e[F],L=F<e.length-1,M=F>0,B=L||!1!==(null==o?void 0:o.end),$=F===e.length-1;if(E(C)){if(B){const{destroy:q,cleanup:G}=T(C,L,M);A.push(q),w(C)&&$&&u.push(G)}function U(e){e&&"AbortError"!==e.name&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code&&j(e)}C.on("error",U),w(C)&&$&&u.push((()=>{C.removeListener("error",U)}))}if(0===F)if("function"==typeof C){if(N=C({signal:s}),!m(N))throw new d("Iterable, AsyncIterable or Stream","source",N)}else N=m(C)||v(C)?C:c.from(C);else if("function"==typeof C)if(N=x(N),N=C(N,{signal:s}),L){if(!m(N,!0))throw new d("AsyncIterable",`transform[${F-1}]`,N)}else{var D;R||(R=r(7042));const W=new R({objectMode:!0}),H=null===(D=N)||void 0===D?void 0:D.then;if("function"==typeof H)I++,H.call(N,(e=>{g=e,null!=e&&W.write(e),B&&W.end(),n.nextTick(j)}),(e=>{W.destroy(e),n.nextTick(j,e)}));else{if(!m(N,!0))throw new d("AsyncIterable or Promise","destination",N);I++,k(N,W,j,{end:B})}N=W;const{destroy:V,cleanup:Q}=T(N,!1,!0);A.push(V),$&&u.push(Q)}else if(E(C)){if(v(N)){I+=2;const z=O(N,C,j,{end:B});w(C)&&$&&u.push(z)}else{if(!m(N))throw new f("val",["Readable","Iterable","AsyncIterable"],N);I++,k(N,C,j,{end:B})}N=C}else N=c.from(C)}return(null!=s&&s.aborted||null!=l&&l.aborted)&&n.nextTick(h),N}function O(e,t,r,{end:n}){return e.pipe(t,{end:n}),n?e.once("end",(()=>t.end())):r(),s(e,{readable:!0,writable:!1},(t=>{const n=e._readableState;t&&"ERR_STREAM_PREMATURE_CLOSE"===t.code&&n&&n.ended&&!n.errored&&!n.errorEmitted?e.once("end",r).once("error",r):r(t)})),s(t,{readable:!1,writable:!0},r)}e.exports={pipelineImpl:N,pipeline:function(...e){return N(e,l(function(e){return g(e[e.length-1],"streams[stream.length - 1]"),e.pop()}(e)))}}},9574:(e,t,r)=>{"use strict";var n=r(8764).Buffer,i=r(4155);const{ArrayPrototypeIndexOf:o,NumberIsInteger:a,NumberIsNaN:s,NumberParseInt:l,ObjectDefineProperties:u,ObjectKeys:c,ObjectSetPrototypeOf:h,Promise:f,SafeSet:d,SymbolAsyncIterator:p,Symbol:b}=r(1705);e.exports=B,B.ReadableState=M;const{EventEmitter:y}=r(7187),{Stream:g,prependListener:_}=r(9989),{addAbortSignal:m}=r(575),w=r(7532);let v=r(9897).debuglog("stream",(e=>{v=e}));const E=r(1321),S=r(3726),{getHighWaterMark:R,getDefaultHighWaterMark:A}=r(5383),{aggregateTwoErrors:T,codes:{ERR_INVALID_ARG_TYPE:x,ERR_METHOD_NOT_IMPLEMENTED:k,ERR_OUT_OF_RANGE:N,ERR_STREAM_PUSH_AFTER_EOF:O,ERR_STREAM_UNSHIFT_AFTER_END_EVENT:I}}=r(122),{validateObject:j}=r(5663),P=b("kPaused"),{StringDecoder:D}=r(2553),F=r(7540);h(B.prototype,g.prototype),h(B,g);const C=()=>{},{errorOrDestroy:L}=S;function M(e,t,n){"boolean"!=typeof n&&(n=t instanceof r(955)),this.objectMode=!(!e||!e.objectMode),n&&(this.objectMode=this.objectMode||!(!e||!e.readableObjectMode)),this.highWaterMark=e?R(this,e,"readableHighWaterMark",n):A(!1),this.buffer=new E,this.length=0,this.pipes=[],this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.constructed=!0,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this[P]=null,this.errorEmitted=!1,this.emitClose=!e||!1!==e.emitClose,this.autoDestroy=!e||!1!==e.autoDestroy,this.destroyed=!1,this.errored=null,this.closed=!1,this.closeEmitted=!1,this.defaultEncoding=e&&e.defaultEncoding||"utf8",this.awaitDrainWriters=null,this.multiAwaitDrain=!1,this.readingMore=!1,this.dataEmitted=!1,this.decoder=null,this.encoding=null,e&&e.encoding&&(this.decoder=new D(e.encoding),this.encoding=e.encoding)}function B(e){if(!(this instanceof B))return new B(e);const t=this instanceof r(955);this._readableState=new M(e,this,t),e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.construct&&(this._construct=e.construct),e.signal&&!t&&m(e.signal,this)),g.call(this,e),S.construct(this,(()=>{this._readableState.needReadable&&H(this,this._readableState)}))}function $(e,t,r,i){v("readableAddChunk",t);const o=e._readableState;let a;if(o.objectMode||("string"==typeof t?(r=r||o.defaultEncoding,o.encoding!==r&&(i&&o.encoding?t=n.from(t,r).toString(o.encoding):(t=n.from(t,r),r=""))):t instanceof n?r="":g._isUint8Array(t)?(t=g._uint8ArrayToBuffer(t),r=""):null!=t&&(a=new x("chunk",["string","Buffer","Uint8Array"],t))),a)L(e,a);else if(null===t)o.reading=!1,function(e,t){if(v("onEofChunk"),!t.ended){if(t.decoder){const e=t.decoder.end();e&&e.length&&(t.buffer.push(e),t.length+=t.objectMode?1:e.length)}t.ended=!0,t.sync?G(e):(t.needReadable=!1,t.emittedReadable=!0,W(e))}}(e,o);else if(o.objectMode||t&&t.length>0)if(i)if(o.endEmitted)L(e,new I);else{if(o.destroyed||o.errored)return!1;U(e,o,t,!0)}else if(o.ended)L(e,new O);else{if(o.destroyed||o.errored)return!1;o.reading=!1,o.decoder&&!r?(t=o.decoder.write(t),o.objectMode||0!==t.length?U(e,o,t,!1):H(e,o)):U(e,o,t,!1)}else i||(o.reading=!1,H(e,o));return!o.ended&&(o.length<o.highWaterMark||0===o.length)}function U(e,t,r,n){t.flowing&&0===t.length&&!t.sync&&e.listenerCount("data")>0?(t.multiAwaitDrain?t.awaitDrainWriters.clear():t.awaitDrainWriters=null,t.dataEmitted=!0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&G(e)),H(e,t)}function q(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:s(e)?t.flowing&&t.length?t.buffer.first().length:t.length:e<=t.length?e:t.ended?t.length:0}function G(e){const t=e._readableState;v("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(v("emitReadable",t.flowing),t.emittedReadable=!0,i.nextTick(W,e))}function W(e){const t=e._readableState;v("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||t.errored||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,X(e)}function H(e,t){!t.readingMore&&t.constructed&&(t.readingMore=!0,i.nextTick(V,e,t))}function V(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){const r=t.length;if(v("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function Q(e){const t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!1===t[P]?t.flowing=!0:e.listenerCount("data")>0?e.resume():t.readableListening||(t.flowing=null)}function z(e){v("readable nexttick read 0"),e.read(0)}function Y(e,t){v("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),X(e),t.flowing&&!t.reading&&e.read(0)}function X(e){const t=e._readableState;for(v("flow",t.flowing);t.flowing&&null!==e.read(););}function K(e,t){"function"!=typeof e.read&&(e=B.wrap(e,{objectMode:!0}));const r=async function*(e,t){let r,n=C;function i(t){this===e?(n(),n=C):n=t}e.on("readable",i);const o=w(e,{writable:!1},(e=>{r=e?T(r,e):null,n(),n=C}));try{for(;;){const t=e.destroyed?null:e.read();if(null!==t)yield t;else{if(r)throw r;if(null===r)return;await new f(i)}}}catch(e){throw r=T(r,e),r}finally{!r&&!1===(null==t?void 0:t.destroyOnReturn)||void 0!==r&&!e._readableState.autoDestroy?(e.off("readable",i),o()):S.destroyer(e,null)}}(e,t);return r.stream=e,r}function J(e,t){if(0===t.length)return null;let r;return t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r}function Z(e){const t=e._readableState;v("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,i.nextTick(ee,t,e))}function ee(e,t){if(v("endReadableNT",e.endEmitted,e.length),!e.errored&&!e.closeEmitted&&!e.endEmitted&&0===e.length)if(e.endEmitted=!0,t.emit("end"),t.writable&&!1===t.allowHalfOpen)i.nextTick(te,t);else if(e.autoDestroy){const e=t._writableState;(!e||e.autoDestroy&&(e.finished||!1===e.writable))&&t.destroy()}}function te(e){e.writable&&!e.writableEnded&&!e.destroyed&&e.end()}let re;function ne(){return void 0===re&&(re={}),re}B.prototype.destroy=S.destroy,B.prototype._undestroy=S.undestroy,B.prototype._destroy=function(e,t){t(e)},B.prototype[y.captureRejectionSymbol]=function(e){this.destroy(e)},B.prototype.push=function(e,t){return $(this,e,t,!1)},B.prototype.unshift=function(e,t){return $(this,e,t,!0)},B.prototype.isPaused=function(){const e=this._readableState;return!0===e[P]||!1===e.flowing},B.prototype.setEncoding=function(e){const t=new D(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;const r=this._readableState.buffer;let n="";for(const e of r)n+=t.write(e);return r.clear(),""!==n&&r.push(n),this._readableState.length=n.length,this},B.prototype.read=function(e){v("read",e),void 0===e?e=NaN:a(e)||(e=l(e,10));const t=this._readableState,r=e;if(e>t.highWaterMark&&(t.highWaterMark=function(e){if(e>1073741824)throw new N("size","<= 1GiB",e);return e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,++e}(e)),0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return v("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?Z(this):G(this),null;if(0===(e=q(e,t))&&t.ended)return 0===t.length&&Z(this),null;let n,i=t.needReadable;if(v("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&(i=!0,v("length less than watermark",i)),t.ended||t.reading||t.destroyed||t.errored||!t.constructed)i=!1,v("reading, ended or constructing",i);else if(i){v("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0);try{this._read(t.highWaterMark)}catch(e){L(this,e)}t.sync=!1,t.reading||(e=q(r,t))}return n=e>0?J(e,t):null,null===n?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.multiAwaitDrain?t.awaitDrainWriters.clear():t.awaitDrainWriters=null),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&Z(this)),null===n||t.errorEmitted||t.closeEmitted||(t.dataEmitted=!0,this.emit("data",n)),n},B.prototype._read=function(e){throw new k("_read()")},B.prototype.pipe=function(e,t){const r=this,n=this._readableState;1===n.pipes.length&&(n.multiAwaitDrain||(n.multiAwaitDrain=!0,n.awaitDrainWriters=new d(n.awaitDrainWriters?[n.awaitDrainWriters]:[]))),n.pipes.push(e),v("pipe count=%d opts=%j",n.pipes.length,t);const o=t&&!1===t.end||e===i.stdout||e===i.stderr?b:a;function a(){v("onend"),e.end()}let s;n.endEmitted?i.nextTick(o):r.once("end",o),e.on("unpipe",(function t(i,o){v("onunpipe"),i===r&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,v("cleanup"),e.removeListener("close",f),e.removeListener("finish",p),s&&e.removeListener("drain",s),e.removeListener("error",h),e.removeListener("unpipe",t),r.removeListener("end",a),r.removeListener("end",b),r.removeListener("data",c),l=!0,s&&n.awaitDrainWriters&&(!e._writableState||e._writableState.needDrain)&&s())}));let l=!1;function u(){l||(1===n.pipes.length&&n.pipes[0]===e?(v("false write response, pause",0),n.awaitDrainWriters=e,n.multiAwaitDrain=!1):n.pipes.length>1&&n.pipes.includes(e)&&(v("false write response, pause",n.awaitDrainWriters.size),n.awaitDrainWriters.add(e)),r.pause()),s||(s=function(e,t){return function(){const r=e._readableState;r.awaitDrainWriters===t?(v("pipeOnDrain",1),r.awaitDrainWriters=null):r.multiAwaitDrain&&(v("pipeOnDrain",r.awaitDrainWriters.size),r.awaitDrainWriters.delete(t)),r.awaitDrainWriters&&0!==r.awaitDrainWriters.size||!e.listenerCount("data")||e.resume()}}(r,e),e.on("drain",s))}function c(t){v("ondata");const r=e.write(t);v("dest.write",r),!1===r&&u()}function h(t){if(v("onerror",t),b(),e.removeListener("error",h),0===e.listenerCount("error")){const r=e._writableState||e._readableState;r&&!r.errorEmitted?L(e,t):e.emit("error",t)}}function f(){e.removeListener("finish",p),b()}function p(){v("onfinish"),e.removeListener("close",f),b()}function b(){v("unpipe"),r.unpipe(e)}return r.on("data",c),_(e,"error",h),e.once("close",f),e.once("finish",p),e.emit("pipe",r),!0===e.writableNeedDrain?n.flowing&&u():n.flowing||(v("pipe resume"),r.resume()),e},B.prototype.unpipe=function(e){const t=this._readableState;if(0===t.pipes.length)return this;if(!e){const e=t.pipes;t.pipes=[],this.pause();for(let t=0;t<e.length;t++)e[t].emit("unpipe",this,{hasUnpiped:!1});return this}const r=o(t.pipes,e);return-1===r||(t.pipes.splice(r,1),0===t.pipes.length&&this.pause(),e.emit("unpipe",this,{hasUnpiped:!1})),this},B.prototype.on=function(e,t){const r=g.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,v("on readable",n.length,n.reading),n.length?G(this):n.reading||i.nextTick(z,this))),r},B.prototype.addListener=B.prototype.on,B.prototype.removeListener=function(e,t){const r=g.prototype.removeListener.call(this,e,t);return"readable"===e&&i.nextTick(Q,this),r},B.prototype.off=B.prototype.removeListener,B.prototype.removeAllListeners=function(e){const t=g.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||i.nextTick(Q,this),t},B.prototype.resume=function(){const e=this._readableState;return e.flowing||(v("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(Y,e,t))}(this,e)),e[P]=!1,this},B.prototype.pause=function(){return v("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(v("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState[P]=!0,this},B.prototype.wrap=function(e){let t=!1;e.on("data",(r=>{!this.push(r)&&e.pause&&(t=!0,e.pause())})),e.on("end",(()=>{this.push(null)})),e.on("error",(e=>{L(this,e)})),e.on("close",(()=>{this.destroy()})),e.on("destroy",(()=>{this.destroy()})),this._read=()=>{t&&e.resume&&(t=!1,e.resume())};const r=c(e);for(let t=1;t<r.length;t++){const n=r[t];void 0===this[n]&&"function"==typeof e[n]&&(this[n]=e[n].bind(e))}return this},B.prototype[p]=function(){return K(this)},B.prototype.iterator=function(e){return void 0!==e&&j(e,"options"),K(this,e)},u(B.prototype,{readable:{get(){const e=this._readableState;return!(!e||!1===e.readable||e.destroyed||e.errorEmitted||e.endEmitted)},set(e){this._readableState&&(this._readableState.readable=!!e)}},readableDidRead:{enumerable:!1,get:function(){return this._readableState.dataEmitted}},readableAborted:{enumerable:!1,get:function(){return!(!1===this._readableState.readable||!this._readableState.destroyed&&!this._readableState.errored||this._readableState.endEmitted)}},readableHighWaterMark:{enumerable:!1,get:function(){return this._readableState.highWaterMark}},readableBuffer:{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}},readableFlowing:{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}},readableLength:{enumerable:!1,get(){return this._readableState.length}},readableObjectMode:{enumerable:!1,get(){return!!this._readableState&&this._readableState.objectMode}},readableEncoding:{enumerable:!1,get(){return this._readableState?this._readableState.encoding:null}},errored:{enumerable:!1,get(){return this._readableState?this._readableState.errored:null}},closed:{get(){return!!this._readableState&&this._readableState.closed}},destroyed:{enumerable:!1,get(){return!!this._readableState&&this._readableState.destroyed},set(e){this._readableState&&(this._readableState.destroyed=e)}},readableEnded:{enumerable:!1,get(){return!!this._readableState&&this._readableState.endEmitted}}}),u(M.prototype,{pipesCount:{get(){return this.pipes.length}},paused:{get(){return!1!==this[P]},set(e){this[P]=!!e}}}),B._fromList=J,B.from=function(e,t){return F(B,e,t)},B.fromWeb=function(e,t){return ne().newStreamReadableFromReadableStream(e,t)},B.toWeb=function(e){return ne().newReadableStreamFromStreamReadable(e)},B.wrap=function(e,t){var r,n;return new B({objectMode:null===(r=null!==(n=e.readableObjectMode)&&void 0!==n?n:e.objectMode)||void 0===r||r,...t,destroy(t,r){S.destroyer(e,t),r(t)}}).wrap(e)}},5383:(e,t,r)=>{"use strict";const{MathFloor:n,NumberIsInteger:i}=r(1705),{ERR_INVALID_ARG_VALUE:o}=r(122).codes;function a(e){return e?16:16384}e.exports={getHighWaterMark:function(e,t,r,s){const l=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,s,r);if(null!=l){if(!i(l)||l<0)throw new o(s?`options.${r}`:"options.highWaterMark",l);return n(l)}return a(e.objectMode)},getDefaultHighWaterMark:a}},3788:(e,t,r)=>{"use strict";const{ObjectSetPrototypeOf:n,Symbol:i}=r(1705);e.exports=l;const{ERR_METHOD_NOT_IMPLEMENTED:o}=r(122).codes,a=r(955);n(l.prototype,a.prototype),n(l,a);const s=i("kCallback");function l(e){if(!(this instanceof l))return new l(e);a.call(this,e),this._readableState.sync=!1,this[s]=null,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",c)}function u(e){"function"!=typeof this._flush||this.destroyed?(this.push(null),e&&e()):this._flush(((t,r)=>{t?e?e(t):this.destroy(t):(null!=r&&this.push(r),this.push(null),e&&e())}))}function c(){this._final!==u&&u.call(this)}l.prototype._final=u,l.prototype._transform=function(e,t,r){throw new o("_transform()")},l.prototype._write=function(e,t,r){const n=this._readableState,i=this._writableState,o=n.length;this._transform(e,t,((e,t)=>{e?r(e):(null!=t&&this.push(t),i.ended||o===n.length||n.length<n.highWaterMark||0===n.highWaterMark||0===n.length?r():this[s]=r)}))},l.prototype._read=function(){if(this[s]){const e=this[s];this[s]=null,e()}}},7772:(e,t,r)=>{"use strict";const{Symbol:n,SymbolAsyncIterator:i,SymbolIterator:o}=r(1705),a=n("kDestroyed"),s=n("kIsErrored"),l=n("kIsReadable"),u=n("kIsDisturbed");function c(e,t=!1){var r;return!(!e||"function"!=typeof e.pipe||"function"!=typeof e.on||t&&("function"!=typeof e.pause||"function"!=typeof e.resume)||e._writableState&&!1===(null===(r=e._readableState)||void 0===r?void 0:r.readable)||e._writableState&&!e._readableState)}function h(e){var t;return!(!e||"function"!=typeof e.write||"function"!=typeof e.on||e._readableState&&!1===(null===(t=e._writableState)||void 0===t?void 0:t.writable))}function f(e){return e&&(e._readableState||e._writableState||"function"==typeof e.write&&"function"==typeof e.on||"function"==typeof e.pipe&&"function"==typeof e.on)}function d(e){if(!f(e))return null;const t=e._writableState,r=e._readableState,n=t||r;return!!(e.destroyed||e[a]||null!=n&&n.destroyed)}function p(e){if(!h(e))return null;if(!0===e.writableEnded)return!0;const t=e._writableState;return(null==t||!t.errored)&&("boolean"!=typeof(null==t?void 0:t.ended)?null:t.ended)}function b(e,t){if(!c(e))return null;const r=e._readableState;return(null==r||!r.errored)&&("boolean"!=typeof(null==r?void 0:r.endEmitted)?null:!!(r.endEmitted||!1===t&&!0===r.ended&&0===r.length))}function y(e){return e&&null!=e[l]?e[l]:"boolean"!=typeof(null==e?void 0:e.readable)?null:!d(e)&&c(e)&&e.readable&&!b(e)}function g(e){return"boolean"!=typeof(null==e?void 0:e.writable)?null:!d(e)&&h(e)&&e.writable&&!p(e)}function _(e){return"boolean"==typeof e._closed&&"boolean"==typeof e._defaultKeepAlive&&"boolean"==typeof e._removedConnection&&"boolean"==typeof e._removedContLen}function m(e){return"boolean"==typeof e._sent100&&_(e)}e.exports={kDestroyed:a,isDisturbed:function(e){var t;return!(!e||!(null!==(t=e[u])&&void 0!==t?t:e.readableDidRead||e.readableAborted))},kIsDisturbed:u,isErrored:function(e){var t,r,n,i,o,a,l,u,c,h;return!(!e||!(null!==(t=null!==(r=null!==(n=null!==(i=null!==(o=null!==(a=e[s])&&void 0!==a?a:e.readableErrored)&&void 0!==o?o:e.writableErrored)&&void 0!==i?i:null===(l=e._readableState)||void 0===l?void 0:l.errorEmitted)&&void 0!==n?n:null===(u=e._writableState)||void 0===u?void 0:u.errorEmitted)&&void 0!==r?r:null===(c=e._readableState)||void 0===c?void 0:c.errored)&&void 0!==t?t:null===(h=e._writableState)||void 0===h?void 0:h.errored))},kIsErrored:s,isReadable:y,kIsReadable:l,isClosed:function(e){if(!f(e))return null;if("boolean"==typeof e.closed)return e.closed;const t=e._writableState,r=e._readableState;return"boolean"==typeof(null==t?void 0:t.closed)||"boolean"==typeof(null==r?void 0:r.closed)?(null==t?void 0:t.closed)||(null==r?void 0:r.closed):"boolean"==typeof e._closed&&_(e)?e._closed:null},isDestroyed:d,isDuplexNodeStream:function(e){return!(!e||"function"!=typeof e.pipe||!e._readableState||"function"!=typeof e.on||"function"!=typeof e.write)},isFinished:function(e,t){return f(e)?!(!d(e)&&(!1!==(null==t?void 0:t.readable)&&y(e)||!1!==(null==t?void 0:t.writable)&&g(e))):null},isIterable:function(e,t){return null!=e&&(!0===t?"function"==typeof e[i]:!1===t?"function"==typeof e[o]:"function"==typeof e[i]||"function"==typeof e[o])},isReadableNodeStream:c,isReadableEnded:function(e){if(!c(e))return null;if(!0===e.readableEnded)return!0;const t=e._readableState;return!(!t||t.errored)&&("boolean"!=typeof(null==t?void 0:t.ended)?null:t.ended)},isReadableFinished:b,isReadableErrored:function(e){var t,r;return f(e)?e.readableErrored?e.readableErrored:null!==(t=null===(r=e._readableState)||void 0===r?void 0:r.errored)&&void 0!==t?t:null:null},isNodeStream:f,isWritable:g,isWritableNodeStream:h,isWritableEnded:p,isWritableFinished:function(e,t){if(!h(e))return null;if(!0===e.writableFinished)return!0;const r=e._writableState;return(null==r||!r.errored)&&("boolean"!=typeof(null==r?void 0:r.finished)?null:!!(r.finished||!1===t&&!0===r.ended&&0===r.length))},isWritableErrored:function(e){var t,r;return f(e)?e.writableErrored?e.writableErrored:null!==(t=null===(r=e._writableState)||void 0===r?void 0:r.errored)&&void 0!==t?t:null:null},isServerRequest:function(e){var t;return"boolean"==typeof e._consuming&&"boolean"==typeof e._dumped&&void 0===(null===(t=e.req)||void 0===t?void 0:t.upgradeOrConnect)},isServerResponse:m,willEmitClose:function(e){if(!f(e))return null;const t=e._writableState,r=e._readableState,n=t||r;return!n&&m(e)||!!(n&&n.autoDestroy&&n.emitClose&&!1===n.closed)}}},797:(e,t,r)=>{"use strict";var n=r(8764).Buffer,i=r(4155);const{ArrayPrototypeSlice:o,Error:a,FunctionPrototypeSymbolHasInstance:s,ObjectDefineProperty:l,ObjectDefineProperties:u,ObjectSetPrototypeOf:c,StringPrototypeToLowerCase:h,Symbol:f,SymbolHasInstance:d}=r(1705);e.exports=D,D.WritableState=j;const{EventEmitter:p}=r(7187),b=r(9989).Stream,y=r(3726),{addAbortSignal:g}=r(575),{getHighWaterMark:_,getDefaultHighWaterMark:m}=r(5383),{ERR_INVALID_ARG_TYPE:w,ERR_METHOD_NOT_IMPLEMENTED:v,ERR_MULTIPLE_CALLBACK:E,ERR_STREAM_CANNOT_PIPE:S,ERR_STREAM_DESTROYED:R,ERR_STREAM_ALREADY_FINISHED:A,ERR_STREAM_NULL_VALUES:T,ERR_STREAM_WRITE_AFTER_END:x,ERR_UNKNOWN_ENCODING:k}=r(122).codes,{errorOrDestroy:N}=y;function O(){}c(D.prototype,b.prototype),c(D,b);const I=f("kOnFinished");function j(e,t,n){"boolean"!=typeof n&&(n=t instanceof r(955)),this.objectMode=!(!e||!e.objectMode),n&&(this.objectMode=this.objectMode||!(!e||!e.writableObjectMode)),this.highWaterMark=e?_(this,e,"writableHighWaterMark",n):m(!1),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;const i=!(!e||!1!==e.decodeStrings);this.decodeStrings=!i,this.defaultEncoding=e&&e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=M.bind(void 0,t),this.writecb=null,this.writelen=0,this.afterWriteTickInfo=null,P(this),this.pendingcb=0,this.constructed=!0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!e||!1!==e.emitClose,this.autoDestroy=!e||!1!==e.autoDestroy,this.errored=null,this.closed=!1,this.closeEmitted=!1,this[I]=[]}function P(e){e.buffered=[],e.bufferedIndex=0,e.allBuffers=!0,e.allNoop=!0}function D(e){const t=this instanceof r(955);if(!t&&!s(D,this))return new D(e);this._writableState=new j(e,this,t),e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final),"function"==typeof e.construct&&(this._construct=e.construct),e.signal&&g(e.signal,this)),b.call(this,e),y.construct(this,(()=>{const e=this._writableState;e.writing||q(this,e),W(this,e)}))}function F(e,t,r,o){const a=e._writableState;if("function"==typeof r)o=r,r=a.defaultEncoding;else{if(r){if("buffer"!==r&&!n.isEncoding(r))throw new k(r)}else r=a.defaultEncoding;"function"!=typeof o&&(o=O)}if(null===t)throw new T;if(!a.objectMode)if("string"==typeof t)!1!==a.decodeStrings&&(t=n.from(t,r),r="buffer");else if(t instanceof n)r="buffer";else{if(!b._isUint8Array(t))throw new w("chunk",["string","Buffer","Uint8Array"],t);t=b._uint8ArrayToBuffer(t),r="buffer"}let s;return a.ending?s=new x:a.destroyed&&(s=new R("write")),s?(i.nextTick(o,s),N(e,s,!0),s):(a.pendingcb++,function(e,t,r,n,i){const o=t.objectMode?1:r.length;t.length+=o;const a=t.length<t.highWaterMark;return a||(t.needDrain=!0),t.writing||t.corked||t.errored||!t.constructed?(t.buffered.push({chunk:r,encoding:n,callback:i}),t.allBuffers&&"buffer"!==n&&(t.allBuffers=!1),t.allNoop&&i!==O&&(t.allNoop=!1)):(t.writelen=o,t.writecb=i,t.writing=!0,t.sync=!0,e._write(r,n,t.onwrite),t.sync=!1),a&&!t.errored&&!t.destroyed}(e,a,t,r,o))}function C(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new R("write")):r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function L(e,t,r,n){--t.pendingcb,n(r),U(t),N(e,r)}function M(e,t){const r=e._writableState,n=r.sync,o=r.writecb;"function"==typeof o?(r.writing=!1,r.writecb=null,r.length-=r.writelen,r.writelen=0,t?(t.stack,r.errored||(r.errored=t),e._readableState&&!e._readableState.errored&&(e._readableState.errored=t),n?i.nextTick(L,e,r,t,o):L(e,r,t,o)):(r.buffered.length>r.bufferedIndex&&q(e,r),n?null!==r.afterWriteTickInfo&&r.afterWriteTickInfo.cb===o?r.afterWriteTickInfo.count++:(r.afterWriteTickInfo={count:1,cb:o,stream:e,state:r},i.nextTick(B,r.afterWriteTickInfo)):$(e,r,1,o))):N(e,new E)}function B({stream:e,state:t,count:r,cb:n}){return t.afterWriteTickInfo=null,$(e,t,r,n)}function $(e,t,r,n){for(!t.ending&&!e.destroyed&&0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"));r-- >0;)t.pendingcb--,n();t.destroyed&&U(t),W(e,t)}function U(e){if(e.writing)return;for(let r=e.bufferedIndex;r<e.buffered.length;++r){var t;const{chunk:n,callback:i}=e.buffered[r],o=e.objectMode?1:n.length;e.length-=o,i(null!==(t=e.errored)&&void 0!==t?t:new R("write"))}const r=e[I].splice(0);for(let t=0;t<r.length;t++){var n;r[t](null!==(n=e.errored)&&void 0!==n?n:new R("end"))}P(e)}function q(e,t){if(t.corked||t.bufferProcessing||t.destroyed||!t.constructed)return;const{buffered:r,bufferedIndex:n,objectMode:i}=t,a=r.length-n;if(!a)return;let s=n;if(t.bufferProcessing=!0,a>1&&e._writev){t.pendingcb-=a-1;const n=t.allNoop?O:e=>{for(let t=s;t<r.length;++t)r[t].callback(e)},i=t.allNoop&&0===s?r:o(r,s);i.allBuffers=t.allBuffers,C(e,t,!0,t.length,i,"",n),P(t)}else{do{const{chunk:n,encoding:o,callback:a}=r[s];r[s++]=null,C(e,t,!1,i?1:n.length,n,o,a)}while(s<r.length&&!t.writing);s===r.length?P(t):s>256?(r.splice(0,s),t.bufferedIndex=0):t.bufferedIndex=s}t.bufferProcessing=!1}function G(e){return e.ending&&!e.destroyed&&e.constructed&&0===e.length&&!e.errored&&0===e.buffered.length&&!e.finished&&!e.writing&&!e.errorEmitted&&!e.closeEmitted}function W(e,t,r){G(t)&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.finalCalled=!0,function(e,t){let r=!1;function n(n){if(r)N(e,null!=n?n:E());else if(r=!0,t.pendingcb--,n){const r=t[I].splice(0);for(let e=0;e<r.length;e++)r[e](n);N(e,n,t.sync)}else G(t)&&(t.prefinished=!0,e.emit("prefinish"),t.pendingcb++,i.nextTick(H,e,t))}t.sync=!0,t.pendingcb++;try{e._final(n)}catch(e){n(e)}t.sync=!1}(e,t)))}(e,t),0===t.pendingcb&&(r?(t.pendingcb++,i.nextTick(((e,t)=>{G(t)?H(e,t):t.pendingcb--}),e,t)):G(t)&&(t.pendingcb++,H(e,t))))}function H(e,t){t.pendingcb--,t.finished=!0;const r=t[I].splice(0);for(let e=0;e<r.length;e++)r[e]();if(e.emit("finish"),t.autoDestroy){const t=e._readableState;(!t||t.autoDestroy&&(t.endEmitted||!1===t.readable))&&e.destroy()}}j.prototype.getBuffer=function(){return o(this.buffered,this.bufferedIndex)},l(j.prototype,"bufferedRequestCount",{get(){return this.buffered.length-this.bufferedIndex}}),l(D,d,{value:function(e){return!!s(this,e)||this===D&&e&&e._writableState instanceof j}}),D.prototype.pipe=function(){N(this,new S)},D.prototype.write=function(e,t,r){return!0===F(this,e,t,r)},D.prototype.cork=function(){this._writableState.corked++},D.prototype.uncork=function(){const e=this._writableState;e.corked&&(e.corked--,e.writing||q(this,e))},D.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=h(e)),!n.isEncoding(e))throw new k(e);return this._writableState.defaultEncoding=e,this},D.prototype._write=function(e,t,r){if(!this._writev)throw new v("_write()");this._writev([{chunk:e,encoding:t}],r)},D.prototype._writev=null,D.prototype.end=function(e,t,r){const n=this._writableState;let o;if("function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e){const r=F(this,e,t);r instanceof a&&(o=r)}return n.corked&&(n.corked=1,this.uncork()),o||(n.errored||n.ending?n.finished?o=new A("end"):n.destroyed&&(o=new R("end")):(n.ending=!0,W(this,n,!0),n.ended=!0)),"function"==typeof r&&(o||n.finished?i.nextTick(r,o):n[I].push(r)),this},u(D.prototype,{closed:{get(){return!!this._writableState&&this._writableState.closed}},destroyed:{get(){return!!this._writableState&&this._writableState.destroyed},set(e){this._writableState&&(this._writableState.destroyed=e)}},writable:{get(){const e=this._writableState;return!(!e||!1===e.writable||e.destroyed||e.errored||e.ending||e.ended)},set(e){this._writableState&&(this._writableState.writable=!!e)}},writableFinished:{get(){return!!this._writableState&&this._writableState.finished}},writableObjectMode:{get(){return!!this._writableState&&this._writableState.objectMode}},writableBuffer:{get(){return this._writableState&&this._writableState.getBuffer()}},writableEnded:{get(){return!!this._writableState&&this._writableState.ending}},writableNeedDrain:{get(){const e=this._writableState;return!!e&&!e.destroyed&&!e.ending&&e.needDrain}},writableHighWaterMark:{get(){return this._writableState&&this._writableState.highWaterMark}},writableCorked:{get(){return this._writableState?this._writableState.corked:0}},writableLength:{get(){return this._writableState&&this._writableState.length}},errored:{enumerable:!1,get(){return this._writableState?this._writableState.errored:null}},writableAborted:{enumerable:!1,get:function(){return!(!1===this._writableState.writable||!this._writableState.destroyed&&!this._writableState.errored||this._writableState.finished)}}});const V=y.destroy;let Q;function z(){return void 0===Q&&(Q={}),Q}D.prototype.destroy=function(e,t){const r=this._writableState;return!r.destroyed&&(r.bufferedIndex<r.buffered.length||r[I].length)&&i.nextTick(U,r),V.call(this,e,t),this},D.prototype._undestroy=y.undestroy,D.prototype._destroy=function(e,t){t(e)},D.prototype[p.captureRejectionSymbol]=function(e){this.destroy(e)},D.fromWeb=function(e,t){return z().newStreamWritableFromWritableStream(e,t)},D.toWeb=function(e){return z().newWritableStreamFromStreamWritable(e)}},5663:(e,t,r)=>{"use strict";const{ArrayIsArray:n,ArrayPrototypeIncludes:i,ArrayPrototypeJoin:o,ArrayPrototypeMap:a,NumberIsInteger:s,NumberMAX_SAFE_INTEGER:l,NumberMIN_SAFE_INTEGER:u,NumberParseInt:c,RegExpPrototypeTest:h,String:f,StringPrototypeToUpperCase:d,StringPrototypeTrim:p}=r(1705),{hideStackFrames:b,codes:{ERR_SOCKET_BAD_PORT:y,ERR_INVALID_ARG_TYPE:g,ERR_INVALID_ARG_VALUE:_,ERR_OUT_OF_RANGE:m,ERR_UNKNOWN_SIGNAL:w}}=r(122),{normalizeEncoding:v}=r(9897),{isAsyncFunction:E,isArrayBufferView:S}=r(9897).types,R={};function A(e){return e===(0|e)}function T(e){return e===e>>>0}const x=/^[0-7]+$/,k=b(((e,t,r=u,n=l)=>{if("number"!=typeof e)throw new g(t,"number",e);if(!s(e))throw new m(t,"an integer",e);if(e<r||e>n)throw new m(t,`>= ${r} && <= ${n}`,e)})),N=b(((e,t,r=-2147483648,n=2147483647)=>{if("number"!=typeof e)throw new g(t,"number",e);if(!A(e)){if(!s(e))throw new m(t,"an integer",e);throw new m(t,`>= ${r} && <= ${n}`,e)}if(e<r||e>n)throw new m(t,`>= ${r} && <= ${n}`,e)})),O=b(((e,t,r)=>{if("number"!=typeof e)throw new g(t,"number",e);if(!T(e)){if(!s(e))throw new m(t,"an integer",e);throw new m(t,`>= ${r?1:0} && < 4294967296`,e)}if(r&&0===e)throw new m(t,">= 1 && < 4294967296",e)}));function I(e,t){if("string"!=typeof e)throw new g(t,"string",e)}const j=b(((e,t,r)=>{if(!i(r,e)){const n=o(a(r,(e=>"string"==typeof e?`'${e}'`:f(e))),", ");throw new _(t,e,"must be one of: "+n)}})),P=b(((e,t,r)=>{const i=null==r,o=!i&&r.allowArray,a=!i&&r.allowFunction;if((i||!r.nullable)&&null===e||!o&&n(e)||"object"!=typeof e&&(!a||"function"!=typeof e))throw new g(t,"Object",e)})),D=b(((e,t,r=0)=>{if(!n(e))throw new g(t,"Array",e);if(e.length<r)throw new _(t,e,`must be longer than ${r}`)})),F=b(((e,t="buffer")=>{if(!S(e))throw new g(t,["Buffer","TypedArray","DataView"],e)})),C=b(((e,t)=>{if(void 0!==e&&(null===e||"object"!=typeof e||!("aborted"in e)))throw new g(t,"AbortSignal",e)})),L=b(((e,t)=>{if("function"!=typeof e)throw new g(t,"Function",e)})),M=b(((e,t)=>{if("function"!=typeof e||E(e))throw new g(t,"Function",e)})),B=b(((e,t)=>{if(void 0!==e)throw new g(t,"undefined",e)}));e.exports={isInt32:A,isUint32:T,parseFileMode:function(e,t,r){if(void 0===e&&(e=r),"string"==typeof e){if(!h(x,e))throw new _(t,e,"must be a 32-bit unsigned integer or an octal string");e=c(e,8)}return N(e,t,0,2**32-1),e},validateArray:D,validateBoolean:function(e,t){if("boolean"!=typeof e)throw new g(t,"boolean",e)},validateBuffer:F,validateEncoding:function(e,t){const r=v(t),n=e.length;if("hex"===r&&n%2!=0)throw new _("encoding",t,`is invalid for data of length ${n}`)},validateFunction:L,validateInt32:N,validateInteger:k,validateNumber:function(e,t){if("number"!=typeof e)throw new g(t,"number",e)},validateObject:P,validateOneOf:j,validatePlainFunction:M,validatePort:function(e,t="Port",r=!0){if("number"!=typeof e&&"string"!=typeof e||"string"==typeof e&&0===p(e).length||+e!=+e>>>0||e>65535||0===e&&!r)throw new y(t,e,r);return 0|e},validateSignalName:function(e,t="signal"){if(I(e,t),void 0===R[e]){if(void 0!==R[d(e)])throw new w(e+" (signals must use all capital letters)");throw new w(e)}},validateString:I,validateUint32:O,validateUndefined:B,validateAbortSignal:C}},5484:(e,t,r)=>{"use strict";const n=r(1950),i=r(478),o=n.Readable.destroy;e.exports=n.Readable,e.exports._uint8ArrayToBuffer=n._uint8ArrayToBuffer,e.exports._isUint8Array=n._isUint8Array,e.exports.isDisturbed=n.isDisturbed,e.exports.isErrored=n.isErrored,e.exports.isReadable=n.isReadable,e.exports.Readable=n.Readable,e.exports.Writable=n.Writable,e.exports.Duplex=n.Duplex,e.exports.Transform=n.Transform,e.exports.PassThrough=n.PassThrough,e.exports.addAbortSignal=n.addAbortSignal,e.exports.finished=n.finished,e.exports.destroy=n.destroy,e.exports.destroy=o,e.exports.pipeline=n.pipeline,e.exports.compose=n.compose,Object.defineProperty(n,"promises",{configurable:!0,enumerable:!0,get:()=>i}),e.exports.Stream=n.Stream,e.exports.default=e.exports},122:(e,t,r)=>{"use strict";const{format:n,inspect:i,AggregateError:o}=r(9897),a=globalThis.AggregateError||o,s=Symbol("kIsNodeError"),l=["string","function","number","object","Function","Object","boolean","bigint","symbol"],u=/^([A-Z][a-z0-9]*)+$/,c={};function h(e,t){if(!e)throw new c.ERR_INTERNAL_ASSERTION(t)}function f(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function d(e,t,r){r||(r=Error);class i extends r{constructor(...r){super(function(e,t,r){if("function"==typeof t)return h(t.length<=r.length,`Code: ${e}; The provided arguments length (${r.length}) does not match the required ones (${t.length}).`),t(...r);const i=(t.match(/%[dfijoOs]/g)||[]).length;return h(i===r.length,`Code: ${e}; The provided arguments length (${r.length}) does not match the required ones (${i}).`),0===r.length?t:n(t,...r)}(e,t,r))}toString(){return`${this.name} [${e}]: ${this.message}`}}Object.defineProperties(i.prototype,{name:{value:r.name,writable:!0,enumerable:!1,configurable:!0},toString:{value(){return`${this.name} [${e}]: ${this.message}`},writable:!0,enumerable:!1,configurable:!0}}),i.prototype.code=e,i.prototype[s]=!0,c[e]=i}function p(e){const t="__node_internal_"+e.name;return Object.defineProperty(e,"name",{value:t}),e}class b extends Error{constructor(e="The operation was aborted",t){if(void 0!==t&&"object"!=typeof t)throw new c.ERR_INVALID_ARG_TYPE("options","Object",t);super(e,t),this.code="ABORT_ERR",this.name="AbortError"}}d("ERR_ASSERTION","%s",Error),d("ERR_INVALID_ARG_TYPE",((e,t,r)=>{h("string"==typeof e,"'name' must be a string"),Array.isArray(t)||(t=[t]);let n="The ";e.endsWith(" argument")?n+=`${e} `:n+=`"${e}" ${e.includes(".")?"property":"argument"} `,n+="must be ";const o=[],a=[],s=[];for(const e of t)h("string"==typeof e,"All expected entries have to be of type string"),l.includes(e)?o.push(e.toLowerCase()):u.test(e)?a.push(e):(h("object"!==e,'The value "object" should be written as "Object"'),s.push(e));if(a.length>0){const e=o.indexOf("object");-1!==e&&(o.splice(o,e,1),a.push("Object"))}if(o.length>0){switch(o.length){case 1:n+=`of type ${o[0]}`;break;case 2:n+=`one of type ${o[0]} or ${o[1]}`;break;default:{const e=o.pop();n+=`one of type ${o.join(", ")}, or ${e}`}}(a.length>0||s.length>0)&&(n+=" or ")}if(a.length>0){switch(a.length){case 1:n+=`an instance of ${a[0]}`;break;case 2:n+=`an instance of ${a[0]} or ${a[1]}`;break;default:{const e=a.pop();n+=`an instance of ${a.join(", ")}, or ${e}`}}s.length>0&&(n+=" or ")}switch(s.length){case 0:break;case 1:s[0].toLowerCase()!==s[0]&&(n+="an "),n+=`${s[0]}`;break;case 2:n+=`one of ${s[0]} or ${s[1]}`;break;default:{const e=s.pop();n+=`one of ${s.join(", ")}, or ${e}`}}if(null==r)n+=`. Received ${r}`;else if("function"==typeof r&&r.name)n+=`. Received function ${r.name}`;else if("object"==typeof r){var c;null!==(c=r.constructor)&&void 0!==c&&c.name?n+=`. Received an instance of ${r.constructor.name}`:n+=`. Received ${i(r,{depth:-1})}`}else{let e=i(r,{colors:!1});e.length>25&&(e=`${e.slice(0,25)}...`),n+=`. Received type ${typeof r} (${e})`}return n}),TypeError),d("ERR_INVALID_ARG_VALUE",((e,t,r="is invalid")=>{let n=i(t);return n.length>128&&(n=n.slice(0,128)+"..."),`The ${e.includes(".")?"property":"argument"} '${e}' ${r}. Received ${n}`}),TypeError),d("ERR_INVALID_RETURN_VALUE",((e,t,r)=>{var n;return`Expected ${e} to be returned from the "${t}" function but got ${null!=r&&null!==(n=r.constructor)&&void 0!==n&&n.name?`instance of ${r.constructor.name}`:"type "+typeof r}.`}),TypeError),d("ERR_MISSING_ARGS",((...e)=>{let t;h(e.length>0,"At least one arg needs to be specified");const r=e.length;switch(e=(Array.isArray(e)?e:[e]).map((e=>`"${e}"`)).join(" or "),r){case 1:t+=`The ${e[0]} argument`;break;case 2:t+=`The ${e[0]} and ${e[1]} arguments`;break;default:{const r=e.pop();t+=`The ${e.join(", ")}, and ${r} arguments`}}return`${t} must be specified`}),TypeError),d("ERR_OUT_OF_RANGE",((e,t,r)=>{let n;return h(t,'Missing "range" argument'),Number.isInteger(r)&&Math.abs(r)>2**32?n=f(String(r)):"bigint"==typeof r?(n=String(r),(r>2n**32n||r<-(2n**32n))&&(n=f(n)),n+="n"):n=i(r),`The value of "${e}" is out of range. It must be ${t}. Received ${n}`}),RangeError),d("ERR_MULTIPLE_CALLBACK","Callback called multiple times",Error),d("ERR_METHOD_NOT_IMPLEMENTED","The %s method is not implemented",Error),d("ERR_STREAM_ALREADY_FINISHED","Cannot call %s after a stream was finished",Error),d("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable",Error),d("ERR_STREAM_DESTROYED","Cannot call %s after a stream was destroyed",Error),d("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),d("ERR_STREAM_PREMATURE_CLOSE","Premature close",Error),d("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF",Error),d("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event",Error),d("ERR_STREAM_WRITE_AFTER_END","write after end",Error),d("ERR_UNKNOWN_ENCODING","Unknown encoding: %s",TypeError),e.exports={AbortError:b,aggregateTwoErrors:p((function(e,t){if(e&&t&&e!==t){if(Array.isArray(t.errors))return t.errors.push(e),t;const r=new a([t,e],t.message);return r.code=t.code,r}return e||t})),hideStackFrames:p,codes:c}},1705:e=>{"use strict";e.exports={ArrayIsArray:e=>Array.isArray(e),ArrayPrototypeIncludes:(e,t)=>e.includes(t),ArrayPrototypeIndexOf:(e,t)=>e.indexOf(t),ArrayPrototypeJoin:(e,t)=>e.join(t),ArrayPrototypeMap:(e,t)=>e.map(t),ArrayPrototypePop:(e,t)=>e.pop(t),ArrayPrototypePush:(e,t)=>e.push(t),ArrayPrototypeSlice:(e,t,r)=>e.slice(t,r),Error,FunctionPrototypeCall:(e,t,...r)=>e.call(t,...r),FunctionPrototypeSymbolHasInstance:(e,t)=>Function.prototype[Symbol.hasInstance].call(e,t),MathFloor:Math.floor,Number,NumberIsInteger:Number.isInteger,NumberIsNaN:Number.isNaN,NumberMAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:Number.MIN_SAFE_INTEGER,NumberParseInt:Number.parseInt,ObjectDefineProperties:(e,t)=>Object.defineProperties(e,t),ObjectDefineProperty:(e,t,r)=>Object.defineProperty(e,t,r),ObjectGetOwnPropertyDescriptor:(e,t)=>Object.getOwnPropertyDescriptor(e,t),ObjectKeys:e=>Object.keys(e),ObjectSetPrototypeOf:(e,t)=>Object.setPrototypeOf(e,t),Promise,PromisePrototypeCatch:(e,t)=>e.catch(t),PromisePrototypeThen:(e,t,r)=>e.then(t,r),PromiseReject:e=>Promise.reject(e),ReflectApply:Reflect.apply,RegExpPrototypeTest:(e,t)=>e.test(t),SafeSet:Set,String,StringPrototypeSlice:(e,t,r)=>e.slice(t,r),StringPrototypeToLowerCase:e=>e.toLowerCase(),StringPrototypeToUpperCase:e=>e.toUpperCase(),StringPrototypeTrim:e=>e.trim(),Symbol,SymbolAsyncIterator:Symbol.asyncIterator,SymbolHasInstance:Symbol.hasInstance,SymbolIterator:Symbol.iterator,TypedArrayPrototypeSet:(e,t,r)=>e.set(t,r),Uint8Array}},9897:(e,t,r)=>{"use strict";const n=r(8764),i=Object.getPrototypeOf((async function(){})).constructor,o=globalThis.Blob||n.Blob,a=void 0!==o?function(e){return e instanceof o}:function(e){return!1};class s extends Error{constructor(e){if(!Array.isArray(e))throw new TypeError("Expected input to be an Array, got "+typeof e);let t="";for(let r=0;r<e.length;r++)t+=`    ${e[r].stack}\n`;super(t),this.name="AggregateError",this.errors=e}}e.exports={AggregateError:s,once(e){let t=!1;return function(...r){t||(t=!0,e.apply(this,r))}},createDeferredPromise:function(){let e,t;return{promise:new Promise(((r,n)=>{e=r,t=n})),resolve:e,reject:t}},promisify:e=>new Promise(((t,r)=>{e(((e,...n)=>e?r(e):t(...n)))})),debuglog:()=>function(){},format:(e,...t)=>e.replace(/%([sdifj])/g,(function(...[e,r]){const n=t.shift();return"f"===r?n.toFixed(6):"j"===r?JSON.stringify(n):"s"===r&&"object"==typeof n?`${n.constructor!==Object?n.constructor.name:""} {}`.trim():n.toString()})),inspect(e){switch(typeof e){case"string":if(e.includes("'")){if(!e.includes('"'))return`"${e}"`;if(!e.includes("`")&&!e.includes("${"))return`\`${e}\``}return`'${e}'`;case"number":return isNaN(e)?"NaN":Object.is(e,-0)?String(e):e;case"bigint":return`${String(e)}n`;case"boolean":case"undefined":return String(e);case"object":return"{}"}},types:{isAsyncFunction:e=>e instanceof i,isArrayBufferView:e=>ArrayBuffer.isView(e)},isBlob:a},e.exports.promisify.custom=Symbol.for("nodejs.util.promisify.custom")},1950:(e,t,r)=>{"use strict";var n=r(8764).Buffer;const{ObjectDefineProperty:i,ObjectKeys:o,ReflectApply:a}=r(1705),{promisify:{custom:s}}=r(9897),{streamReturningOperators:l,promiseReturningOperators:u}=r(6893),{codes:{ERR_ILLEGAL_CONSTRUCTOR:c}}=r(122),h=r(2524),{pipeline:f}=r(640),{destroyer:d}=r(3726),p=r(7532),b=r(478),y=r(7772),g=e.exports=r(9989).Stream;g.isDisturbed=y.isDisturbed,g.isErrored=y.isErrored,g.isReadable=y.isReadable,g.Readable=r(9574);for(const m of o(l)){const w=l[m];function v(...e){if(new.target)throw c();return g.Readable.from(a(w,this,e))}i(v,"name",{value:w.name}),i(v,"length",{value:w.length}),i(g.Readable.prototype,m,{value:v,enumerable:!1,configurable:!0,writable:!0})}for(const E of o(u)){const S=u[E];function R(...e){if(new.target)throw c();return a(S,this,e)}i(R,"name",{value:S.name}),i(R,"length",{value:S.length}),i(g.Readable.prototype,E,{value:R,enumerable:!1,configurable:!0,writable:!0})}g.Writable=r(797),g.Duplex=r(955),g.Transform=r(3788),g.PassThrough=r(7042),g.pipeline=f;const{addAbortSignal:_}=r(575);g.addAbortSignal=_,g.finished=p,g.destroy=d,g.compose=h,i(g,"promises",{configurable:!0,enumerable:!0,get:()=>b}),i(f,s,{enumerable:!0,get:()=>b.pipeline}),i(p,s,{enumerable:!0,get:()=>b.finished}),g.Stream=g,g._isUint8Array=function(e){return e instanceof Uint8Array},g._uint8ArrayToBuffer=function(e){return n.from(e.buffer,e.byteOffset,e.byteLength)}},478:(e,t,r)=>{"use strict";const{ArrayPrototypePop:n,Promise:i}=r(1705),{isIterable:o,isNodeStream:a}=r(7772),{pipelineImpl:s}=r(640),{finished:l}=r(7532);e.exports={finished:l,pipeline:function(...e){return new i(((t,r)=>{let i,l;const u=e[e.length-1];if(u&&"object"==typeof u&&!a(u)&&!o(u)){const t=n(e);i=t.signal,l=t.end}s(e,((e,n)=>{e?r(e):t(n)}),{signal:i,end:l})}))}}},3858:(e,t,r)=>{var n=r(9306);e.exports=function(e,t,r){"function"==typeof t&&(r=t,t=null),r=r||function(){};var i="";return new n((function(n,o){e.on("data",(function(e){i+="string"==typeof t?e.toString(t):e.toString()})),e.on("end",(function(){n(i),r(null,i)})),e.on("error",(function(e){o(e),r(e)}))}))}},2553:(e,t,r)=>{"use strict";var n=r(9509).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=l,this.end=u,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=c,this.end=h,t=3;break;default:return this.write=f,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function l(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function u(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function c(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function f(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=a(t[n]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--n<r||-2===i?0:(i=a(t[n]))>=0?(i>0&&(e.lastNeed=i-2),i):--n<r||-2===i?0:(i=a(t[n]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},4927:(e,t,r)=>{var n=r(5108);function i(e){try{if(!r.g.localStorage)return!1}catch(e){return!1}var t=r.g.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}e.exports=function(e,t){if(i("noDeprecation"))return e;var r=!1;return function(){if(!r){if(i("throwDeprecation"))throw new Error(t);i("traceDeprecation")?n.trace(t):n.warn(t),r=!0}return e.apply(this,arguments)}}},384:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},5955:(e,t,r)=>{"use strict";var n=r(2584),i=r(8662),o=r(6430),a=r(5692);function s(e){return e.call.bind(e)}var l="undefined"!=typeof BigInt,u="undefined"!=typeof Symbol,c=s(Object.prototype.toString),h=s(Number.prototype.valueOf),f=s(String.prototype.valueOf),d=s(Boolean.prototype.valueOf);if(l)var p=s(BigInt.prototype.valueOf);if(u)var b=s(Symbol.prototype.valueOf);function y(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function g(e){return"[object Map]"===c(e)}function _(e){return"[object Set]"===c(e)}function m(e){return"[object WeakMap]"===c(e)}function w(e){return"[object WeakSet]"===c(e)}function v(e){return"[object ArrayBuffer]"===c(e)}function E(e){return"undefined"!=typeof ArrayBuffer&&(v.working?v(e):e instanceof ArrayBuffer)}function S(e){return"[object DataView]"===c(e)}function R(e){return"undefined"!=typeof DataView&&(S.working?S(e):e instanceof DataView)}t.isArgumentsObject=n,t.isGeneratorFunction=i,t.isTypedArray=a,t.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},t.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):a(e)||R(e)},t.isUint8Array=function(e){return"Uint8Array"===o(e)},t.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===o(e)},t.isUint16Array=function(e){return"Uint16Array"===o(e)},t.isUint32Array=function(e){return"Uint32Array"===o(e)},t.isInt8Array=function(e){return"Int8Array"===o(e)},t.isInt16Array=function(e){return"Int16Array"===o(e)},t.isInt32Array=function(e){return"Int32Array"===o(e)},t.isFloat32Array=function(e){return"Float32Array"===o(e)},t.isFloat64Array=function(e){return"Float64Array"===o(e)},t.isBigInt64Array=function(e){return"BigInt64Array"===o(e)},t.isBigUint64Array=function(e){return"BigUint64Array"===o(e)},g.working="undefined"!=typeof Map&&g(new Map),t.isMap=function(e){return"undefined"!=typeof Map&&(g.working?g(e):e instanceof Map)},_.working="undefined"!=typeof Set&&_(new Set),t.isSet=function(e){return"undefined"!=typeof Set&&(_.working?_(e):e instanceof Set)},m.working="undefined"!=typeof WeakMap&&m(new WeakMap),t.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(m.working?m(e):e instanceof WeakMap)},w.working="undefined"!=typeof WeakSet&&w(new WeakSet),t.isWeakSet=function(e){return w(e)},v.working="undefined"!=typeof ArrayBuffer&&v(new ArrayBuffer),t.isArrayBuffer=E,S.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&S(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=R;var A="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function T(e){return"[object SharedArrayBuffer]"===c(e)}function x(e){return void 0!==A&&(void 0===T.working&&(T.working=T(new A)),T.working?T(e):e instanceof A)}function k(e){return y(e,h)}function N(e){return y(e,f)}function O(e){return y(e,d)}function I(e){return l&&y(e,p)}function j(e){return u&&y(e,b)}t.isSharedArrayBuffer=x,t.isAsyncFunction=function(e){return"[object AsyncFunction]"===c(e)},t.isMapIterator=function(e){return"[object Map Iterator]"===c(e)},t.isSetIterator=function(e){return"[object Set Iterator]"===c(e)},t.isGeneratorObject=function(e){return"[object Generator]"===c(e)},t.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===c(e)},t.isNumberObject=k,t.isStringObject=N,t.isBooleanObject=O,t.isBigIntObject=I,t.isSymbolObject=j,t.isBoxedPrimitive=function(e){return k(e)||N(e)||O(e)||I(e)||j(e)},t.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(E(e)||x(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(t,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},9539:(e,t,r)=>{var n=r(4155),i=r(5108),o=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},a=/%[sdj%]/g;t.format=function(e){if(!w(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(c(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,i=n.length,o=String(e).replace(a,(function(e){if("%%"===e)return"%";if(r>=i)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}})),s=n[r];r<i;s=n[++r])_(s)||!S(s)?o+=" "+s:o+=" "+c(s);return o},t.deprecate=function(e,r){if(void 0!==n&&!0===n.noDeprecation)return e;if(void 0===n)return function(){return t.deprecate(e,r).apply(this,arguments)};var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?i.trace(r):i.error(r),o=!0}return e.apply(this,arguments)}};var s={},l=/^$/;if(n.env.NODE_DEBUG){var u=n.env.NODE_DEBUG;u=u.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),l=new RegExp("^"+u+"$","i")}function c(e,r){var n={seen:[],stylize:f};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),g(r)?n.showHidden=r:r&&t._extend(n,r),v(n.showHidden)&&(n.showHidden=!1),v(n.depth)&&(n.depth=2),v(n.colors)&&(n.colors=!1),v(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=h),d(n,e,n.depth)}function h(e,t){var r=c.styles[t];return r?"["+c.colors[r][0]+"m"+e+"["+c.colors[r][1]+"m":e}function f(e,t){return e}function d(e,r,n){if(e.customInspect&&r&&T(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,e);return w(i)||(i=d(e,i,n)),i}var o=function(e,t){if(v(t))return e.stylize("undefined","undefined");if(w(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return m(t)?e.stylize(""+t,"number"):g(t)?e.stylize(""+t,"boolean"):_(t)?e.stylize("null","null"):void 0}(e,r);if(o)return o;var a=Object.keys(r),s=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(r)),A(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return p(r);if(0===a.length){if(T(r)){var l=r.name?": "+r.name:"";return e.stylize("[Function"+l+"]","special")}if(E(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(R(r))return e.stylize(Date.prototype.toString.call(r),"date");if(A(r))return p(r)}var u,c="",h=!1,f=["{","}"];return y(r)&&(h=!0,f=["[","]"]),T(r)&&(c=" [Function"+(r.name?": "+r.name:"")+"]"),E(r)&&(c=" "+RegExp.prototype.toString.call(r)),R(r)&&(c=" "+Date.prototype.toUTCString.call(r)),A(r)&&(c=" "+p(r)),0!==a.length||h&&0!=r.length?n<0?E(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),u=h?function(e,t,r,n,i){for(var o=[],a=0,s=t.length;a<s;++a)I(t,String(a))?o.push(b(e,t,r,n,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(b(e,t,r,n,i,!0))})),o}(e,r,n,s,a):a.map((function(t){return b(e,r,n,s,t,h)})),e.seen.pop(),function(e,t,r){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(u,c,f)):f[0]+c+f[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function b(e,t,r,n,i,o){var a,s,l;if((l=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(s=e.stylize("[Setter]","special")),I(n,i)||(a="["+i+"]"),s||(e.seen.indexOf(l.value)<0?(s=_(r)?d(e,l.value,null):d(e,l.value,r-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),v(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function y(e){return Array.isArray(e)}function g(e){return"boolean"==typeof e}function _(e){return null===e}function m(e){return"number"==typeof e}function w(e){return"string"==typeof e}function v(e){return void 0===e}function E(e){return S(e)&&"[object RegExp]"===x(e)}function S(e){return"object"==typeof e&&null!==e}function R(e){return S(e)&&"[object Date]"===x(e)}function A(e){return S(e)&&("[object Error]"===x(e)||e instanceof Error)}function T(e){return"function"==typeof e}function x(e){return Object.prototype.toString.call(e)}function k(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(e=e.toUpperCase(),!s[e])if(l.test(e)){var r=n.pid;s[e]=function(){var n=t.format.apply(t,arguments);i.error("%s %d: %s",e,r,n)}}else s[e]=function(){};return s[e]},t.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=r(5955),t.isArray=y,t.isBoolean=g,t.isNull=_,t.isNullOrUndefined=function(e){return null==e},t.isNumber=m,t.isString=w,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=v,t.isRegExp=E,t.types.isRegExp=E,t.isObject=S,t.isDate=R,t.types.isDate=R,t.isError=A,t.types.isNativeError=A,t.isFunction=T,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(384);var N=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function O(){var e=new Date,t=[k(e.getHours()),k(e.getMinutes()),k(e.getSeconds())].join(":");return[e.getDate(),N[e.getMonth()],t].join(" ")}function I(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){i.log("%s - %s",O(),t.format.apply(t,arguments))},t.inherits=r(5717),t._extend=function(e,t){if(!t||!S(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var j="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function P(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(j&&e[j]){var t;if("function"!=typeof(t=e[j]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,j,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,r,n=new Promise((function(e,n){t=e,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(e,n){e?r(e):t(n)}));try{e.apply(this,i)}catch(e){r(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),j&&Object.defineProperty(t,j,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,o(e))},t.promisify.custom=j,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],r=0;r<arguments.length;r++)t.push(arguments[r]);var i=t.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};e.apply(this,t).then((function(e){n.nextTick(a.bind(null,null,e))}),(function(e){n.nextTick(P.bind(null,e,a))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,o(e)),t}},6430:(e,t,r)=>{"use strict";var n=r(4029),i=r(3083),o=r(1924),a=o("Object.prototype.toString"),s=r(6410)(),l="undefined"==typeof globalThis?r.g:globalThis,u=i(),c=o("String.prototype.slice"),h={},f=r(882),d=Object.getPrototypeOf;s&&f&&d&&n(u,(function(e){if("function"==typeof l[e]){var t=new l[e];if(Symbol.toStringTag in t){var r=d(t),n=f(r,Symbol.toStringTag);if(!n){var i=d(r);n=f(i,Symbol.toStringTag)}h[e]=n.get}}}));var p=r(5692);e.exports=function(e){return!!p(e)&&(s&&Symbol.toStringTag in e?function(e){var t=!1;return n(h,(function(r,n){if(!t)try{var i=r.call(e);i===n&&(t=i)}catch(e){}})),t}(e):c(a(e),8,-1))}},3347:(e,t)=>{"use strict";function r(e){return e>=65&&e<=90||e>=97&&e<=122||58===e||95===e||8204===e||8205===e||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=767||e>=880&&e<=893||e>=895&&e<=8191||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039}Object.defineProperty(t,"__esModule",{value:!0}),t.CHAR="\t\n\r -퟿-�𐀀-􏿿",t.S=" \t\r\n",t.NAME_START_CHAR=":A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�𐀀-󯿿",t.NAME_CHAR="-"+t.NAME_START_CHAR+".0-9·̀-ͯ‿-⁀",t.CHAR_RE=new RegExp("^["+t.CHAR+"]$","u"),t.S_RE=new RegExp("^["+t.S+"]+$","u"),t.NAME_START_CHAR_RE=new RegExp("^["+t.NAME_START_CHAR+"]$","u"),t.NAME_CHAR_RE=new RegExp("^["+t.NAME_CHAR+"]$","u"),t.NAME_RE=new RegExp("^["+t.NAME_START_CHAR+"]["+t.NAME_CHAR+"]*$","u"),t.NMTOKEN_RE=new RegExp("^["+t.NAME_CHAR+"]+$","u"),t.S_LIST=[32,10,13,9],t.isChar=function(e){return e>=32&&e<=55295||10===e||13===e||9===e||e>=57344&&e<=65533||e>=65536&&e<=1114111},t.isS=function(e){return 32===e||10===e||13===e||9===e},t.isNameStartChar=r,t.isNameChar=function(e){return r(e)||e>=48&&e<=57||45===e||46===e||183===e||e>=768&&e<=879||e>=8255&&e<=8256}},5285:(e,t)=>{"use strict";function r(e){return e>=65&&e<=90||e>=97&&e<=122||58===e||95===e||8204===e||8205===e||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=767||e>=880&&e<=893||e>=895&&e<=8191||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039}Object.defineProperty(t,"__esModule",{value:!0}),t.CHAR="-퟿-�𐀀-􏿿",t.RESTRICTED_CHAR="-\b\v\f---",t.S=" \t\r\n",t.NAME_START_CHAR=":A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�𐀀-󯿿",t.NAME_CHAR="-"+t.NAME_START_CHAR+".0-9·̀-ͯ‿-⁀",t.CHAR_RE=new RegExp("^["+t.CHAR+"]$","u"),t.RESTRICTED_CHAR_RE=new RegExp("^["+t.RESTRICTED_CHAR+"]$","u"),t.S_RE=new RegExp("^["+t.S+"]+$","u"),t.NAME_START_CHAR_RE=new RegExp("^["+t.NAME_START_CHAR+"]$","u"),t.NAME_CHAR_RE=new RegExp("^["+t.NAME_CHAR+"]$","u"),t.NAME_RE=new RegExp("^["+t.NAME_START_CHAR+"]["+t.NAME_CHAR+"]*$","u"),t.NMTOKEN_RE=new RegExp("^["+t.NAME_CHAR+"]+$","u"),t.S_LIST=[32,10,13,9],t.isChar=function(e){return e>=1&&e<=55295||e>=57344&&e<=65533||e>=65536&&e<=1114111},t.isRestrictedChar=function(e){return e>=1&&e<=8||11===e||12===e||e>=14&&e<=31||e>=127&&e<=132||e>=134&&e<=159},t.isCharAndNotRestricted=function(e){return 9===e||10===e||13===e||e>31&&e<127||133===e||e>159&&e<=55295||e>=57344&&e<=65533||e>=65536&&e<=1114111},t.isS=function(e){return 32===e||10===e||13===e||9===e},t.isNameStartChar=r,t.isNameChar=function(e){return r(e)||e>=48&&e<=57||45===e||46===e||183===e||e>=768&&e<=879||e>=8255&&e<=8256}},7046:(e,t)=>{"use strict";function r(e){return e>=65&&e<=90||95===e||e>=97&&e<=122||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=767||e>=880&&e<=893||e>=895&&e<=8191||e>=8204&&e<=8205||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039}Object.defineProperty(t,"__esModule",{value:!0}),t.NC_NAME_START_CHAR="A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�𐀀-󯿿",t.NC_NAME_CHAR="-"+t.NC_NAME_START_CHAR+".0-9·̀-ͯ‿-⁀",t.NC_NAME_START_CHAR_RE=new RegExp("^["+t.NC_NAME_START_CHAR+"]$","u"),t.NC_NAME_CHAR_RE=new RegExp("^["+t.NC_NAME_CHAR+"]$","u"),t.NC_NAME_RE=new RegExp("^["+t.NC_NAME_START_CHAR+"]["+t.NC_NAME_CHAR+"]*$","u"),t.isNCNameStartChar=r,t.isNCNameChar=function(e){return r(e)||45===e||46===e||e>=48&&e<=57||183===e||e>=768&&e<=879||e>=8255&&e<=8256}},5825:(e,t,r)=>{"use strict";r.r(t),r.d(t,{addNav:()=>S,enableLinkCallback:()=>k,fetchData:()=>T,fetchTree:()=>N,fetchTreeCB:()=>O,fetchTriples:()=>x,fetchValue:()=>A,setEndpoint:()=>R});var n=r(8954),i="";function o(){return i}function a(e,t){var r=e;if(t)for(const e in t)r=r.replaceAll("@"+e.toUpperCase()+"@",t[e]);return r}var s=!1;function l(e){e.spinnerShowing&&(e.spinnerShowing=!1,e.innerHTML="")}var u=r(5108);const c=new Map,h=new Map,f=new Map,d=new Map,p=new RegExp("^[http|https]");var b=!1;function y(e,t){if(t&&!e.tHead){const r=e.createTHead().insertRow().appendChild(document.createElement("th"));r.colSpan="2",r.innerHTML=t}}function g(e,t,r){var n=f.get(e);if(n)return{link:n};var i=h.get(e);i||(i=t);var o=d.get(e);return o||(o=r),{uri:e,link:i,graph:o}}function _(e,t,r){const n=g(e,t,r);if(n.uri){const e=n.graph?"graph="+encodeURIComponent(n.graph)+"&":"";return"nav_"+n.link+".html?"+e+"uri="+encodeURIComponent(n.uri)}return n.link}function m(e,t,r){if("NamedNode"==e.termType){var n=c.get(e.value);if(n||(n=e.value),b){const i=g(e.value,t,r),o=i.graph?i.graph:"";return"<a name='"+e.value+"' rel='link_callback' href='#' onclick='link_callback()' data-link='nav_"+i.link+"' data-graphuri='"+o+"' data-subjecturi='"+i.uri+"'>"+n+"</a>"}{const i=_(e.value,t,r),o=p.test(i)?" target='_blank'":"";return"<a name='"+e.value+"' href='"+i+"'"+o+">"+n+"</a>"}}return e.value}async function w(e,t,r){if(r)if(c.clear(),h.clear(),f.clear(),d.clear(),y(e,r.label),r.uri){const i=new n.SparqlEndpointFetcher;(await i.fetchTriples(o(),a(t,r))).on("data",(t=>function(e,t,r){if("urn:ldt:link"==t._predicate.value)document.getElementsByName(t._subject.value).forEach((e=>{b?e.setAttribute("data-link","nav_"+t._object.value):e.href=_(t._subject.value,t._object.value,r.graph)})),h.set(t._subject.value,t._object.value);else if("urn:ldt:glink"==t._predicate.value)f.set(t._subject.value,t._object.value),document.getElementsByName(t._subject.value).forEach((e=>{if(b)e.setAttribute("data-link",t._object.value);else{const n=_(t._subject.value,null,r.graph);e.href=n,p.test(n)&&(e.target="_blank")}}));else if("urn:ldt:graph"==t._predicate.value)document.getElementsByName(t._subject.value).forEach((e=>{if(b)e.setAttribute("data-graphuri",t._object.value);else{const r=e.href.replace(/^.*nav_(.+).html.*$/,"$1");e.href=_(t._subject.value,r,t._object.value)}})),d.set(t._subject.value,t._object.value);else if(t._subject.value==r.uri){"http://www.w3.org/2000/01/rdf-schema#label"==t._predicate.value&&y(e,t._object.value);var n=document.getElementById(t._predicate.value),i=t._predicate.value.replace(/^.+(#|\/)(.+)$/,"$2"),o=c.get(t._predicate.value);if(o||(o=i),n){const e=n.childNodes[1];e.innerHTML=e.innerHTML+", "+m(t._object,i,r.graph)}else{(n=(0==e.tBodies.length?e.createTBody():e.tBodies[0]).insertRow()).id=t._predicate.value;const a=n.insertCell(),s=c.get(t._predicate.value);a.innerHTML=s||o,n.insertCell().innerHTML=m(t._object,i,r.graph)}}"http://www.w3.org/2000/01/rdf-schema#label"==t._predicate.value&&((n=document.getElementById(t._subject.value))&&(n.childNodes[0].innerHTML=t._object.value),document.getElementsByName(t._subject.value).forEach((e=>{e.innerHTML=t._object.value})),c.set(t._subject.value,t._object.value))}(e,t,r)))}else u.log("Error: no URI-parameter");else u.log("Error: no params (at least a URI-parameter should be present)")}async function v(e,t){const r=new n.SparqlEndpointFetcher,i=e.params,a=i.graph?"GRAPH <"+i.graph+">":"",s=i.class?"?uri a <"+i.class+">.":"",l=(i.class&&i.class,i.label?"?uri <"+i.label+"> ?lbl.":"?uri <http://www.w3.org/2000/01/rdf-schema#label> ?lbl.");var u="",c="";if(i.upper?(u=i.uri?"?uri <"+i.upper+"> <"+i.uri+">.":"?uri <"+i.upper+"> ?p.",c="?c <"+i.upper+"> ?uri."):i.lower&&(u=i.uri?"<"+i.uri+"> <"+i.lower+"> ?uri.":"?p <"+i.lower+"> ?uri.",c="?uri <"+i.lower+"> ?c."),""!=u&&""!=c){const n=i.uri?"SELECT ?uri (min(?lbl) as ?label) (count(distinct ?c) as ?count) WHERE {"+a+"{"+u+l+" OPTIONAL {"+c+"}}} GROUP BY ?uri ORDER BY ?label":"SELECT ?uri (min(?lbl) as ?label) (count(distinct ?c) as ?count) WHERE {"+a+"{"+s+l+"FILTER NOT EXISTS {"+u+"} OPTIONAL {"+c+"}}} GROUP BY ?uri ORDER BY ?label";(await r.fetchBindings(o(),n)).on("data",(r=>function(e,t,r){const n=document.createElement("li");var i=r.count.value;if(t.appendChild(n),0==i)E(n,e,r,i);else{const t=document.createElement("details");n.appendChild(t);const o=document.createElement("summary");t.appendChild(o),E(o,e,r,i),t.uri=r.uri.value,t.treelink=e,t.onclick=function(){const e=document.createElement("ul");this.appendChild(e),this.onclick=null,this.treelink.params.uri=this.uri,v(this.treelink,e)}}}(e,t,r)))}}function E(e,t,r,n){const i=document.createElement("a");e.appendChild(i),i.href="#",i.innerHTML=r.label.value+(n>0?" ("+n+")":""),t.tablelink&&(i.uri=r.uri.value,i.treelink=t,i.onclick=function(){this.treelink.tablelink.innerHTML="",this.treelink.params.uri=this.uri,w(this.treelink.tablelink,this.treelink.query,this.treelink.params)}),t.callback&&(i.uri=r.uri.value,i.treelink=t,i.onclick=function(){this.treelink.params.uri=this.uri,this.treelink.callback(this.treelink.params)})}function S(e,t){!function(e,t){const r=document.createElement("nav");r.className="navbar navbar-expand-lg bg-light";var n='\n  <div class="container-fluid">\n    <a class="navbar-brand" href="#">'+e+'</a>\n    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">\n      <span class="navbar-toggler-icon"></span>\n    </button>\n    <div class="collapse navbar-collapse" id="navbarSupportedContent">\n      <ul class="navbar-nav me-auto mb-2 mb-lg-0">\n  ';for(const e in t)n=n+'<li class="nav-item"><a class="nav-link" href="'+t[e].toLowerCase()+'.html">'+t[e]+"</a></li>\n";r.innerHTML=n+'\n      </ul>\n      <form class="d-flex" role="search" action="search.html">\n        <input class="form-control me-2" name="term" type="search" placeholder="Zoeken" aria-label="Zoeken">\n        <button class="btn btn-outline-success" type="submit">Zoeken</button>\n      </form>\n    </div>\n  </div>\n  ',document.body.appendChild(r)}(e,t)}function R(e){!function(e){i=e}(e)}async function A(e,t,r,i){!async function(e,t,r,i){if(e)i(e);else{const e=new n.SparqlEndpointFetcher;(await e.fetchBindings(o(),a(t,r))).on("data",(e=>{i(e[Object.keys(e)[0]].value)}))}}(e,t,r,i)}async function T(e,t,r){!async function(e,t,r){!function(e){e.spinnerShowing=!0,e.innerHTML="<div class='d-flex justify-content-center'><div class='spinner-border m-5' role='status'></div></div>"}(e);const i=new n.SparqlEndpointFetcher,u=await i.fetchBindings(o(),a(t,r));u.on("variables",(t=>function(e,t){l(e);const r=e.createTHead().insertRow();e.dataColumns=[],t.forEach((function(t){t.value.match(/_label$/)||t.value.match(/_graph$/)||t.value.match(/_link$/)||t.value.match(/_glink$/)||(r.appendChild(document.createElement("th")).innerHTML=t.value,e.dataColumns.push(t.value))}))}(e,t))),u.on("data",(t=>function(e,t){l(e);const r=(0==e.tBodies.length?e.createTBody():e.tBodies[0]).insertRow();e.dataColumns.forEach((function(e){const n=r.insertCell(),i=t[e];if(i)if("NamedNode"==i.termType){const r=t[e+"_label"];var o=i.value;r&&(o=r.value);const c=t[e+"_glink"];if(c)n.innerHTML="<a href='"+c.value+"' target='_blank'>"+o+"</a>";else{const r=t[e+"_link"];var a=e;r&&(a=r.value);var l=t[e+"_graph"];l||(l=t._graph);var u=t[e+"_query"];if(u||(u=t._query),s){const e=l?l.value:"",t=u?u.value:"";n.innerHTML="<a href='#' rel='link_callback' href='#' onclick='link_callback()' data-link='nav_"+a+"' data-graphuri='"+e+t+"' data-subjecturi='"+i.value+"'>"+o+"</a>"}else{const e=l?"graph="+encodeURIComponent(l.value)+"&":"",t=u?"query="+encodeURIComponent(u.value)+"&":"";n.innerHTML="<a href='nav_"+a+".html?"+e+t+"uri="+encodeURIComponent(i.value)+"'>"+o+"</a>"}}}else n.innerHTML=i.value}))}(e,t)))}(e,t,r)}async function x(e,t,r){w(e,t,r)}async function k(e){!function(e){b=e}(e),function(e){s=e}(e)}async function N(e,t,r,n){!async function(e,t,r,n){n.types?n.types.forEach((i=>{const o=document.createElement("li");e.appendChild(o);const a=document.createElement("details");o.appendChild(a);const s=document.createElement("summary");a.appendChild(s),s.innerHTML=i.replace(/^.+(#|\/)(.+)$/,"$2"),o.tablelink=t,o.query=r,o.params=Object.assign({},n),o.params.class=i,a.treelink=o,a.onclick=function(){const e=document.createElement("ul");this.appendChild(e),this.onclick=null,this.treelink.params.uri=this.uri,v(this.treelink,e)}})):(e.tablelink=t,e.query=r,e.params=n,v(e,e))}(e,t,r,n)}async function O(e,t,r){!async function(e,t,r){t.types?t.types.forEach((n=>{const i=document.createElement("li");e.appendChild(i);const o=document.createElement("details");i.appendChild(o);const a=document.createElement("summary");o.appendChild(a),a.innerHTML=n.replace(/^.+(#|\/)(.+)$/,"$2"),i.callback=r,i.params=Object.assign({},t),i.params.class=n,o.treelink=i,o.onclick=function(){const e=document.createElement("ul");this.appendChild(e),this.onclick=null,this.treelink.params.uri=this.uri,v(this.treelink,e)}})):(e.callback=r,e.params=t,v(e,e))}(e,t,r)}},2361:()=>{},4616:()=>{},9270:()=>{},8080:()=>{},3083:(e,t,r)=>{"use strict";var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],i="undefined"==typeof globalThis?r.g:globalThis;e.exports=function(){for(var e=[],t=0;t<n.length;t++)"function"==typeof i[n[t]]&&(e[e.length]=n[t]);return e}},882:(e,t,r)=>{"use strict";var n=r(210)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(e){n=null}e.exports=n}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.c=t,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var n=r(r.s=5825);rdflib=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,